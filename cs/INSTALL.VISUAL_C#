Build instructions
------------------

The code has been built and tested with Visual C# Version 7.1.3088 and
.NET Framework 1.1 Version 1.1.4322.

Unpack the archive. The sources will be contained in the 'icecs'
subdirectory.

You can either build the slice2cs compiler from the Ice for C++ source
distribution, or you can download the Ice binary package for Windows,
which contains a compiled versions of slice2cs.  If you build slice2cs
yourself, make sure it is in your PATH or, alternatively, place
slice2cs.exe into the bin directory of the Ice for C# distribution.

TODO: This is not correct. The slice and iceutil DLLs must be copied
as well, and also icecpp.exe.

Open icecs/All.sln in Visual C# and build the "All" solution (both
debug and release builds are supported).

Note: The first time you build, you will most likely find that you get
errors for the "adapterDeactivationCOL" project. The work-around is
to rebuild (not build) the "adapterDeactivationCOL" project once you
have seen the errors. Thereafter, building the project seems to work
fine. (If someone can work out why this is happening, please let us know!)


Running the tests
-----------------

To run the tests, you will need Python:

http://www.activestate.com/Products/ActivePython/

Run "python allTests.py" from the icecs directory to run all of the
tests, or "python allTests.py -l" to run the tests in an endless loop.

You can also run individual tests in the various test directories with
"python run.py".

If you have the Mono run time installed under Windows (see
INSTALL.MONO), you can also execute the tests using the Mono run time
(instead of the .NET run time). To do this, add the -m option to
allTests.py or run.py.


Installation
------------

You can copy the generated icecs/bin/icecs.dll file where you want it
and then reference it in your appliation code.

Alternatively, you can add icecs.dll to the global assembly cache.  To
do this, open Explorer and navigate to C:\WINDOWS\assembly.  Then drag
and drop (or copy and paste) icecs.dll into the right-hand pane to
install it in the cache.

Or you can use gacutil from the command line to achieve the same thing:

    gacutil /i"path_to_icecs.dll"

You can find gacutil.exe in the SDK\Tools\Bin folder of your Visual C#
installation. For example, assuming that you have installed Visual C#
in C:\Program Files, the path to gacutil is

    C:\Program Files\Microsoft Visual Studio .NET 2003\SDK\v1.1\Bin\gacutil.exe

Once installed in the cache, the assembly will always be located
correctly without having to set environment variables or copying it
into the directory of a .exe. (However, to reference the assembly
in the Visual C# project file, so the linker can find it, you must
still reference the physical assembly file (icecs.dll) -- you cannot
point the Visual C# linker at the copy that is in the GAC.)

If you want line numbers for stack traces, you must also install the
icecs.pdb file in the GAC. Unfortunately, you cannot do this using
Explorer, so you have to do it from the command line. Open a command shell
window and navigate to C:\WINDOWS\assembly\GAC\icecs. (Assuming C:\WINDOWS
is your system root.) Doing a directory listing there, you will find
a directory named 1.5.0.0__<UUID>, for example:

    1.5.0.0__1f998c50fec78381

Change to that directory. In this directory, you will a file called
__AssemblyInfo__.ini and the icecs.dll you installed into the GAC in the
preceding step. Now copy the icecs.pdb file into this directory:

    copy <path_to_icecs.pdb> .


Known issues
------------

Please let us know about any bugs, comments, or feedback in the Ice
forum at http://www.zeroc.com/vbulletin/.
