// **********************************************************************
//
// Copyright (c) 2003-2012 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5b
//
// <auto-generated>
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace Test
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OneOptionalHelper
    {
        public OneOptionalHelper(Ice.InputStream inS__)
        {
            _in = inS__;
            _pp = new IceInternal.ParamPatcher<Test.OneOptional>("::Test::OneOptional");
        }

        public static void write(Ice.OutputStream outS__, OneOptional v__)
        {
            outS__.writeObject(v__);
        }

        public void read()
        {
            _in.readObject(_pp);
        }

        public Test.OneOptional value
        {
            get
            {
                return (Test.OneOptional)_pp.value;
            }
        }

        private Ice.InputStream _in;
        private IceInternal.ParamPatcher<Test.OneOptional> _pp;
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class OneOptional : Ice.ObjectImpl
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int> a;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public OneOptional()
        {
            this.a = new Ice.Optional<int>();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public OneOptional(Ice.Optional<int> a)
        {
            this.a = a;
        }

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Test::OneOptional"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id()
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), true);
            os__.writeInt(1, a);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            a = is__.readInt(1);
            is__.endReadSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice(ice_staticId(), true);
            if(a.HasValue && outS__.writeOptional(1, Ice.OptionalFormat.F4))
            {
                outS__.writeInt(a.Value);
            }
            outS__.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            if(inS__.readOptional(1, Ice.OptionalFormat.F4))
            {
                int tmpValue__;
                tmpValue__ = inS__.readInt();
                a = new Ice.Optional<int>(tmpValue__);
            }
            inS__.endSlice();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public enum MyEnum
    {
        MyEnumMember
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class MyEnumHelper
    {
        public static void write(Ice.OutputStream outS__, Test.MyEnum v__)
        {
            if((int)v__ < 0 || (int)v__ > 0)
            {
                throw new Ice.MarshalException("enumerator out of range");
            }
            outS__.writeEnum((int)v__, 0);
        }

        public static Test.MyEnum read(Ice.InputStream inS__)
        {
            Test.MyEnum v__;
            v__ = (Test.MyEnum)inS__.readEnum(0);
            if((int)v__ < 0 || (int)v__ > 0)
            {
                throw new Ice.MarshalException("enumerator out of range");
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class SmallStructHelper
    {
        public static void write(Ice.OutputStream outS__, SmallStruct v__)
        {
            v__.ice_write(outS__);
        }

        public static SmallStruct read(Ice.InputStream inS__)
        {
            SmallStruct v__ = new SmallStruct();
            v__.ice_read(inS__);
            return v__;
        }
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial struct SmallStruct
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public byte m;

        #endregion

        #region Constructor

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public SmallStruct(byte m)
        {
            this.m = m;
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Test::SmallStruct");
            IceInternal.HashUtil.hashAdd(ref h__, m);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool Equals(object other__)
        {
            if(!(other__ is SmallStruct))
            {
                return false;
            }
            SmallStruct o__ = (SmallStruct)other__;
            if(!m.Equals(o__.m))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator==(SmallStruct lhs__, SmallStruct rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator!=(SmallStruct lhs__, SmallStruct rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeByte(m);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void read__(IceInternal.BasicStream is__)
        {
            m = is__.readByte();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void ice_write(Ice.OutputStream outS__)
        {
            outS__.writeByte(m);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void ice_read(Ice.InputStream inS__)
        {
            m = inS__.readByte();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class FixedStructHelper
    {
        public static void write(Ice.OutputStream outS__, FixedStruct v__)
        {
            v__.ice_write(outS__);
        }

        public static FixedStruct read(Ice.InputStream inS__)
        {
            FixedStruct v__ = new FixedStruct();
            v__.ice_read(inS__);
            return v__;
        }
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial struct FixedStruct
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public int m;

        #endregion

        #region Constructor

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public FixedStruct(int m)
        {
            this.m = m;
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Test::FixedStruct");
            IceInternal.HashUtil.hashAdd(ref h__, m);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool Equals(object other__)
        {
            if(!(other__ is FixedStruct))
            {
                return false;
            }
            FixedStruct o__ = (FixedStruct)other__;
            if(!m.Equals(o__.m))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator==(FixedStruct lhs__, FixedStruct rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator!=(FixedStruct lhs__, FixedStruct rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(m);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void read__(IceInternal.BasicStream is__)
        {
            m = is__.readInt();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void ice_write(Ice.OutputStream outS__)
        {
            outS__.writeInt(m);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void ice_read(Ice.InputStream inS__)
        {
            m = inS__.readInt();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class VarStructHelper
    {
        public static void write(Ice.OutputStream outS__, VarStruct v__)
        {
            v__.ice_write(outS__);
        }

        public static VarStruct read(Ice.InputStream inS__)
        {
            VarStruct v__ = new VarStruct();
            v__.ice_read(inS__);
            return v__;
        }
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class VarStruct : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public string m;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public VarStruct()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public VarStruct(string m)
        {
            this.m = m;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Test::VarStruct");
            IceInternal.HashUtil.hashAdd(ref h__, m);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            VarStruct o__ = (VarStruct)other__;
            if(m == null)
            {
                if(o__.m != null)
                {
                    return false;
                }
            }
            else
            {
                if(!m.Equals(o__.m))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator==(VarStruct lhs__, VarStruct rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator!=(VarStruct lhs__, VarStruct rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(m);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void read__(IceInternal.BasicStream is__)
        {
            m = is__.readString();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void ice_write(Ice.OutputStream outS__)
        {
            outS__.writeString(m);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void ice_read(Ice.InputStream inS__)
        {
            m = inS__.readString();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class ClassVarStructHelper
    {
        public static void write(Ice.OutputStream outS__, ClassVarStruct v__)
        {
            v__.ice_write(outS__);
        }

        public static ClassVarStruct read(Ice.InputStream inS__)
        {
            ClassVarStruct v__ = new ClassVarStruct();
            v__.ice_read(inS__);
            return v__;
        }
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ClassVarStruct : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public int a;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public ClassVarStruct()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public ClassVarStruct(int a)
        {
            this.a = a;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Test::ClassVarStruct");
            IceInternal.HashUtil.hashAdd(ref h__, a);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            ClassVarStruct o__ = (ClassVarStruct)other__;
            if(!a.Equals(o__.a))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator==(ClassVarStruct lhs__, ClassVarStruct rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator!=(ClassVarStruct lhs__, ClassVarStruct rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(a);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void read__(IceInternal.BasicStream is__)
        {
            a = is__.readInt();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void ice_write(Ice.OutputStream outS__)
        {
            outS__.writeInt(a);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void ice_read(Ice.InputStream inS__)
        {
            a = inS__.readInt();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class MultiOptionalHelper
    {
        public MultiOptionalHelper(Ice.InputStream inS__)
        {
            _in = inS__;
            _pp = new IceInternal.ParamPatcher<Test.MultiOptional>("::Test::MultiOptional");
        }

        public static void write(Ice.OutputStream outS__, MultiOptional v__)
        {
            outS__.writeObject(v__);
        }

        public void read()
        {
            _in.readObject(_pp);
        }

        public Test.MultiOptional value
        {
            get
            {
                return (Test.MultiOptional)_pp.value;
            }
        }

        private Ice.InputStream _in;
        private IceInternal.ParamPatcher<Test.MultiOptional> _pp;
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class MultiOptional : Ice.ObjectImpl
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<byte> a;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<bool> b;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<short> c;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int> d;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<long> e;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<float> f;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<double> g;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<string> h;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.MyEnum> i;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.MultiOptionalPrx> j;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.MultiOptional> k;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<byte[]> bs;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<string[]> ss;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> iid;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> sid;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.FixedStruct> fs;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.VarStruct> vs;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<short[]> shs;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.MyEnum[]> es;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.FixedStruct[]> fss;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.VarStruct[]> vss;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.OneOptional[]> oos;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.OneOptionalPrx[]> oops;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.MyEnum>> ied;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.FixedStruct>> ifsd;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.VarStruct>> ivsd;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptional>> iood;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx>> ioopd;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<bool[]> bos;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<byte[]> ser;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public MultiOptional()
        {
            this.a = new Ice.Optional<byte>();
            this.b = new Ice.Optional<bool>();
            this.c = new Ice.Optional<short>();
            this.d = new Ice.Optional<int>();
            this.e = new Ice.Optional<long>();
            this.f = new Ice.Optional<float>();
            this.g = new Ice.Optional<double>();
            this.h = new Ice.Optional<string>();
            this.i = new Ice.Optional<Test.MyEnum>();
            this.j = new Ice.Optional<Test.MultiOptionalPrx>();
            this.k = new Ice.Optional<Test.MultiOptional>();
            this.bs = new Ice.Optional<byte[]>();
            this.ss = new Ice.Optional<string[]>();
            this.iid = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
            this.sid = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
            this.fs = new Ice.Optional<Test.FixedStruct>();
            this.vs = new Ice.Optional<Test.VarStruct>();
            this.shs = new Ice.Optional<short[]>();
            this.es = new Ice.Optional<Test.MyEnum[]>();
            this.fss = new Ice.Optional<Test.FixedStruct[]>();
            this.vss = new Ice.Optional<Test.VarStruct[]>();
            this.oos = new Ice.Optional<Test.OneOptional[]>();
            this.oops = new Ice.Optional<Test.OneOptionalPrx[]>();
            this.ied = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.MyEnum>>();
            this.ifsd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.FixedStruct>>();
            this.ivsd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.VarStruct>>();
            this.iood = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptional>>();
            this.ioopd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx>>();
            this.bos = new Ice.Optional<bool[]>();
            this.ser = new Ice.Optional<byte[]>();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public MultiOptional(Ice.Optional<byte> a, Ice.Optional<bool> b, Ice.Optional<short> c, Ice.Optional<int> d, Ice.Optional<long> e, Ice.Optional<float> f, Ice.Optional<double> g, Ice.Optional<string> h, Ice.Optional<Test.MyEnum> i, Ice.Optional<Test.MultiOptionalPrx> j, Ice.Optional<Test.MultiOptional> k, Ice.Optional<byte[]> bs, Ice.Optional<string[]> ss, Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> iid, Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> sid, Ice.Optional<Test.FixedStruct> fs, Ice.Optional<Test.VarStruct> vs, Ice.Optional<short[]> shs, Ice.Optional<Test.MyEnum[]> es, Ice.Optional<Test.FixedStruct[]> fss, Ice.Optional<Test.VarStruct[]> vss, Ice.Optional<Test.OneOptional[]> oos, Ice.Optional<Test.OneOptionalPrx[]> oops, Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.MyEnum>> ied, Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.FixedStruct>> ifsd, Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.VarStruct>> ivsd, Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptional>> iood, Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx>> ioopd, Ice.Optional<bool[]> bos, Ice.Optional<byte[]> ser)
        {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.e = e;
            this.f = f;
            this.g = g;
            this.h = h;
            this.i = i;
            this.j = j;
            this.k = k;
            this.bs = bs;
            this.ss = ss;
            this.iid = iid;
            this.sid = sid;
            this.fs = fs;
            this.vs = vs;
            this.shs = shs;
            this.es = es;
            this.fss = fss;
            this.vss = vss;
            this.oos = oos;
            this.oops = oops;
            this.ied = ied;
            this.ifsd = ifsd;
            this.ivsd = ivsd;
            this.iood = iood;
            this.ioopd = ioopd;
            this.bos = bos;
            this.ser = ser;
        }

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Test::MultiOptional"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id()
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), true);
            os__.writeByte(1, a);
            os__.writeBool(2, b);
            os__.writeShort(3, c);
            os__.writeInt(4, d);
            os__.writeLong(5, e);
            os__.writeFloat(6, f);
            os__.writeDouble(7, g);
            os__.writeString(8, h);
            if(i.HasValue)
            {
                os__.writeEnum(9, (int)i.Value, 1);
            }
            if(j.HasValue && os__.writeOpt(10, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.MultiOptionalPrxHelper.write__(os__, j.Value);
                os__.endSize();
            }
            os__.writeObject(11, k);
            os__.writeByteSeq(12, bs);
            os__.writeStringSeq(13, ss);
            if(iid.HasValue && os__.writeOpt(14, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(iid.Value == null ? 1 : iid.Value.Count * 8 + (iid.Value.Count > 254 ? 5 : 1));
                Test.IntIntDictHelper.write(os__, iid.Value);
            }
            if(sid.HasValue && os__.writeOpt(15, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.StringIntDictHelper.write(os__, sid.Value);
                os__.endSize();
            }
            if(fs.HasValue && os__.writeOpt(16, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(4);
                fs.Value.write__(os__);
            }
            if(vs.HasValue && os__.writeOpt(17, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                if(vs.Value == null)
                {
                    Test.VarStruct tmp__ = new Test.VarStruct();
                    tmp__.write__(os__);
                }
                else
                {
                    vs.Value.write__(os__);
                }
                os__.endSize();
            }
            os__.writeShortSeq(18, shs);
            if(es.HasValue && os__.writeOpt(19, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.MyEnumSeqHelper.write(os__, es.Value);
                os__.endSize();
            }
            if(fss.HasValue && os__.writeOpt(20, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(fss.Value == null ? 1 : fss.Value.Length * 4 + (fss.Value.Length > 254 ? 5 : 1));
                Test.FixedStructSeqHelper.write(os__, fss.Value);
            }
            if(vss.HasValue && os__.writeOpt(21, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.VarStructSeqHelper.write(os__, vss.Value);
                os__.endSize();
            }
            if(oos.HasValue && os__.writeOpt(22, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.OneOptionalSeqHelper.write(os__, oos.Value);
                os__.endSize();
            }
            if(oops.HasValue && os__.writeOpt(23, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.OneOptionalPrxSeqHelper.write(os__, oops.Value);
                os__.endSize();
            }
            if(ied.HasValue && os__.writeOpt(24, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.IntEnumDictHelper.write(os__, ied.Value);
                os__.endSize();
            }
            if(ifsd.HasValue && os__.writeOpt(25, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(ifsd.Value == null ? 1 : ifsd.Value.Count * 8 + (ifsd.Value.Count > 254 ? 5 : 1));
                Test.IntFixedStructDictHelper.write(os__, ifsd.Value);
            }
            if(ivsd.HasValue && os__.writeOpt(26, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.IntVarStructDictHelper.write(os__, ivsd.Value);
                os__.endSize();
            }
            if(iood.HasValue && os__.writeOpt(27, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.IntOneOptionalDictHelper.write(os__, iood.Value);
                os__.endSize();
            }
            if(ioopd.HasValue && os__.writeOpt(28, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.IntOneOptionalPrxDictHelper.write(os__, ioopd.Value);
                os__.endSize();
            }
            os__.writeBoolSeq(29, bos);
            os__.writeByteSeq(30, ser);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public sealed class Patcher__ : IceInternal.Patcher
        {
            internal Patcher__(string type, Ice.ObjectImpl instance) : base(type)
            {
                _instance = (MultiOptional)instance;
            }

            public override void patch(Ice.Object v)
            {
                try
                {
                    _instance.k = new Ice.Optional<Test.MultiOptional>((Test.MultiOptional)v);
                }
                catch(_System.InvalidCastException)
                {
                    IceInternal.Ex.throwUOE(type(), v.ice_id());
                }
            }

            private MultiOptional _instance;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            a = is__.readByte(1);
            b = is__.readBool(2);
            c = is__.readShort(3);
            d = is__.readInt(4);
            e = is__.readLong(5);
            f = is__.readFloat(6);
            g = is__.readDouble(7);
            h = is__.readString(8);
            if(is__.readOpt(9, Ice.OptionalFormat.Size))
            {
                Test.MyEnum tmpVal__;
                tmpVal__ = (Test.MyEnum)is__.readEnum(0);
                i = new Ice.Optional<Test.MyEnum>(tmpVal__);
            }
            else
            {
                i = new Ice.Optional<Test.MyEnum>();
            }
            if(is__.readOpt(10, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                Test.MultiOptionalPrx tmpVal__;
                tmpVal__ = Test.MultiOptionalPrxHelper.read__(is__);
                j = new Ice.Optional<Test.MultiOptionalPrx>(tmpVal__);
            }
            else
            {
                j = new Ice.Optional<Test.MultiOptionalPrx>();
            }
            is__.readObject(11, new Patcher__(Test.MultiOptional.ice_staticId(), this));
            if(is__.readOpt(12, Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal__;
                tmpVal__ = Test.ByteSeqHelper.read(is__);
                bs = new Ice.Optional<byte[]>(tmpVal__);
            }
            else
            {
                bs = new Ice.Optional<byte[]>();
            }
            if(is__.readOpt(13, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                string[] tmpVal__;
                tmpVal__ = Test.StringSeqHelper.read(is__);
                ss = new Ice.Optional<string[]>(tmpVal__);
            }
            else
            {
                ss = new Ice.Optional<string[]>();
            }
            if(is__.readOpt(14, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                _System.Collections.Generic.Dictionary<int, int> tmpVal__ = new _System.Collections.Generic.Dictionary<int, int>();
                tmpVal__ = Test.IntIntDictHelper.read(is__);
                iid = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>(tmpVal__);
            }
            else
            {
                iid = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
            }
            if(is__.readOpt(15, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                _System.Collections.Generic.Dictionary<string, int> tmpVal__ = new _System.Collections.Generic.Dictionary<string, int>();
                tmpVal__ = Test.StringIntDictHelper.read(is__);
                sid = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>(tmpVal__);
            }
            else
            {
                sid = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
            }
            if(is__.readOpt(16, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                Test.FixedStruct tmpVal__ = new Test.FixedStruct();
                tmpVal__.read__(is__);
                fs = new Ice.Optional<Test.FixedStruct>(tmpVal__);
            }
            else
            {
                fs = new Ice.Optional<Test.FixedStruct>();
            }
            if(is__.readOpt(17, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                Test.VarStruct tmpVal__ = null;
                if(tmpVal__ == null)
                {
                    tmpVal__ = new Test.VarStruct();
                }
                tmpVal__.read__(is__);
                vs = new Ice.Optional<Test.VarStruct>(tmpVal__);
            }
            else
            {
                vs = new Ice.Optional<Test.VarStruct>();
            }
            if(is__.readOpt(18, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                short[] tmpVal__;
                tmpVal__ = Test.ShortSeqHelper.read(is__);
                shs = new Ice.Optional<short[]>(tmpVal__);
            }
            else
            {
                shs = new Ice.Optional<short[]>();
            }
            if(is__.readOpt(19, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                Test.MyEnum[] tmpVal__;
                tmpVal__ = Test.MyEnumSeqHelper.read(is__);
                es = new Ice.Optional<Test.MyEnum[]>(tmpVal__);
            }
            else
            {
                es = new Ice.Optional<Test.MyEnum[]>();
            }
            if(is__.readOpt(20, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                Test.FixedStruct[] tmpVal__;
                tmpVal__ = Test.FixedStructSeqHelper.read(is__);
                fss = new Ice.Optional<Test.FixedStruct[]>(tmpVal__);
            }
            else
            {
                fss = new Ice.Optional<Test.FixedStruct[]>();
            }
            if(is__.readOpt(21, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                Test.VarStruct[] tmpVal__;
                tmpVal__ = Test.VarStructSeqHelper.read(is__);
                vss = new Ice.Optional<Test.VarStruct[]>(tmpVal__);
            }
            else
            {
                vss = new Ice.Optional<Test.VarStruct[]>();
            }
            if(is__.readOpt(22, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                Test.OneOptional[] tmpVal__;
                tmpVal__ = Test.OneOptionalSeqHelper.read(is__);
                oos = new Ice.Optional<Test.OneOptional[]>(tmpVal__);
            }
            else
            {
                oos = new Ice.Optional<Test.OneOptional[]>();
            }
            if(is__.readOpt(23, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                Test.OneOptionalPrx[] tmpVal__;
                tmpVal__ = Test.OneOptionalPrxSeqHelper.read(is__);
                oops = new Ice.Optional<Test.OneOptionalPrx[]>(tmpVal__);
            }
            else
            {
                oops = new Ice.Optional<Test.OneOptionalPrx[]>();
            }
            if(is__.readOpt(24, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                _System.Collections.Generic.Dictionary<int, Test.MyEnum> tmpVal__ = new _System.Collections.Generic.Dictionary<int, Test.MyEnum>();
                tmpVal__ = Test.IntEnumDictHelper.read(is__);
                ied = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.MyEnum>>(tmpVal__);
            }
            else
            {
                ied = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.MyEnum>>();
            }
            if(is__.readOpt(25, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                _System.Collections.Generic.Dictionary<int, Test.FixedStruct> tmpVal__ = new _System.Collections.Generic.Dictionary<int, Test.FixedStruct>();
                tmpVal__ = Test.IntFixedStructDictHelper.read(is__);
                ifsd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.FixedStruct>>(tmpVal__);
            }
            else
            {
                ifsd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.FixedStruct>>();
            }
            if(is__.readOpt(26, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                _System.Collections.Generic.Dictionary<int, Test.VarStruct> tmpVal__ = new _System.Collections.Generic.Dictionary<int, Test.VarStruct>();
                tmpVal__ = Test.IntVarStructDictHelper.read(is__);
                ivsd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.VarStruct>>(tmpVal__);
            }
            else
            {
                ivsd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.VarStruct>>();
            }
            if(is__.readOpt(27, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                _System.Collections.Generic.Dictionary<int, Test.OneOptional> tmpVal__ = new _System.Collections.Generic.Dictionary<int, Test.OneOptional>();
                tmpVal__ = Test.IntOneOptionalDictHelper.read(is__);
                iood = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptional>>(tmpVal__);
            }
            else
            {
                iood = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptional>>();
            }
            if(is__.readOpt(28, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx> tmpVal__ = new _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx>();
                tmpVal__ = Test.IntOneOptionalPrxDictHelper.read(is__);
                ioopd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx>>(tmpVal__);
            }
            else
            {
                ioopd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx>>();
            }
            if(is__.readOpt(29, Ice.OptionalFormat.VSize))
            {
                bool[] tmpVal__;
                tmpVal__ = Test.BoolSeqHelper.read(is__);
                bos = new Ice.Optional<bool[]>(tmpVal__);
            }
            else
            {
                bos = new Ice.Optional<bool[]>();
            }
            if(is__.readOpt(30, Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal__;
                tmpVal__ = Test.SerializableHelper.read(is__);
                ser = new Ice.Optional<byte[]>(tmpVal__);
            }
            else
            {
                ser = new Ice.Optional<byte[]>();
            }
            is__.endReadSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice(ice_staticId(), true);
            if(a.HasValue && outS__.writeOptional(1, Ice.OptionalFormat.F1))
            {
                outS__.writeByte(a.Value);
            }
            if(b.HasValue && outS__.writeOptional(2, Ice.OptionalFormat.F1))
            {
                outS__.writeBool(b.Value);
            }
            if(c.HasValue && outS__.writeOptional(3, Ice.OptionalFormat.F2))
            {
                outS__.writeShort(c.Value);
            }
            if(d.HasValue && outS__.writeOptional(4, Ice.OptionalFormat.F4))
            {
                outS__.writeInt(d.Value);
            }
            if(e.HasValue && outS__.writeOptional(5, Ice.OptionalFormat.F8))
            {
                outS__.writeLong(e.Value);
            }
            if(f.HasValue && outS__.writeOptional(6, Ice.OptionalFormat.F4))
            {
                outS__.writeFloat(f.Value);
            }
            if(g.HasValue && outS__.writeOptional(7, Ice.OptionalFormat.F8))
            {
                outS__.writeDouble(g.Value);
            }
            if(h.HasValue && outS__.writeOptional(8, Ice.OptionalFormat.VSize))
            {
                outS__.writeString(h.Value);
            }
            if(i.HasValue && outS__.writeOptional(9, Ice.OptionalFormat.Size))
            {
                if((int)i.Value < 0 || (int)i.Value > 0)
                {
                    throw new Ice.MarshalException("enumerator out of range");
                }
                outS__.writeEnum((int)i.Value, 0);
            }
            if(j.HasValue && outS__.writeOptional(10, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.MultiOptionalPrxHelper.write(outS__, j.Value);
                outS__.endSize();
            }
            if(k.HasValue && outS__.writeOptional(11, Ice.OptionalFormat.Size))
            {
                outS__.writeObject(k.Value);
            }
            if(bs.HasValue && outS__.writeOptional(12, Ice.OptionalFormat.VSize))
            {
                Test.ByteSeqHelper.write(outS__, bs.Value);
            }
            if(ss.HasValue && outS__.writeOptional(13, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.StringSeqHelper.write(outS__, ss.Value);
                outS__.endSize();
            }
            if(iid.HasValue && outS__.writeOptional(14, Ice.OptionalFormat.VSize))
            {
                outS__.writeSize(iid.Value == null ? 1 : iid.Value.Count * 8 + (iid.Value.Count > 254 ? 5 : 1));
                Test.IntIntDictHelper.write(outS__, iid.Value);
            }
            if(sid.HasValue && outS__.writeOptional(15, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.StringIntDictHelper.write(outS__, sid.Value);
                outS__.endSize();
            }
            if(fs.HasValue && outS__.writeOptional(16, Ice.OptionalFormat.VSize))
            {
                outS__.writeSize(4);
                fs.Value.ice_write(outS__);
            }
            if(vs.HasValue && outS__.writeOptional(17, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                if(vs.Value == null)
                {
                    Test.VarStruct tmp__ = new Test.VarStruct();
                    tmp__.ice_write(outS__);
                }
                else
                {
                    vs.Value.ice_write(outS__);
                }
                outS__.endSize();
            }
            if(shs.HasValue && outS__.writeOptional(18, Ice.OptionalFormat.VSize))
            {
                outS__.writeSize(shs.Value == null ? 1 : shs.Value.Length * 2 + (shs.Value.Length > 254 ? 5 : 1));
                Test.ShortSeqHelper.write(outS__, shs.Value);
            }
            if(es.HasValue && outS__.writeOptional(19, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.MyEnumSeqHelper.write(outS__, es.Value);
                outS__.endSize();
            }
            if(fss.HasValue && outS__.writeOptional(20, Ice.OptionalFormat.VSize))
            {
                outS__.writeSize(fss.Value == null ? 1 : fss.Value.Length * 4 + (fss.Value.Length > 254 ? 5 : 1));
                Test.FixedStructSeqHelper.write(outS__, fss.Value);
            }
            if(vss.HasValue && outS__.writeOptional(21, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.VarStructSeqHelper.write(outS__, vss.Value);
                outS__.endSize();
            }
            if(oos.HasValue && outS__.writeOptional(22, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.OneOptionalSeqHelper.write(outS__, oos.Value);
                outS__.endSize();
            }
            if(oops.HasValue && outS__.writeOptional(23, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.OneOptionalPrxSeqHelper.write(outS__, oops.Value);
                outS__.endSize();
            }
            if(ied.HasValue && outS__.writeOptional(24, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.IntEnumDictHelper.write(outS__, ied.Value);
                outS__.endSize();
            }
            if(ifsd.HasValue && outS__.writeOptional(25, Ice.OptionalFormat.VSize))
            {
                outS__.writeSize(ifsd.Value == null ? 1 : ifsd.Value.Count * 8 + (ifsd.Value.Count > 254 ? 5 : 1));
                Test.IntFixedStructDictHelper.write(outS__, ifsd.Value);
            }
            if(ivsd.HasValue && outS__.writeOptional(26, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.IntVarStructDictHelper.write(outS__, ivsd.Value);
                outS__.endSize();
            }
            if(iood.HasValue && outS__.writeOptional(27, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.IntOneOptionalDictHelper.write(outS__, iood.Value);
                outS__.endSize();
            }
            if(ioopd.HasValue && outS__.writeOptional(28, Ice.OptionalFormat.FSize))
            {
                outS__.startSize();
                Test.IntOneOptionalPrxDictHelper.write(outS__, ioopd.Value);
                outS__.endSize();
            }
            if(bos.HasValue && outS__.writeOptional(29, Ice.OptionalFormat.VSize))
            {
                Test.BoolSeqHelper.write(outS__, bos.Value);
            }
            if(ser.HasValue && outS__.writeOptional(30, Ice.OptionalFormat.VSize))
            {
                Test.SerializableHelper.write(outS__, ser.Value);
            }
            outS__.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            if(inS__.readOptional(1, Ice.OptionalFormat.F1))
            {
                byte tmpValue__;
                tmpValue__ = inS__.readByte();
                a = new Ice.Optional<byte>(tmpValue__);
            }
            if(inS__.readOptional(2, Ice.OptionalFormat.F1))
            {
                bool tmpValue__;
                tmpValue__ = inS__.readBool();
                b = new Ice.Optional<bool>(tmpValue__);
            }
            if(inS__.readOptional(3, Ice.OptionalFormat.F2))
            {
                short tmpValue__;
                tmpValue__ = inS__.readShort();
                c = new Ice.Optional<short>(tmpValue__);
            }
            if(inS__.readOptional(4, Ice.OptionalFormat.F4))
            {
                int tmpValue__;
                tmpValue__ = inS__.readInt();
                d = new Ice.Optional<int>(tmpValue__);
            }
            if(inS__.readOptional(5, Ice.OptionalFormat.F8))
            {
                long tmpValue__;
                tmpValue__ = inS__.readLong();
                e = new Ice.Optional<long>(tmpValue__);
            }
            if(inS__.readOptional(6, Ice.OptionalFormat.F4))
            {
                float tmpValue__;
                tmpValue__ = inS__.readFloat();
                f = new Ice.Optional<float>(tmpValue__);
            }
            if(inS__.readOptional(7, Ice.OptionalFormat.F8))
            {
                double tmpValue__;
                tmpValue__ = inS__.readDouble();
                g = new Ice.Optional<double>(tmpValue__);
            }
            if(inS__.readOptional(8, Ice.OptionalFormat.VSize))
            {
                string tmpValue__;
                tmpValue__ = inS__.readString();
                h = new Ice.Optional<string>(tmpValue__);
            }
            if(inS__.readOptional(9, Ice.OptionalFormat.Size))
            {
                Test.MyEnum tmpValue__;
                tmpValue__ = (Test.MyEnum)inS__.readEnum(0);
                if((int)tmpValue__ < 0 || (int)tmpValue__ > 0)
                {
                    throw new Ice.MarshalException("enumerator out of range");
                }
                i = new Ice.Optional<Test.MyEnum>(tmpValue__);
            }
            if(inS__.readOptional(10, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                Test.MultiOptionalPrx tmpValue__;
                tmpValue__ = Test.MultiOptionalPrxHelper.read(inS__);
                j = new Ice.Optional<Test.MultiOptionalPrx>(tmpValue__);
            }
            if(inS__.readOptional(11, Ice.OptionalFormat.Size))
            {
                inS__.readObject(new Patcher__(Test.MultiOptional.ice_staticId(), this));
            }
            if(inS__.readOptional(12, Ice.OptionalFormat.VSize))
            {
                byte[] tmpValue__;
                tmpValue__ = Test.ByteSeqHelper.read(inS__);
                bs = new Ice.Optional<byte[]>(tmpValue__);
            }
            if(inS__.readOptional(13, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                string[] tmpValue__;
                tmpValue__ = Test.StringSeqHelper.read(inS__);
                ss = new Ice.Optional<string[]>(tmpValue__);
            }
            if(inS__.readOptional(14, Ice.OptionalFormat.VSize))
            {
                inS__.skipSize();
                _System.Collections.Generic.Dictionary<int, int> tmpValue__;
                tmpValue__ = Test.IntIntDictHelper.read(inS__);
                iid = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>(tmpValue__);
            }
            if(inS__.readOptional(15, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                _System.Collections.Generic.Dictionary<string, int> tmpValue__;
                tmpValue__ = Test.StringIntDictHelper.read(inS__);
                sid = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>(tmpValue__);
            }
            if(inS__.readOptional(16, Ice.OptionalFormat.VSize))
            {
                inS__.skipSize();
                Test.FixedStruct tmpValue__ = new Test.FixedStruct();
                tmpValue__.ice_read(inS__);
                fs = new Ice.Optional<Test.FixedStruct>(tmpValue__);
            }
            if(inS__.readOptional(17, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                Test.VarStruct tmpValue__ = null;
                if(tmpValue__ == null)
                {
                    tmpValue__ = new Test.VarStruct();
                }
                tmpValue__.ice_read(inS__);
                vs = new Ice.Optional<Test.VarStruct>(tmpValue__);
            }
            if(inS__.readOptional(18, Ice.OptionalFormat.VSize))
            {
                inS__.skipSize();
                short[] tmpValue__;
                tmpValue__ = Test.ShortSeqHelper.read(inS__);
                shs = new Ice.Optional<short[]>(tmpValue__);
            }
            if(inS__.readOptional(19, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                Test.MyEnum[] tmpValue__;
                tmpValue__ = Test.MyEnumSeqHelper.read(inS__);
                es = new Ice.Optional<Test.MyEnum[]>(tmpValue__);
            }
            if(inS__.readOptional(20, Ice.OptionalFormat.VSize))
            {
                inS__.skipSize();
                Test.FixedStruct[] tmpValue__;
                tmpValue__ = Test.FixedStructSeqHelper.read(inS__);
                fss = new Ice.Optional<Test.FixedStruct[]>(tmpValue__);
            }
            if(inS__.readOptional(21, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                Test.VarStruct[] tmpValue__;
                tmpValue__ = Test.VarStructSeqHelper.read(inS__);
                vss = new Ice.Optional<Test.VarStruct[]>(tmpValue__);
            }
            if(inS__.readOptional(22, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                Test.OneOptional[] tmpValue__;
                tmpValue__ = Test.OneOptionalSeqHelper.read(inS__);
                oos = new Ice.Optional<Test.OneOptional[]>(tmpValue__);
            }
            if(inS__.readOptional(23, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                Test.OneOptionalPrx[] tmpValue__;
                tmpValue__ = Test.OneOptionalPrxSeqHelper.read(inS__);
                oops = new Ice.Optional<Test.OneOptionalPrx[]>(tmpValue__);
            }
            if(inS__.readOptional(24, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                _System.Collections.Generic.Dictionary<int, Test.MyEnum> tmpValue__;
                tmpValue__ = Test.IntEnumDictHelper.read(inS__);
                ied = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.MyEnum>>(tmpValue__);
            }
            if(inS__.readOptional(25, Ice.OptionalFormat.VSize))
            {
                inS__.skipSize();
                _System.Collections.Generic.Dictionary<int, Test.FixedStruct> tmpValue__;
                tmpValue__ = Test.IntFixedStructDictHelper.read(inS__);
                ifsd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.FixedStruct>>(tmpValue__);
            }
            if(inS__.readOptional(26, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                _System.Collections.Generic.Dictionary<int, Test.VarStruct> tmpValue__;
                tmpValue__ = Test.IntVarStructDictHelper.read(inS__);
                ivsd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.VarStruct>>(tmpValue__);
            }
            if(inS__.readOptional(27, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                _System.Collections.Generic.Dictionary<int, Test.OneOptional> tmpValue__;
                tmpValue__ = Test.IntOneOptionalDictHelper.read(inS__);
                iood = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptional>>(tmpValue__);
            }
            if(inS__.readOptional(28, Ice.OptionalFormat.FSize))
            {
                inS__.skip(4);
                _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx> tmpValue__;
                tmpValue__ = Test.IntOneOptionalPrxDictHelper.read(inS__);
                ioopd = new Ice.Optional<_System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx>>(tmpValue__);
            }
            if(inS__.readOptional(29, Ice.OptionalFormat.VSize))
            {
                bool[] tmpValue__;
                tmpValue__ = Test.BoolSeqHelper.read(inS__);
                bos = new Ice.Optional<bool[]>(tmpValue__);
            }
            if(inS__.readOptional(30, Ice.OptionalFormat.VSize))
            {
                byte[] tmpValue__;
                tmpValue__ = Test.SerializableHelper.read(inS__);
                ser = new Ice.Optional<byte[]>(tmpValue__);
            }
            inS__.endSlice();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class AHelper
    {
        public AHelper(Ice.InputStream inS__)
        {
            _in = inS__;
            _pp = new IceInternal.ParamPatcher<Test.A>("::Test::A");
        }

        public static void write(Ice.OutputStream outS__, A v__)
        {
            outS__.writeObject(v__);
        }

        public void read()
        {
            _in.readObject(_pp);
        }

        public Test.A value
        {
            get
            {
                return (Test.A)_pp.value;
            }
        }

        private Ice.InputStream _in;
        private IceInternal.ParamPatcher<Test.A> _pp;
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class A : Ice.ObjectImpl
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public int requiredA;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int> ma;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int> mb;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int> mc;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public A()
        {
            this.ma = new Ice.Optional<int>();
            this.mb = new Ice.Optional<int>();
            this.mc = new Ice.Optional<int>();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public A(int requiredA, Ice.Optional<int> ma, Ice.Optional<int> mb, Ice.Optional<int> mc)
        {
            this.requiredA = requiredA;
            this.ma = ma;
            this.mb = mb;
            this.mc = mc;
        }

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Test::A"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id()
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), true);
            os__.writeInt(requiredA);
            os__.writeInt(1, ma);
            os__.writeInt(50, mb);
            os__.writeInt(500, mc);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            requiredA = is__.readInt();
            ma = is__.readInt(1);
            mb = is__.readInt(50);
            mc = is__.readInt(500);
            is__.endReadSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice(ice_staticId(), true);
            outS__.writeInt(requiredA);
            if(ma.HasValue && outS__.writeOptional(1, Ice.OptionalFormat.F4))
            {
                outS__.writeInt(ma.Value);
            }
            if(mb.HasValue && outS__.writeOptional(50, Ice.OptionalFormat.F4))
            {
                outS__.writeInt(mb.Value);
            }
            if(mc.HasValue && outS__.writeOptional(500, Ice.OptionalFormat.F4))
            {
                outS__.writeInt(mc.Value);
            }
            outS__.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            requiredA = inS__.readInt();
            if(inS__.readOptional(1, Ice.OptionalFormat.F4))
            {
                int tmpValue__;
                tmpValue__ = inS__.readInt();
                ma = new Ice.Optional<int>(tmpValue__);
            }
            if(inS__.readOptional(50, Ice.OptionalFormat.F4))
            {
                int tmpValue__;
                tmpValue__ = inS__.readInt();
                mb = new Ice.Optional<int>(tmpValue__);
            }
            if(inS__.readOptional(500, Ice.OptionalFormat.F4))
            {
                int tmpValue__;
                tmpValue__ = inS__.readInt();
                mc = new Ice.Optional<int>(tmpValue__);
            }
            inS__.endSlice();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class BHelper
    {
        public BHelper(Ice.InputStream inS__)
        {
            _in = inS__;
            _pp = new IceInternal.ParamPatcher<Test.B>("::Test::B");
        }

        public static void write(Ice.OutputStream outS__, B v__)
        {
            outS__.writeObject(v__);
        }

        public void read()
        {
            _in.readObject(_pp);
        }

        public Test.B value
        {
            get
            {
                return (Test.B)_pp.value;
            }
        }

        private Ice.InputStream _in;
        private IceInternal.ParamPatcher<Test.B> _pp;
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class B : Test.A
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public int requiredB;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int> md;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public B() : base()
        {
            this.md = new Ice.Optional<int>();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public B(int requiredA, Ice.Optional<int> ma, Ice.Optional<int> mb, Ice.Optional<int> mc, int requiredB, Ice.Optional<int> md) : base(requiredA, ma, mb, mc)
        {
            this.requiredB = requiredB;
            this.md = md;
        }

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Test::A",
            "::Test::B"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id()
        {
            return ids__[2];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[2];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new string ice_staticId()
        {
            return ids__[2];
        }

        #endregion

        #region Operation dispatch

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override void write__(IceInternal.BasicStream os__)
        {
            os__.startWriteObject(slicedData__);
            writeImpl__(os__);
            os__.endWriteObject();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override void read__(IceInternal.BasicStream is__)
        {
            is__.startReadObject();
            readImpl__(is__);
            slicedData__ = is__.endReadObject(true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override void write__(Ice.OutputStream outS__)
        {
            outS__.startObject(slicedData__);
            writeImpl__(outS__);
            outS__.endObject();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override void read__(Ice.InputStream inS__)
        {
            inS__.startObject();
            readImpl__(inS__);
            slicedData__ = inS__.endObject(true);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), false);
            os__.writeInt(requiredB);
            os__.writeInt(10, md);
            os__.endWriteSlice();
            base.writeImpl__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            requiredB = is__.readInt();
            md = is__.readInt(10);
            is__.endReadSlice();
            base.readImpl__(is__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice(ice_staticId(), false);
            outS__.writeInt(requiredB);
            if(md.HasValue && outS__.writeOptional(10, Ice.OptionalFormat.F4))
            {
                outS__.writeInt(md.Value);
            }
            outS__.endSlice();
            base.writeImpl__(outS__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            requiredB = inS__.readInt();
            if(inS__.readOptional(10, Ice.OptionalFormat.F4))
            {
                int tmpValue__;
                tmpValue__ = inS__.readInt();
                md = new Ice.Optional<int>(tmpValue__);
            }
            inS__.endSlice();
            base.readImpl__(inS__);
        }

        protected Ice.SlicedData slicedData__;

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class CHelper
    {
        public CHelper(Ice.InputStream inS__)
        {
            _in = inS__;
            _pp = new IceInternal.ParamPatcher<Test.C>("::Test::C");
        }

        public static void write(Ice.OutputStream outS__, C v__)
        {
            outS__.writeObject(v__);
        }

        public void read()
        {
            _in.readObject(_pp);
        }

        public Test.C value
        {
            get
            {
                return (Test.C)_pp.value;
            }
        }

        private Ice.InputStream _in;
        private IceInternal.ParamPatcher<Test.C> _pp;
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class C : Test.B
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public string ss;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<string> ms;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public C() : base()
        {
            this.ms = new Ice.Optional<string>();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public C(int requiredA, Ice.Optional<int> ma, Ice.Optional<int> mb, Ice.Optional<int> mc, int requiredB, Ice.Optional<int> md, string ss, Ice.Optional<string> ms) : base(requiredA, ma, mb, mc, requiredB, md)
        {
            this.ss = ss;
            this.ms = ms;
        }

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Test::A",
            "::Test::B",
            "::Test::C"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id()
        {
            return ids__[3];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[3];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new string ice_staticId()
        {
            return ids__[3];
        }

        #endregion

        #region Operation dispatch

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), false);
            os__.writeString(ss);
            os__.writeString(890, ms);
            os__.endWriteSlice();
            base.writeImpl__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            ss = is__.readString();
            ms = is__.readString(890);
            is__.endReadSlice();
            base.readImpl__(is__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice(ice_staticId(), false);
            outS__.writeString(ss);
            if(ms.HasValue && outS__.writeOptional(890, Ice.OptionalFormat.VSize))
            {
                outS__.writeString(ms.Value);
            }
            outS__.endSlice();
            base.writeImpl__(outS__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            ss = inS__.readString();
            if(inS__.readOptional(890, Ice.OptionalFormat.VSize))
            {
                string tmpValue__;
                tmpValue__ = inS__.readString();
                ms = new Ice.Optional<string>(tmpValue__);
            }
            inS__.endSlice();
            base.readImpl__(inS__);
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class WDHelper
    {
        public WDHelper(Ice.InputStream inS__)
        {
            _in = inS__;
            _pp = new IceInternal.ParamPatcher<Test.WD>("::Test::WD");
        }

        public static void write(Ice.OutputStream outS__, WD v__)
        {
            outS__.writeObject(v__);
        }

        public void read()
        {
            _in.readObject(_pp);
        }

        public Test.WD value
        {
            get
            {
                return (Test.WD)_pp.value;
            }
        }

        private Ice.InputStream _in;
        private IceInternal.ParamPatcher<Test.WD> _pp;
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class WD : Ice.ObjectImpl
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int> a;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<string> s;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public WD()
        {
            this.a = 5;
            this.s = "test";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public WD(Ice.Optional<int> a, Ice.Optional<string> s)
        {
            this.a = a;
            this.s = s;
        }

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Test::WD"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id()
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), true);
            os__.writeInt(1, a);
            os__.writeString(2, s);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            a = is__.readInt(1);
            s = is__.readString(2);
            is__.endReadSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice(ice_staticId(), true);
            if(a.HasValue && outS__.writeOptional(1, Ice.OptionalFormat.F4))
            {
                outS__.writeInt(a.Value);
            }
            if(s.HasValue && outS__.writeOptional(2, Ice.OptionalFormat.VSize))
            {
                outS__.writeString(s.Value);
            }
            outS__.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            if(inS__.readOptional(1, Ice.OptionalFormat.F4))
            {
                int tmpValue__;
                tmpValue__ = inS__.readInt();
                a = new Ice.Optional<int>(tmpValue__);
            }
            if(inS__.readOptional(2, Ice.OptionalFormat.VSize))
            {
                string tmpValue__;
                tmpValue__ = inS__.readString();
                s = new Ice.Optional<string>(tmpValue__);
            }
            inS__.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class OptionalException : Ice.UserException
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public bool req;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int> a;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<string> b;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.OneOptional> o;

        #endregion

        #region Constructors

        private void initDM__()
        {
            this.req = false;
            this.a = 5;
            this.b = new Ice.Optional<string>();
            this.o = new Ice.Optional<Test.OneOptional>();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public OptionalException()
        {
            initDM__();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public OptionalException(_System.Exception ex__) : base(ex__)
        {
            initDM__();
        }

        private void initDM__(bool req, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            this.req = req;
            this.a = a;
            this.b = b;
            this.o = o;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public OptionalException(bool req, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            initDM__(req, a, b, o);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public OptionalException(bool req, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Exception ex__) : base(ex__)
        {
            initDM__(req, a, b, o);
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_name()
        {
            return "Test::OptionalException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::Test::OptionalException");
            IceInternal.HashUtil.hashAdd(ref h__, req);
            IceInternal.HashUtil.hashAdd(ref h__, a.Value);
            IceInternal.HashUtil.hashAdd(ref h__, b.Value);
            IceInternal.HashUtil.hashAdd(ref h__, o.Value);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            OptionalException o__ = other__ as OptionalException;
            if(o__ == null)
            {
                return false;
            }
            if(!req.Equals(o__.req))
            {
                return false;
            }
            if(!a.Equals(o__.a))
            {
                return false;
            }
            if(!b.Equals(o__.b))
            {
                return false;
            }
            if(!o.Equals(o__.o))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator==(OptionalException lhs__, OptionalException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator!=(OptionalException lhs__, OptionalException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::Test::OptionalException", true);
            os__.writeBool(req);
            os__.writeInt(1, a);
            os__.writeString(2, b);
            os__.writeObject(50, o);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public sealed class Patcher__ : IceInternal.Patcher
        {
            internal Patcher__(string type, Ice.Exception instance) : base(type)
            {
                _instance = (OptionalException)instance;
            }

            public override void patch(Ice.Object v)
            {
                try
                {
                    _instance.o = new Ice.Optional<Test.OneOptional>((Test.OneOptional)v);
                }
                catch(_System.InvalidCastException)
                {
                    IceInternal.Ex.throwUOE(type(), v.ice_id());
                }
            }

            private OptionalException _instance;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            req = is__.readBool();
            a = is__.readInt(1);
            b = is__.readString(2);
            is__.readObject(50, new Patcher__(Test.OneOptional.ice_staticId(), this));
            is__.endReadSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice("::Test::OptionalException", true);
            outS__.writeBool(req);
            if(a.HasValue && outS__.writeOptional(1, Ice.OptionalFormat.F4))
            {
                outS__.writeInt(a.Value);
            }
            if(b.HasValue && outS__.writeOptional(2, Ice.OptionalFormat.VSize))
            {
                outS__.writeString(b.Value);
            }
            if(o.HasValue && outS__.writeOptional(50, Ice.OptionalFormat.Size))
            {
                outS__.writeObject(o.Value);
            }
            outS__.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            req = inS__.readBool();
            if(inS__.readOptional(1, Ice.OptionalFormat.F4))
            {
                int tmpValue__;
                tmpValue__ = inS__.readInt();
                a = new Ice.Optional<int>(tmpValue__);
            }
            if(inS__.readOptional(2, Ice.OptionalFormat.VSize))
            {
                string tmpValue__;
                tmpValue__ = inS__.readString();
                b = new Ice.Optional<string>(tmpValue__);
            }
            if(inS__.readOptional(50, Ice.OptionalFormat.Size))
            {
                inS__.readObject(new Patcher__(Test.OneOptional.ice_staticId(), this));
            }
            inS__.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class DerivedException : Test.OptionalException
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<string> ss;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.OneOptional> o2;

        #endregion

        #region Constructors

        private void initDM__()
        {
            this.ss = "test";
            this.o2 = new Ice.Optional<Test.OneOptional>();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public DerivedException()
        {
            initDM__();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public DerivedException(_System.Exception ex__) : base(ex__)
        {
            initDM__();
        }

        private void initDM__(Ice.Optional<string> ss, Ice.Optional<Test.OneOptional> o2)
        {
            this.ss = ss;
            this.o2 = o2;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public DerivedException(bool req, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.Optional<string> ss, Ice.Optional<Test.OneOptional> o2) : base(req, a, b, o)
        {
            initDM__(ss, o2);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public DerivedException(bool req, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.Optional<string> ss, Ice.Optional<Test.OneOptional> o2, _System.Exception ex__) : base(req, a, b, o, ex__)
        {
            initDM__(ss, o2);
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_name()
        {
            return "Test::DerivedException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            IceInternal.HashUtil.hashAdd(ref h__, "::Test::DerivedException");
            IceInternal.HashUtil.hashAdd(ref h__, ss.Value);
            IceInternal.HashUtil.hashAdd(ref h__, o2.Value);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            DerivedException o__ = other__ as DerivedException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            if(!ss.Equals(o__.ss))
            {
                return false;
            }
            if(!o2.Equals(o__.o2))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator==(DerivedException lhs__, DerivedException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator!=(DerivedException lhs__, DerivedException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::Test::DerivedException", false);
            os__.writeString(600, ss);
            os__.writeObject(601, o2);
            os__.endWriteSlice();
            base.writeImpl__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public sealed new class Patcher__ : IceInternal.Patcher
        {
            internal Patcher__(string type, Ice.Exception instance, int member) : base(type)
            {
                _instance = (DerivedException)instance;
                _member = member;
            }

            public override void patch(Ice.Object v)
            {
                try
                {
                    switch(_member)
                    {
                    case 0:
                        _instance.o = new Ice.Optional<Test.OneOptional>((Test.OneOptional)v);
                        break;
                    case 1:
                        _instance.o2 = new Ice.Optional<Test.OneOptional>((Test.OneOptional)v);
                        break;
                    }
                }
                catch(_System.InvalidCastException)
                {
                    IceInternal.Ex.throwUOE(type(), v.ice_id());
                }
            }

            private DerivedException _instance;
            private int _member;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            ss = is__.readString(600);
            is__.readObject(601, new Patcher__(Test.OneOptional.ice_staticId(), this, 1));
            is__.endReadSlice();
            base.readImpl__(is__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice("::Test::DerivedException", false);
            if(ss.HasValue && outS__.writeOptional(600, Ice.OptionalFormat.VSize))
            {
                outS__.writeString(ss.Value);
            }
            if(o2.HasValue && outS__.writeOptional(601, Ice.OptionalFormat.Size))
            {
                outS__.writeObject(o2.Value);
            }
            outS__.endSlice();
            base.writeImpl__(outS__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            if(inS__.readOptional(600, Ice.OptionalFormat.VSize))
            {
                string tmpValue__;
                tmpValue__ = inS__.readString();
                ss = new Ice.Optional<string>(tmpValue__);
            }
            if(inS__.readOptional(601, Ice.OptionalFormat.Size))
            {
                inS__.readObject(new Patcher__(Test.OneOptional.ice_staticId(), this, 1));
            }
            inS__.endSlice();
            base.readImpl__(inS__);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class RequiredException : Test.OptionalException
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public string ss;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Test.OneOptional o2;

        #endregion

        #region Constructors

        private void initDM__()
        {
            this.ss = "test";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public RequiredException()
        {
            initDM__();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public RequiredException(_System.Exception ex__) : base(ex__)
        {
            initDM__();
        }

        private void initDM__(string ss, Test.OneOptional o2)
        {
            this.ss = ss;
            this.o2 = o2;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public RequiredException(bool req, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, string ss, Test.OneOptional o2) : base(req, a, b, o)
        {
            initDM__(ss, o2);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public RequiredException(bool req, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, string ss, Test.OneOptional o2, _System.Exception ex__) : base(req, a, b, o, ex__)
        {
            initDM__(ss, o2);
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_name()
        {
            return "Test::RequiredException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override int GetHashCode()
        {
            int h__ = base.GetHashCode();
            IceInternal.HashUtil.hashAdd(ref h__, "::Test::RequiredException");
            IceInternal.HashUtil.hashAdd(ref h__, ss);
            IceInternal.HashUtil.hashAdd(ref h__, o2);
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            RequiredException o__ = other__ as RequiredException;
            if(o__ == null)
            {
                return false;
            }
            if(!base.Equals(other__))
            {
                return false;
            }
            if(ss == null)
            {
                if(o__.ss != null)
                {
                    return false;
                }
            }
            else
            {
                if(!ss.Equals(o__.ss))
                {
                    return false;
                }
            }
            if(o2 == null)
            {
                if(o__.o2 != null)
                {
                    return false;
                }
            }
            else
            {
                if(!o2.Equals(o__.o2))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator==(RequiredException lhs__, RequiredException rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static bool operator!=(RequiredException lhs__, RequiredException rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::Test::RequiredException", false);
            os__.writeString(ss);
            os__.writeObject(o2);
            os__.endWriteSlice();
            base.writeImpl__(os__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public sealed new class Patcher__ : IceInternal.Patcher
        {
            internal Patcher__(string type, Ice.Exception instance, int member) : base(type)
            {
                _instance = (RequiredException)instance;
                _member = member;
            }

            public override void patch(Ice.Object v)
            {
                try
                {
                    switch(_member)
                    {
                    case 0:
                        _instance.o = new Ice.Optional<Test.OneOptional>((Test.OneOptional)v);
                        break;
                    case 1:
                        _instance.o2 = (Test.OneOptional)v;
                        break;
                    }
                }
                catch(_System.InvalidCastException)
                {
                    IceInternal.Ex.throwUOE(type(), v.ice_id());
                }
            }

            private RequiredException _instance;
            private int _member;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            ss = is__.readString();
            is__.readObject(new Patcher__(Test.OneOptional.ice_staticId(), this, 1));
            is__.endReadSlice();
            base.readImpl__(is__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice("::Test::RequiredException", false);
            outS__.writeString(ss);
            outS__.writeObject(o2);
            outS__.endSlice();
            base.writeImpl__(outS__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            ss = inS__.readString();
            inS__.readObject(new Patcher__(Test.OneOptional.ice_staticId(), this, 1));
            inS__.endSlice();
            base.readImpl__(inS__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool usesClasses__()
        {
            return true;
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OptionalWithCustomHelper
    {
        public OptionalWithCustomHelper(Ice.InputStream inS__)
        {
            _in = inS__;
            _pp = new IceInternal.ParamPatcher<Test.OptionalWithCustom>("::Test::OptionalWithCustom");
        }

        public static void write(Ice.OutputStream outS__, OptionalWithCustom v__)
        {
            outS__.writeObject(v__);
        }

        public void read()
        {
            _in.readObject(_pp);
        }

        public Test.OptionalWithCustom value
        {
            get
            {
                return (Test.OptionalWithCustom)_pp.value;
            }
        }

        private Ice.InputStream _in;
        private IceInternal.ParamPatcher<Test.OptionalWithCustom> _pp;
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class OptionalWithCustom : Ice.ObjectImpl
    {
        #region Slice data members

        private Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> l__prop;
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public virtual Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> l
        {
            get
            {
                return l__prop;
            }
            set
            {
                l__prop = value;
            }
        }

        private Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> lp__prop;
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected virtual Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> lp
        {
            get
            {
                return lp__prop;
            }
            set
            {
                lp__prop = value;
            }
        }

        private Ice.Optional<Test.ClassVarStruct> s__prop;
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public virtual Ice.Optional<Test.ClassVarStruct> s
        {
            get
            {
                return s__prop;
            }
            set
            {
                s__prop = value;
            }
        }

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public OptionalWithCustom()
        {
            this.l = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
            this.lp = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
            this.s = new Ice.Optional<Test.ClassVarStruct>();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public OptionalWithCustom(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> l, Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> lp, Ice.Optional<Test.ClassVarStruct> s)
        {
            this.l__prop = l;
            this.lp__prop = lp;
            this.s__prop = s;
        }

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Test::OptionalWithCustom"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id()
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), true);
            if(l__prop.HasValue && os__.writeOpt(1, Ice.OptionalFormat.VSize))
            {
                Test.SmallStructListHelper.write(os__, l__prop.Value);
            }
            if(lp__prop.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
            {
                Test.SmallStructListHelper.write(os__, lp__prop.Value);
            }
            if(s__prop.HasValue && os__.writeOpt(3, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(4);
                if(s__prop.Value == null)
                {
                    Test.ClassVarStruct tmp__ = new Test.ClassVarStruct();
                    tmp__.write__(os__);
                }
                else
                {
                    s__prop.Value.write__(os__);
                }
            }
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            if(is__.readOpt(1, Ice.OptionalFormat.VSize))
            {
                _System.Collections.Generic.List<Test.SmallStruct> tmpVal__;
                tmpVal__ = Test.SmallStructListHelper.read(is__);
                l__prop = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>(tmpVal__);
            }
            else
            {
                l__prop = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
            }
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                _System.Collections.Generic.List<Test.SmallStruct> tmpVal__;
                tmpVal__ = Test.SmallStructListHelper.read(is__);
                lp__prop = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>(tmpVal__);
            }
            else
            {
                lp__prop = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
            }
            if(is__.readOpt(3, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                Test.ClassVarStruct tmpVal__ = null;
                if(tmpVal__ == null)
                {
                    tmpVal__ = new Test.ClassVarStruct();
                }
                tmpVal__.read__(is__);
                s__prop = new Ice.Optional<Test.ClassVarStruct>(tmpVal__);
            }
            else
            {
                s__prop = new Ice.Optional<Test.ClassVarStruct>();
            }
            is__.endReadSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice(ice_staticId(), true);
            if(l__prop.HasValue && outS__.writeOptional(1, Ice.OptionalFormat.VSize))
            {
                outS__.writeSize(l__prop.Value == null ? 1 : l__prop.Value.Count * 1 + (l__prop.Value.Count > 254 ? 5 : 1));
                Test.SmallStructListHelper.write(outS__, l__prop.Value);
            }
            if(lp__prop.HasValue && outS__.writeOptional(2, Ice.OptionalFormat.VSize))
            {
                outS__.writeSize(lp__prop.Value == null ? 1 : lp__prop.Value.Count * 1 + (lp__prop.Value.Count > 254 ? 5 : 1));
                Test.SmallStructListHelper.write(outS__, lp__prop.Value);
            }
            if(s__prop.HasValue && outS__.writeOptional(3, Ice.OptionalFormat.VSize))
            {
                outS__.writeSize(4);
                if(s__prop.Value == null)
                {
                    Test.ClassVarStruct tmp__ = new Test.ClassVarStruct();
                    tmp__.ice_write(outS__);
                }
                else
                {
                    s__prop.Value.ice_write(outS__);
                }
            }
            outS__.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            if(inS__.readOptional(1, Ice.OptionalFormat.VSize))
            {
                inS__.skipSize();
                _System.Collections.Generic.List<Test.SmallStruct> tmpValue__;
                tmpValue__ = Test.SmallStructListHelper.read(inS__);
                l__prop = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>(tmpValue__);
            }
            if(inS__.readOptional(2, Ice.OptionalFormat.VSize))
            {
                inS__.skipSize();
                _System.Collections.Generic.List<Test.SmallStruct> tmpValue__;
                tmpValue__ = Test.SmallStructListHelper.read(inS__);
                lp__prop = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>(tmpValue__);
            }
            if(inS__.readOptional(3, Ice.OptionalFormat.VSize))
            {
                inS__.skipSize();
                Test.ClassVarStruct tmpValue__ = null;
                if(tmpValue__ == null)
                {
                    tmpValue__ = new Test.ClassVarStruct();
                }
                tmpValue__.ice_read(inS__);
                s__prop = new Ice.Optional<Test.ClassVarStruct>(tmpValue__);
            }
            inS__.endSlice();
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class InitialHelper
    {
        public InitialHelper(Ice.InputStream inS__)
        {
            _in = inS__;
            _pp = new IceInternal.ParamPatcher<Test.Initial>("::Test::Initial");
        }

        public static void write(Ice.OutputStream outS__, Initial v__)
        {
            outS__.writeObject(v__);
        }

        public void read()
        {
            _in.readObject(_pp);
        }

        public Test.Initial value
        {
            get
            {
                return (Test.Initial)_pp.value;
            }
        }

        private Ice.InputStream _in;
        private IceInternal.ParamPatcher<Test.Initial> _pp;
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1012")]
    public abstract partial class Initial : Ice.ObjectImpl, InitialOperations_, InitialOperationsNC_
    {
        #region Slice operations

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void shutdown()
        {
            shutdown(Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract void shutdown(Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Object pingPong(Ice.Object o)
        {
            return pingPong(o, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Object pingPong(Ice.Object o, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            opOptionalException(a, b, o, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            opDerivedException(a, b, o, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            opRequiredException(a, b, o, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3)
        {
            return opByte(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3)
        {
            return opBool(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3)
        {
            return opShort(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3)
        {
            return opInt(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3)
        {
            return opLong(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3)
        {
            return opFloat(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3)
        {
            return opDouble(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3)
        {
            return opString(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3)
        {
            return opMyEnum(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3)
        {
            return opSmallStruct(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3)
        {
            return opFixedStruct(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3)
        {
            return opVarStruct(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3)
        {
            return opOneOptional(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3)
        {
            return opOneOptionalProxy(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3)
        {
            return opByteSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3)
        {
            return opBoolSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3)
        {
            return opShortSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3)
        {
            return opIntSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3)
        {
            return opLongSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3)
        {
            return opFloatSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3)
        {
            return opDoubleSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3)
        {
            return opStringSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3)
        {
            return opSmallStructSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3)
        {
            return opSmallStructList(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3)
        {
            return opFixedStructSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3)
        {
            return opFixedStructList(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3)
        {
            return opVarStructSeq(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3)
        {
            return opSerializable(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3)
        {
            return opIntIntDict(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3)
        {
            return opStringIntDict(p1, out p3, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void opClassAndUnknownOptional(Test.A p)
        {
            opClassAndUnknownOptional(p, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract void opClassAndUnknownOptional(Test.A p, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o)
        {
            sendOptionalClass(req, o, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o)
        {
            returnOptionalClass(req, out o, Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public bool supportsRequiredParams()
        {
            return supportsRequiredParams(Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract bool supportsRequiredParams(Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public bool supportsJavaSerializable()
        {
            return supportsJavaSerializable(Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract bool supportsJavaSerializable(Ice.Current current__);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public bool supportsCsharpSerializable()
        {
            return supportsCsharpSerializable(Ice.ObjectImpl.defaultCurrent);
        }
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public abstract bool supportsCsharpSerializable(Ice.Current current__);

        #endregion

        #region Slice type-related members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::Test::Initial"
        };

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids()
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id()
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus shutdown___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            obj__.shutdown(current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus pingPong___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            IceInternal.ParamPatcher<Ice.Object> o__PP = new IceInternal.ParamPatcher<Ice.Object>(Ice.ObjectImpl.ice_staticId());
            is__.readObject(o__PP);
            is__.readPendingObjects();
            inS__.endReadParams();
            Ice.Object ret__ = obj__.pingPong(o__PP.value, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeObject(ret__);
            os__.writePendingObjects();
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opOptionalException___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<int> a;
            Ice.Optional<string> b;
            Ice.OptionalPatcher<Test.OneOptional> o__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
            a = is__.readInt(1);
            b = is__.readString(2);
            is__.readObject(3, o__PP);
            inS__.endReadParams();
            try
            {
                obj__.opOptionalException(a, b, o__PP.value, current__);
                inS__.writeEmptyParams__();
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Test.OptionalException ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opDerivedException___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<int> a;
            Ice.Optional<string> b;
            Ice.OptionalPatcher<Test.OneOptional> o__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
            a = is__.readInt(1);
            b = is__.readString(2);
            is__.readObject(3, o__PP);
            inS__.endReadParams();
            try
            {
                obj__.opDerivedException(a, b, o__PP.value, current__);
                inS__.writeEmptyParams__();
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Test.OptionalException ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opRequiredException___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<int> a;
            Ice.Optional<string> b;
            Ice.OptionalPatcher<Test.OneOptional> o__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
            a = is__.readInt(1);
            b = is__.readString(2);
            is__.readObject(3, o__PP);
            inS__.endReadParams();
            try
            {
                obj__.opRequiredException(a, b, o__PP.value, current__);
                inS__.writeEmptyParams__();
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(Test.OptionalException ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opByte___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<byte> p1;
            p1 = is__.readByte(2);
            inS__.endReadParams();
            Ice.Optional<byte> p3;
            Ice.Optional<byte> ret__ = obj__.opByte(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeByte(1, ret__);
            os__.writeByte(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opBool___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<bool> p1;
            p1 = is__.readBool(2);
            inS__.endReadParams();
            Ice.Optional<bool> p3;
            Ice.Optional<bool> ret__ = obj__.opBool(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(1, ret__);
            os__.writeBool(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opShort___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<short> p1;
            p1 = is__.readShort(2);
            inS__.endReadParams();
            Ice.Optional<short> p3;
            Ice.Optional<short> ret__ = obj__.opShort(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeShort(1, ret__);
            os__.writeShort(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opInt___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<int> p1;
            p1 = is__.readInt(2);
            inS__.endReadParams();
            Ice.Optional<int> p3;
            Ice.Optional<int> ret__ = obj__.opInt(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeInt(1, ret__);
            os__.writeInt(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opLong___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<long> p1;
            p1 = is__.readLong(1);
            inS__.endReadParams();
            Ice.Optional<long> p3;
            Ice.Optional<long> ret__ = obj__.opLong(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeLong(2, p3);
            os__.writeLong(3, ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opFloat___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<float> p1;
            p1 = is__.readFloat(2);
            inS__.endReadParams();
            Ice.Optional<float> p3;
            Ice.Optional<float> ret__ = obj__.opFloat(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeFloat(1, ret__);
            os__.writeFloat(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opDouble___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<double> p1;
            p1 = is__.readDouble(2);
            inS__.endReadParams();
            Ice.Optional<double> p3;
            Ice.Optional<double> ret__ = obj__.opDouble(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeDouble(1, ret__);
            os__.writeDouble(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opString___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<string> p1;
            p1 = is__.readString(2);
            inS__.endReadParams();
            Ice.Optional<string> p3;
            Ice.Optional<string> ret__ = obj__.opString(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(1, ret__);
            os__.writeString(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opMyEnum___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<Test.MyEnum> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.Size))
            {
                Test.MyEnum tmpVal__;
                tmpVal__ = (Test.MyEnum)is__.readEnum(0);
                p1 = new Ice.Optional<Test.MyEnum>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<Test.MyEnum>();
            }
            inS__.endReadParams();
            Ice.Optional<Test.MyEnum> p3;
            Ice.Optional<Test.MyEnum> ret__ = obj__.opMyEnum(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue)
            {
                os__.writeEnum(1, (int)ret__.Value, 1);
            }
            if(p3.HasValue)
            {
                os__.writeEnum(3, (int)p3.Value, 1);
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opSmallStruct___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<Test.SmallStruct> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                Test.SmallStruct tmpVal__ = new Test.SmallStruct();
                tmpVal__.read__(is__);
                p1 = new Ice.Optional<Test.SmallStruct>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<Test.SmallStruct>();
            }
            inS__.endReadParams();
            Ice.Optional<Test.SmallStruct> p3;
            Ice.Optional<Test.SmallStruct> ret__ = obj__.opSmallStruct(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(1);
                ret__.Value.write__(os__);
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(1);
                p3.Value.write__(os__);
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opFixedStruct___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<Test.FixedStruct> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                Test.FixedStruct tmpVal__ = new Test.FixedStruct();
                tmpVal__.read__(is__);
                p1 = new Ice.Optional<Test.FixedStruct>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<Test.FixedStruct>();
            }
            inS__.endReadParams();
            Ice.Optional<Test.FixedStruct> p3;
            Ice.Optional<Test.FixedStruct> ret__ = obj__.opFixedStruct(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(4);
                ret__.Value.write__(os__);
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(4);
                p3.Value.write__(os__);
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opVarStruct___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<Test.VarStruct> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                Test.VarStruct tmpVal__ = null;
                if(tmpVal__ == null)
                {
                    tmpVal__ = new Test.VarStruct();
                }
                tmpVal__.read__(is__);
                p1 = new Ice.Optional<Test.VarStruct>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<Test.VarStruct>();
            }
            inS__.endReadParams();
            Ice.Optional<Test.VarStruct> p3;
            Ice.Optional<Test.VarStruct> ret__ = obj__.opVarStruct(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                if(ret__.Value == null)
                {
                    Test.VarStruct tmp__ = new Test.VarStruct();
                    tmp__.write__(os__);
                }
                else
                {
                    ret__.Value.write__(os__);
                }
                os__.endSize();
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                if(p3.Value == null)
                {
                    Test.VarStruct tmp__ = new Test.VarStruct();
                    tmp__.write__(os__);
                }
                else
                {
                    p3.Value.write__(os__);
                }
                os__.endSize();
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opOneOptional___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.OptionalPatcher<Test.OneOptional> p1__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
            is__.readObject(2, p1__PP);
            inS__.endReadParams();
            Ice.Optional<Test.OneOptional> p3;
            Ice.Optional<Test.OneOptional> ret__ = obj__.opOneOptional(p1__PP.value, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeObject(1, ret__);
            os__.writeObject(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opOneOptionalProxy___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<Test.OneOptionalPrx> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                Test.OneOptionalPrx tmpVal__;
                tmpVal__ = Test.OneOptionalPrxHelper.read__(is__);
                p1 = new Ice.Optional<Test.OneOptionalPrx>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<Test.OneOptionalPrx>();
            }
            inS__.endReadParams();
            Ice.Optional<Test.OneOptionalPrx> p3;
            Ice.Optional<Test.OneOptionalPrx> ret__ = obj__.opOneOptionalProxy(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.OneOptionalPrxHelper.write__(os__, ret__.Value);
                os__.endSize();
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.OneOptionalPrxHelper.write__(os__, p3.Value);
                os__.endSize();
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opByteSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<byte[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal__;
                tmpVal__ = Test.ByteSeqHelper.read(is__);
                p1 = new Ice.Optional<byte[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<byte[]>();
            }
            inS__.endReadParams();
            Ice.Optional<byte[]> p3;
            Ice.Optional<byte[]> ret__ = obj__.opByteSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeByteSeq(1, ret__);
            os__.writeByteSeq(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opBoolSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<bool[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                bool[] tmpVal__;
                tmpVal__ = Test.BoolSeqHelper.read(is__);
                p1 = new Ice.Optional<bool[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<bool[]>();
            }
            inS__.endReadParams();
            Ice.Optional<bool[]> p3;
            Ice.Optional<bool[]> ret__ = obj__.opBoolSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBoolSeq(1, ret__);
            os__.writeBoolSeq(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opShortSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<short[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                short[] tmpVal__;
                tmpVal__ = Test.ShortSeqHelper.read(is__);
                p1 = new Ice.Optional<short[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<short[]>();
            }
            inS__.endReadParams();
            Ice.Optional<short[]> p3;
            Ice.Optional<short[]> ret__ = obj__.opShortSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeShortSeq(1, ret__);
            os__.writeShortSeq(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opIntSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<int[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                int[] tmpVal__;
                tmpVal__ = Test.IntSeqHelper.read(is__);
                p1 = new Ice.Optional<int[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<int[]>();
            }
            inS__.endReadParams();
            Ice.Optional<int[]> p3;
            Ice.Optional<int[]> ret__ = obj__.opIntSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeIntSeq(1, ret__);
            os__.writeIntSeq(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opLongSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<long[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                long[] tmpVal__;
                tmpVal__ = Test.LongSeqHelper.read(is__);
                p1 = new Ice.Optional<long[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<long[]>();
            }
            inS__.endReadParams();
            Ice.Optional<long[]> p3;
            Ice.Optional<long[]> ret__ = obj__.opLongSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeLongSeq(1, ret__);
            os__.writeLongSeq(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opFloatSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<float[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                float[] tmpVal__;
                tmpVal__ = Test.FloatSeqHelper.read(is__);
                p1 = new Ice.Optional<float[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<float[]>();
            }
            inS__.endReadParams();
            Ice.Optional<float[]> p3;
            Ice.Optional<float[]> ret__ = obj__.opFloatSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeFloatSeq(1, ret__);
            os__.writeFloatSeq(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opDoubleSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<double[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                double[] tmpVal__;
                tmpVal__ = Test.DoubleSeqHelper.read(is__);
                p1 = new Ice.Optional<double[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<double[]>();
            }
            inS__.endReadParams();
            Ice.Optional<double[]> p3;
            Ice.Optional<double[]> ret__ = obj__.opDoubleSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeDoubleSeq(1, ret__);
            os__.writeDoubleSeq(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opStringSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<string[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                string[] tmpVal__;
                tmpVal__ = Test.StringSeqHelper.read(is__);
                p1 = new Ice.Optional<string[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<string[]>();
            }
            inS__.endReadParams();
            Ice.Optional<string[]> p3;
            Ice.Optional<string[]> ret__ = obj__.opStringSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeStringSeq(1, ret__);
            os__.writeStringSeq(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opSmallStructSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<Test.SmallStruct[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                Test.SmallStruct[] tmpVal__;
                tmpVal__ = Test.SmallStructSeqHelper.read(is__);
                p1 = new Ice.Optional<Test.SmallStruct[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<Test.SmallStruct[]>();
            }
            inS__.endReadParams();
            Ice.Optional<Test.SmallStruct[]> p3;
            Ice.Optional<Test.SmallStruct[]> ret__ = obj__.opSmallStructSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.VSize))
            {
                Test.SmallStructSeqHelper.write(os__, ret__.Value);
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.VSize))
            {
                Test.SmallStructSeqHelper.write(os__, p3.Value);
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opSmallStructList___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                _System.Collections.Generic.List<Test.SmallStruct> tmpVal__;
                tmpVal__ = Test.SmallStructListHelper.read(is__);
                p1 = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
            }
            inS__.endReadParams();
            Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3;
            Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> ret__ = obj__.opSmallStructList(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.VSize))
            {
                Test.SmallStructListHelper.write(os__, ret__.Value);
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.VSize))
            {
                Test.SmallStructListHelper.write(os__, p3.Value);
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opFixedStructSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<Test.FixedStruct[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                Test.FixedStruct[] tmpVal__;
                tmpVal__ = Test.FixedStructSeqHelper.read(is__);
                p1 = new Ice.Optional<Test.FixedStruct[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<Test.FixedStruct[]>();
            }
            inS__.endReadParams();
            Ice.Optional<Test.FixedStruct[]> p3;
            Ice.Optional<Test.FixedStruct[]> ret__ = obj__.opFixedStructSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(ret__.Value == null ? 1 : ret__.Value.Length * 4 + (ret__.Value.Length > 254 ? 5 : 1));
                Test.FixedStructSeqHelper.write(os__, ret__.Value);
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(p3.Value == null ? 1 : p3.Value.Length * 4 + (p3.Value.Length > 254 ? 5 : 1));
                Test.FixedStructSeqHelper.write(os__, p3.Value);
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opFixedStructList___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                _System.Collections.Generic.LinkedList<Test.FixedStruct> tmpVal__;
                tmpVal__ = Test.FixedStructListHelper.read(is__);
                p1 = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>();
            }
            inS__.endReadParams();
            Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3;
            Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> ret__ = obj__.opFixedStructList(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(ret__.Value == null ? 1 : ret__.Value.Count * 4 + (ret__.Value.Count > 254 ? 5 : 1));
                Test.FixedStructListHelper.write(os__, ret__.Value);
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(p3.Value == null ? 1 : p3.Value.Count * 4 + (p3.Value.Count > 254 ? 5 : 1));
                Test.FixedStructListHelper.write(os__, p3.Value);
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opVarStructSeq___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<Test.VarStruct[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                Test.VarStruct[] tmpVal__;
                tmpVal__ = Test.VarStructSeqHelper.read(is__);
                p1 = new Ice.Optional<Test.VarStruct[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<Test.VarStruct[]>();
            }
            inS__.endReadParams();
            Ice.Optional<Test.VarStruct[]> p3;
            Ice.Optional<Test.VarStruct[]> ret__ = obj__.opVarStructSeq(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.VarStructSeqHelper.write(os__, ret__.Value);
                os__.endSize();
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.VarStructSeqHelper.write(os__, p3.Value);
                os__.endSize();
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opSerializable___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<byte[]> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                byte[] tmpVal__;
                tmpVal__ = Test.SerializableHelper.read(is__);
                p1 = new Ice.Optional<byte[]>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<byte[]>();
            }
            inS__.endReadParams();
            Ice.Optional<byte[]> p3;
            Ice.Optional<byte[]> ret__ = obj__.opSerializable(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeByteSeq(1, ret__);
            os__.writeByteSeq(3, p3);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opIntIntDict___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.VSize))
            {
                is__.skipSize();
                _System.Collections.Generic.Dictionary<int, int> tmpVal__ = new _System.Collections.Generic.Dictionary<int, int>();
                tmpVal__ = Test.IntIntDictHelper.read(is__);
                p1 = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
            }
            inS__.endReadParams();
            Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3;
            Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> ret__ = obj__.opIntIntDict(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(ret__.Value == null ? 1 : ret__.Value.Count * 8 + (ret__.Value.Count > 254 ? 5 : 1));
                Test.IntIntDictHelper.write(os__, ret__.Value);
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.VSize))
            {
                os__.writeSize(p3.Value == null ? 1 : p3.Value.Count * 8 + (p3.Value.Count > 254 ? 5 : 1));
                Test.IntIntDictHelper.write(os__, p3.Value);
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opStringIntDict___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1;
            if(is__.readOpt(2, Ice.OptionalFormat.FSize))
            {
                is__.skip(4);
                _System.Collections.Generic.Dictionary<string, int> tmpVal__ = new _System.Collections.Generic.Dictionary<string, int>();
                tmpVal__ = Test.StringIntDictHelper.read(is__);
                p1 = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>(tmpVal__);
            }
            else
            {
                p1 = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
            }
            inS__.endReadParams();
            Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3;
            Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> ret__ = obj__.opStringIntDict(p1, out p3, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            if(ret__.HasValue && os__.writeOpt(1, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.StringIntDictHelper.write(os__, ret__.Value);
                os__.endSize();
            }
            if(p3.HasValue && os__.writeOpt(3, Ice.OptionalFormat.FSize))
            {
                os__.startSize();
                Test.StringIntDictHelper.write(os__, p3.Value);
                os__.endSize();
            }
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus opClassAndUnknownOptional___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            IceInternal.ParamPatcher<Test.A> p__PP = new IceInternal.ParamPatcher<Test.A>(Test.A.ice_staticId());
            is__.readObject(p__PP);
            is__.readPendingObjects();
            inS__.endReadParams();
            obj__.opClassAndUnknownOptional(p__PP.value, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus sendOptionalClass___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            bool req;
            req = is__.readBool();
            Ice.OptionalPatcher<Test.OneOptional> o__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
            is__.readObject(1, o__PP);
            inS__.endReadParams();
            obj__.sendOptionalClass(req, o__PP.value, current__);
            inS__.writeEmptyParams__();
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus returnOptionalClass___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            bool req;
            req = is__.readBool();
            inS__.endReadParams();
            Ice.Optional<Test.OneOptional> o;
            obj__.returnOptionalClass(req, out o, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeObject(1, o);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus supportsRequiredParams___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            bool ret__ = obj__.supportsRequiredParams(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus supportsJavaSerializable___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            bool ret__ = obj__.supportsJavaSerializable(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        public static Ice.DispatchStatus supportsCsharpSerializable___(Initial obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            bool ret__ = obj__.supportsCsharpSerializable(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeBool(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "opBool",
            "opBoolSeq",
            "opByte",
            "opByteSeq",
            "opClassAndUnknownOptional",
            "opDerivedException",
            "opDouble",
            "opDoubleSeq",
            "opFixedStruct",
            "opFixedStructList",
            "opFixedStructSeq",
            "opFloat",
            "opFloatSeq",
            "opInt",
            "opIntIntDict",
            "opIntSeq",
            "opLong",
            "opLongSeq",
            "opMyEnum",
            "opOneOptional",
            "opOneOptionalProxy",
            "opOptionalException",
            "opRequiredException",
            "opSerializable",
            "opShort",
            "opShortSeq",
            "opSmallStruct",
            "opSmallStructList",
            "opSmallStructSeq",
            "opString",
            "opStringIntDict",
            "opStringSeq",
            "opVarStruct",
            "opVarStructSeq",
            "pingPong",
            "returnOptionalClass",
            "sendOptionalClass",
            "shutdown",
            "supportsCsharpSerializable",
            "supportsJavaSerializable",
            "supportsRequiredParams"
        };
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 4:
                {
                    return opBool___(this, inS__, current__);
                }
                case 5:
                {
                    return opBoolSeq___(this, inS__, current__);
                }
                case 6:
                {
                    return opByte___(this, inS__, current__);
                }
                case 7:
                {
                    return opByteSeq___(this, inS__, current__);
                }
                case 8:
                {
                    return opClassAndUnknownOptional___(this, inS__, current__);
                }
                case 9:
                {
                    return opDerivedException___(this, inS__, current__);
                }
                case 10:
                {
                    return opDouble___(this, inS__, current__);
                }
                case 11:
                {
                    return opDoubleSeq___(this, inS__, current__);
                }
                case 12:
                {
                    return opFixedStruct___(this, inS__, current__);
                }
                case 13:
                {
                    return opFixedStructList___(this, inS__, current__);
                }
                case 14:
                {
                    return opFixedStructSeq___(this, inS__, current__);
                }
                case 15:
                {
                    return opFloat___(this, inS__, current__);
                }
                case 16:
                {
                    return opFloatSeq___(this, inS__, current__);
                }
                case 17:
                {
                    return opInt___(this, inS__, current__);
                }
                case 18:
                {
                    return opIntIntDict___(this, inS__, current__);
                }
                case 19:
                {
                    return opIntSeq___(this, inS__, current__);
                }
                case 20:
                {
                    return opLong___(this, inS__, current__);
                }
                case 21:
                {
                    return opLongSeq___(this, inS__, current__);
                }
                case 22:
                {
                    return opMyEnum___(this, inS__, current__);
                }
                case 23:
                {
                    return opOneOptional___(this, inS__, current__);
                }
                case 24:
                {
                    return opOneOptionalProxy___(this, inS__, current__);
                }
                case 25:
                {
                    return opOptionalException___(this, inS__, current__);
                }
                case 26:
                {
                    return opRequiredException___(this, inS__, current__);
                }
                case 27:
                {
                    return opSerializable___(this, inS__, current__);
                }
                case 28:
                {
                    return opShort___(this, inS__, current__);
                }
                case 29:
                {
                    return opShortSeq___(this, inS__, current__);
                }
                case 30:
                {
                    return opSmallStruct___(this, inS__, current__);
                }
                case 31:
                {
                    return opSmallStructList___(this, inS__, current__);
                }
                case 32:
                {
                    return opSmallStructSeq___(this, inS__, current__);
                }
                case 33:
                {
                    return opString___(this, inS__, current__);
                }
                case 34:
                {
                    return opStringIntDict___(this, inS__, current__);
                }
                case 35:
                {
                    return opStringSeq___(this, inS__, current__);
                }
                case 36:
                {
                    return opVarStruct___(this, inS__, current__);
                }
                case 37:
                {
                    return opVarStructSeq___(this, inS__, current__);
                }
                case 38:
                {
                    return pingPong___(this, inS__, current__);
                }
                case 39:
                {
                    return returnOptionalClass___(this, inS__, current__);
                }
                case 40:
                {
                    return sendOptionalClass___(this, inS__, current__);
                }
                case 41:
                {
                    return shutdown___(this, inS__, current__);
                }
                case 42:
                {
                    return supportsCsharpSerializable___(this, inS__, current__);
                }
                case 43:
                {
                    return supportsJavaSerializable___(this, inS__, current__);
                }
                case 44:
                {
                    return supportsRequiredParams___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), true);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void writeImpl__(Ice.OutputStream outS__)
        {
            outS__.startSlice(ice_staticId(), true);
            outS__.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
        protected override void readImpl__(Ice.InputStream inS__)
        {
            inS__.startSlice();
            inS__.endSlice();
        }

        #endregion
    }
}

namespace Test
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_shutdown();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_pingPong(Ice.Object ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opOptionalException();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opDerivedException();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opRequiredException();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opByte(Ice.Optional<byte> ret__, Ice.Optional<byte> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opBool(Ice.Optional<bool> ret__, Ice.Optional<bool> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opShort(Ice.Optional<short> ret__, Ice.Optional<short> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opInt(Ice.Optional<int> ret__, Ice.Optional<int> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opLong(Ice.Optional<long> ret__, Ice.Optional<long> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opFloat(Ice.Optional<float> ret__, Ice.Optional<float> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opDouble(Ice.Optional<double> ret__, Ice.Optional<double> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opString(Ice.Optional<string> ret__, Ice.Optional<string> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opMyEnum(Ice.Optional<Test.MyEnum> ret__, Ice.Optional<Test.MyEnum> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opSmallStruct(Ice.Optional<Test.SmallStruct> ret__, Ice.Optional<Test.SmallStruct> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opFixedStruct(Ice.Optional<Test.FixedStruct> ret__, Ice.Optional<Test.FixedStruct> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opVarStruct(Ice.Optional<Test.VarStruct> ret__, Ice.Optional<Test.VarStruct> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opOneOptional(Ice.Optional<Test.OneOptional> ret__, Ice.Optional<Test.OneOptional> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> ret__, Ice.Optional<Test.OneOptionalPrx> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opByteSeq(Ice.Optional<byte[]> ret__, Ice.Optional<byte[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opBoolSeq(Ice.Optional<bool[]> ret__, Ice.Optional<bool[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opShortSeq(Ice.Optional<short[]> ret__, Ice.Optional<short[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opIntSeq(Ice.Optional<int[]> ret__, Ice.Optional<int[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opLongSeq(Ice.Optional<long[]> ret__, Ice.Optional<long[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opFloatSeq(Ice.Optional<float[]> ret__, Ice.Optional<float[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opDoubleSeq(Ice.Optional<double[]> ret__, Ice.Optional<double[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opStringSeq(Ice.Optional<string[]> ret__, Ice.Optional<string[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> ret__, Ice.Optional<Test.SmallStruct[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> ret__, Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> ret__, Ice.Optional<Test.FixedStruct[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> ret__, Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opVarStructSeq(Ice.Optional<Test.VarStruct[]> ret__, Ice.Optional<Test.VarStruct[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opSerializable(Ice.Optional<byte[]> ret__, Ice.Optional<byte[]> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> ret__, Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> ret__, Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_opClassAndUnknownOptional();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_sendOptionalClass();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_returnOptionalClass(Ice.Optional<Test.OneOptional> o);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_supportsRequiredParams(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_supportsJavaSerializable(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public delegate void Callback_Initial_supportsCsharpSerializable(bool ret__);
}

namespace Test
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface OneOptionalPrx : Ice.ObjectPrx
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface MultiOptionalPrx : Ice.ObjectPrx
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface APrx : Ice.ObjectPrx
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface BPrx : Test.APrx
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface CPrx : Test.BPrx
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface WDPrx : Ice.ObjectPrx
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface OptionalWithCustomPrx : Ice.ObjectPrx
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface InitialPrx : Ice.ObjectPrx
    {
        void shutdown();
        void shutdown(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_shutdown> begin_shutdown();
        Ice.AsyncResult<Test.Callback_Initial_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_shutdown(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_shutdown(Ice.AsyncResult r__);

        bool shutdown_async(Test.AMI_Initial_shutdown cb__);
        bool shutdown_async(Test.AMI_Initial_shutdown cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Object pingPong(Ice.Object o);
        Ice.Object pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_pingPong> begin_pingPong(Ice.Object o);
        Ice.AsyncResult<Test.Callback_Initial_pingPong> begin_pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_pingPong(Ice.Object o, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Object end_pingPong(Ice.AsyncResult r__);

        bool pingPong_async(Test.AMI_Initial_pingPong cb__, Ice.Object o);
        bool pingPong_async(Test.AMI_Initial_pingPong cb__, Ice.Object o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);
        void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opOptionalException> begin_opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);
        Ice.AsyncResult<Test.Callback_Initial_opOptionalException> begin_opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_opOptionalException(Ice.AsyncResult r__);

        bool opOptionalException_async(Test.AMI_Initial_opOptionalException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);
        bool opOptionalException_async(Test.AMI_Initial_opOptionalException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);
        void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opDerivedException> begin_opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);
        Ice.AsyncResult<Test.Callback_Initial_opDerivedException> begin_opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_opDerivedException(Ice.AsyncResult r__);

        bool opDerivedException_async(Test.AMI_Initial_opDerivedException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);
        bool opDerivedException_async(Test.AMI_Initial_opDerivedException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);
        void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opRequiredException> begin_opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);
        Ice.AsyncResult<Test.Callback_Initial_opRequiredException> begin_opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_opRequiredException(Ice.AsyncResult r__);

        bool opRequiredException_async(Test.AMI_Initial_opRequiredException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);
        bool opRequiredException_async(Test.AMI_Initial_opRequiredException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3);
        Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opByte> begin_opByte(Ice.Optional<byte> p1);
        Ice.AsyncResult<Test.Callback_Initial_opByte> begin_opByte(Ice.Optional<byte> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opByte(Ice.Optional<byte> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opByte(Ice.Optional<byte> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<byte> end_opByte(out Ice.Optional<byte> p3, Ice.AsyncResult r__);

        bool opByte_async(Test.AMI_Initial_opByte cb__, Ice.Optional<byte> p1);
        bool opByte_async(Test.AMI_Initial_opByte cb__, Ice.Optional<byte> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3);
        Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opBool> begin_opBool(Ice.Optional<bool> p1);
        Ice.AsyncResult<Test.Callback_Initial_opBool> begin_opBool(Ice.Optional<bool> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opBool(Ice.Optional<bool> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opBool(Ice.Optional<bool> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<bool> end_opBool(out Ice.Optional<bool> p3, Ice.AsyncResult r__);

        bool opBool_async(Test.AMI_Initial_opBool cb__, Ice.Optional<bool> p1);
        bool opBool_async(Test.AMI_Initial_opBool cb__, Ice.Optional<bool> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3);
        Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opShort> begin_opShort(Ice.Optional<short> p1);
        Ice.AsyncResult<Test.Callback_Initial_opShort> begin_opShort(Ice.Optional<short> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opShort(Ice.Optional<short> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opShort(Ice.Optional<short> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<short> end_opShort(out Ice.Optional<short> p3, Ice.AsyncResult r__);

        bool opShort_async(Test.AMI_Initial_opShort cb__, Ice.Optional<short> p1);
        bool opShort_async(Test.AMI_Initial_opShort cb__, Ice.Optional<short> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3);
        Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opInt> begin_opInt(Ice.Optional<int> p1);
        Ice.AsyncResult<Test.Callback_Initial_opInt> begin_opInt(Ice.Optional<int> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opInt(Ice.Optional<int> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opInt(Ice.Optional<int> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<int> end_opInt(out Ice.Optional<int> p3, Ice.AsyncResult r__);

        bool opInt_async(Test.AMI_Initial_opInt cb__, Ice.Optional<int> p1);
        bool opInt_async(Test.AMI_Initial_opInt cb__, Ice.Optional<int> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3);
        Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opLong> begin_opLong(Ice.Optional<long> p1);
        Ice.AsyncResult<Test.Callback_Initial_opLong> begin_opLong(Ice.Optional<long> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opLong(Ice.Optional<long> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opLong(Ice.Optional<long> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<long> end_opLong(out Ice.Optional<long> p3, Ice.AsyncResult r__);

        bool opLong_async(Test.AMI_Initial_opLong cb__, Ice.Optional<long> p1);
        bool opLong_async(Test.AMI_Initial_opLong cb__, Ice.Optional<long> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3);
        Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opFloat> begin_opFloat(Ice.Optional<float> p1);
        Ice.AsyncResult<Test.Callback_Initial_opFloat> begin_opFloat(Ice.Optional<float> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opFloat(Ice.Optional<float> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opFloat(Ice.Optional<float> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<float> end_opFloat(out Ice.Optional<float> p3, Ice.AsyncResult r__);

        bool opFloat_async(Test.AMI_Initial_opFloat cb__, Ice.Optional<float> p1);
        bool opFloat_async(Test.AMI_Initial_opFloat cb__, Ice.Optional<float> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3);
        Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opDouble> begin_opDouble(Ice.Optional<double> p1);
        Ice.AsyncResult<Test.Callback_Initial_opDouble> begin_opDouble(Ice.Optional<double> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opDouble(Ice.Optional<double> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opDouble(Ice.Optional<double> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<double> end_opDouble(out Ice.Optional<double> p3, Ice.AsyncResult r__);

        bool opDouble_async(Test.AMI_Initial_opDouble cb__, Ice.Optional<double> p1);
        bool opDouble_async(Test.AMI_Initial_opDouble cb__, Ice.Optional<double> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3);
        Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opString> begin_opString(Ice.Optional<string> p1);
        Ice.AsyncResult<Test.Callback_Initial_opString> begin_opString(Ice.Optional<string> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opString(Ice.Optional<string> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opString(Ice.Optional<string> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<string> end_opString(out Ice.Optional<string> p3, Ice.AsyncResult r__);

        bool opString_async(Test.AMI_Initial_opString cb__, Ice.Optional<string> p1);
        bool opString_async(Test.AMI_Initial_opString cb__, Ice.Optional<string> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3);
        Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opMyEnum> begin_opMyEnum(Ice.Optional<Test.MyEnum> p1);
        Ice.AsyncResult<Test.Callback_Initial_opMyEnum> begin_opMyEnum(Ice.Optional<Test.MyEnum> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opMyEnum(Ice.Optional<Test.MyEnum> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opMyEnum(Ice.Optional<Test.MyEnum> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<Test.MyEnum> end_opMyEnum(out Ice.Optional<Test.MyEnum> p3, Ice.AsyncResult r__);

        bool opMyEnum_async(Test.AMI_Initial_opMyEnum cb__, Ice.Optional<Test.MyEnum> p1);
        bool opMyEnum_async(Test.AMI_Initial_opMyEnum cb__, Ice.Optional<Test.MyEnum> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3);
        Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opSmallStruct> begin_opSmallStruct(Ice.Optional<Test.SmallStruct> p1);
        Ice.AsyncResult<Test.Callback_Initial_opSmallStruct> begin_opSmallStruct(Ice.Optional<Test.SmallStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opSmallStruct(Ice.Optional<Test.SmallStruct> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opSmallStruct(Ice.Optional<Test.SmallStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<Test.SmallStruct> end_opSmallStruct(out Ice.Optional<Test.SmallStruct> p3, Ice.AsyncResult r__);

        bool opSmallStruct_async(Test.AMI_Initial_opSmallStruct cb__, Ice.Optional<Test.SmallStruct> p1);
        bool opSmallStruct_async(Test.AMI_Initial_opSmallStruct cb__, Ice.Optional<Test.SmallStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3);
        Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opFixedStruct> begin_opFixedStruct(Ice.Optional<Test.FixedStruct> p1);
        Ice.AsyncResult<Test.Callback_Initial_opFixedStruct> begin_opFixedStruct(Ice.Optional<Test.FixedStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opFixedStruct(Ice.Optional<Test.FixedStruct> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opFixedStruct(Ice.Optional<Test.FixedStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<Test.FixedStruct> end_opFixedStruct(out Ice.Optional<Test.FixedStruct> p3, Ice.AsyncResult r__);

        bool opFixedStruct_async(Test.AMI_Initial_opFixedStruct cb__, Ice.Optional<Test.FixedStruct> p1);
        bool opFixedStruct_async(Test.AMI_Initial_opFixedStruct cb__, Ice.Optional<Test.FixedStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3);
        Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opVarStruct> begin_opVarStruct(Ice.Optional<Test.VarStruct> p1);
        Ice.AsyncResult<Test.Callback_Initial_opVarStruct> begin_opVarStruct(Ice.Optional<Test.VarStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opVarStruct(Ice.Optional<Test.VarStruct> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opVarStruct(Ice.Optional<Test.VarStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<Test.VarStruct> end_opVarStruct(out Ice.Optional<Test.VarStruct> p3, Ice.AsyncResult r__);

        bool opVarStruct_async(Test.AMI_Initial_opVarStruct cb__, Ice.Optional<Test.VarStruct> p1);
        bool opVarStruct_async(Test.AMI_Initial_opVarStruct cb__, Ice.Optional<Test.VarStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3);
        Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opOneOptional> begin_opOneOptional(Ice.Optional<Test.OneOptional> p1);
        Ice.AsyncResult<Test.Callback_Initial_opOneOptional> begin_opOneOptional(Ice.Optional<Test.OneOptional> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opOneOptional(Ice.Optional<Test.OneOptional> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opOneOptional(Ice.Optional<Test.OneOptional> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<Test.OneOptional> end_opOneOptional(out Ice.Optional<Test.OneOptional> p3, Ice.AsyncResult r__);

        bool opOneOptional_async(Test.AMI_Initial_opOneOptional cb__, Ice.Optional<Test.OneOptional> p1);
        bool opOneOptional_async(Test.AMI_Initial_opOneOptional cb__, Ice.Optional<Test.OneOptional> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3);
        Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opOneOptionalProxy> begin_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1);
        Ice.AsyncResult<Test.Callback_Initial_opOneOptionalProxy> begin_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<Test.OneOptionalPrx> end_opOneOptionalProxy(out Ice.Optional<Test.OneOptionalPrx> p3, Ice.AsyncResult r__);

        bool opOneOptionalProxy_async(Test.AMI_Initial_opOneOptionalProxy cb__, Ice.Optional<Test.OneOptionalPrx> p1);
        bool opOneOptionalProxy_async(Test.AMI_Initial_opOneOptionalProxy cb__, Ice.Optional<Test.OneOptionalPrx> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3);
        Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opByteSeq> begin_opByteSeq(Ice.Optional<byte[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opByteSeq> begin_opByteSeq(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opByteSeq(Ice.Optional<byte[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opByteSeq(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<byte[]> end_opByteSeq(out Ice.Optional<byte[]> p3, Ice.AsyncResult r__);

        bool opByteSeq_async(Test.AMI_Initial_opByteSeq cb__, Ice.Optional<byte[]> p1);
        bool opByteSeq_async(Test.AMI_Initial_opByteSeq cb__, Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3);
        Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opBoolSeq> begin_opBoolSeq(Ice.Optional<bool[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opBoolSeq> begin_opBoolSeq(Ice.Optional<bool[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opBoolSeq(Ice.Optional<bool[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opBoolSeq(Ice.Optional<bool[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<bool[]> end_opBoolSeq(out Ice.Optional<bool[]> p3, Ice.AsyncResult r__);

        bool opBoolSeq_async(Test.AMI_Initial_opBoolSeq cb__, Ice.Optional<bool[]> p1);
        bool opBoolSeq_async(Test.AMI_Initial_opBoolSeq cb__, Ice.Optional<bool[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3);
        Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opShortSeq> begin_opShortSeq(Ice.Optional<short[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opShortSeq> begin_opShortSeq(Ice.Optional<short[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opShortSeq(Ice.Optional<short[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opShortSeq(Ice.Optional<short[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<short[]> end_opShortSeq(out Ice.Optional<short[]> p3, Ice.AsyncResult r__);

        bool opShortSeq_async(Test.AMI_Initial_opShortSeq cb__, Ice.Optional<short[]> p1);
        bool opShortSeq_async(Test.AMI_Initial_opShortSeq cb__, Ice.Optional<short[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3);
        Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opIntSeq> begin_opIntSeq(Ice.Optional<int[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opIntSeq> begin_opIntSeq(Ice.Optional<int[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opIntSeq(Ice.Optional<int[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opIntSeq(Ice.Optional<int[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<int[]> end_opIntSeq(out Ice.Optional<int[]> p3, Ice.AsyncResult r__);

        bool opIntSeq_async(Test.AMI_Initial_opIntSeq cb__, Ice.Optional<int[]> p1);
        bool opIntSeq_async(Test.AMI_Initial_opIntSeq cb__, Ice.Optional<int[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3);
        Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opLongSeq> begin_opLongSeq(Ice.Optional<long[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opLongSeq> begin_opLongSeq(Ice.Optional<long[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opLongSeq(Ice.Optional<long[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opLongSeq(Ice.Optional<long[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<long[]> end_opLongSeq(out Ice.Optional<long[]> p3, Ice.AsyncResult r__);

        bool opLongSeq_async(Test.AMI_Initial_opLongSeq cb__, Ice.Optional<long[]> p1);
        bool opLongSeq_async(Test.AMI_Initial_opLongSeq cb__, Ice.Optional<long[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3);
        Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opFloatSeq> begin_opFloatSeq(Ice.Optional<float[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opFloatSeq> begin_opFloatSeq(Ice.Optional<float[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opFloatSeq(Ice.Optional<float[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opFloatSeq(Ice.Optional<float[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<float[]> end_opFloatSeq(out Ice.Optional<float[]> p3, Ice.AsyncResult r__);

        bool opFloatSeq_async(Test.AMI_Initial_opFloatSeq cb__, Ice.Optional<float[]> p1);
        bool opFloatSeq_async(Test.AMI_Initial_opFloatSeq cb__, Ice.Optional<float[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3);
        Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opDoubleSeq> begin_opDoubleSeq(Ice.Optional<double[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opDoubleSeq> begin_opDoubleSeq(Ice.Optional<double[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opDoubleSeq(Ice.Optional<double[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opDoubleSeq(Ice.Optional<double[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<double[]> end_opDoubleSeq(out Ice.Optional<double[]> p3, Ice.AsyncResult r__);

        bool opDoubleSeq_async(Test.AMI_Initial_opDoubleSeq cb__, Ice.Optional<double[]> p1);
        bool opDoubleSeq_async(Test.AMI_Initial_opDoubleSeq cb__, Ice.Optional<double[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3);
        Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opStringSeq> begin_opStringSeq(Ice.Optional<string[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opStringSeq> begin_opStringSeq(Ice.Optional<string[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opStringSeq(Ice.Optional<string[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opStringSeq(Ice.Optional<string[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<string[]> end_opStringSeq(out Ice.Optional<string[]> p3, Ice.AsyncResult r__);

        bool opStringSeq_async(Test.AMI_Initial_opStringSeq cb__, Ice.Optional<string[]> p1);
        bool opStringSeq_async(Test.AMI_Initial_opStringSeq cb__, Ice.Optional<string[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3);
        Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opSmallStructSeq> begin_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opSmallStructSeq> begin_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<Test.SmallStruct[]> end_opSmallStructSeq(out Ice.Optional<Test.SmallStruct[]> p3, Ice.AsyncResult r__);

        bool opSmallStructSeq_async(Test.AMI_Initial_opSmallStructSeq cb__, Ice.Optional<Test.SmallStruct[]> p1);
        bool opSmallStructSeq_async(Test.AMI_Initial_opSmallStructSeq cb__, Ice.Optional<Test.SmallStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3);
        Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opSmallStructList> begin_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1);
        Ice.AsyncResult<Test.Callback_Initial_opSmallStructList> begin_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> end_opSmallStructList(out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, Ice.AsyncResult r__);

        bool opSmallStructList_async(Test.AMI_Initial_opSmallStructList cb__, Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1);
        bool opSmallStructList_async(Test.AMI_Initial_opSmallStructList cb__, Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3);
        Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opFixedStructSeq> begin_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opFixedStructSeq> begin_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<Test.FixedStruct[]> end_opFixedStructSeq(out Ice.Optional<Test.FixedStruct[]> p3, Ice.AsyncResult r__);

        bool opFixedStructSeq_async(Test.AMI_Initial_opFixedStructSeq cb__, Ice.Optional<Test.FixedStruct[]> p1);
        bool opFixedStructSeq_async(Test.AMI_Initial_opFixedStructSeq cb__, Ice.Optional<Test.FixedStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3);
        Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opFixedStructList> begin_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1);
        Ice.AsyncResult<Test.Callback_Initial_opFixedStructList> begin_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> end_opFixedStructList(out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, Ice.AsyncResult r__);

        bool opFixedStructList_async(Test.AMI_Initial_opFixedStructList cb__, Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1);
        bool opFixedStructList_async(Test.AMI_Initial_opFixedStructList cb__, Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3);
        Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opVarStructSeq> begin_opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opVarStructSeq> begin_opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<Test.VarStruct[]> end_opVarStructSeq(out Ice.Optional<Test.VarStruct[]> p3, Ice.AsyncResult r__);

        bool opVarStructSeq_async(Test.AMI_Initial_opVarStructSeq cb__, Ice.Optional<Test.VarStruct[]> p1);
        bool opVarStructSeq_async(Test.AMI_Initial_opVarStructSeq cb__, Ice.Optional<Test.VarStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3);
        Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opSerializable> begin_opSerializable(Ice.Optional<byte[]> p1);
        Ice.AsyncResult<Test.Callback_Initial_opSerializable> begin_opSerializable(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opSerializable(Ice.Optional<byte[]> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opSerializable(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<byte[]> end_opSerializable(out Ice.Optional<byte[]> p3, Ice.AsyncResult r__);

        bool opSerializable_async(Test.AMI_Initial_opSerializable cb__, Ice.Optional<byte[]> p1);
        bool opSerializable_async(Test.AMI_Initial_opSerializable cb__, Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3);
        Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opIntIntDict> begin_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1);
        Ice.AsyncResult<Test.Callback_Initial_opIntIntDict> begin_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> end_opIntIntDict(out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, Ice.AsyncResult r__);

        bool opIntIntDict_async(Test.AMI_Initial_opIntIntDict cb__, Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1);
        bool opIntIntDict_async(Test.AMI_Initial_opIntIntDict cb__, Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3);
        Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opStringIntDict> begin_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1);
        Ice.AsyncResult<Test.Callback_Initial_opStringIntDict> begin_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> end_opStringIntDict(out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, Ice.AsyncResult r__);

        bool opStringIntDict_async(Test.AMI_Initial_opStringIntDict cb__, Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1);
        bool opStringIntDict_async(Test.AMI_Initial_opStringIntDict cb__, Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__);

        void opClassAndUnknownOptional(Test.A p);
        void opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_opClassAndUnknownOptional> begin_opClassAndUnknownOptional(Test.A p);
        Ice.AsyncResult<Test.Callback_Initial_opClassAndUnknownOptional> begin_opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_opClassAndUnknownOptional(Test.A p, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_opClassAndUnknownOptional(Ice.AsyncResult r__);

        bool opClassAndUnknownOptional_async(Test.AMI_Initial_opClassAndUnknownOptional cb__, Test.A p);
        bool opClassAndUnknownOptional_async(Test.AMI_Initial_opClassAndUnknownOptional cb__, Test.A p, _System.Collections.Generic.Dictionary<string, string> ctx__);

        void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o);
        void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_sendOptionalClass> begin_sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o);
        Ice.AsyncResult<Test.Callback_Initial_sendOptionalClass> begin_sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_sendOptionalClass(Ice.AsyncResult r__);

        bool sendOptionalClass_async(Test.AMI_Initial_sendOptionalClass cb__, bool req, Ice.Optional<Test.OneOptional> o);
        bool sendOptionalClass_async(Test.AMI_Initial_sendOptionalClass cb__, bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__);

        void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o);
        void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_returnOptionalClass> begin_returnOptionalClass(bool req);
        Ice.AsyncResult<Test.Callback_Initial_returnOptionalClass> begin_returnOptionalClass(bool req, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_returnOptionalClass(bool req, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_returnOptionalClass(bool req, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_returnOptionalClass(out Ice.Optional<Test.OneOptional> o, Ice.AsyncResult r__);

        bool returnOptionalClass_async(Test.AMI_Initial_returnOptionalClass cb__, bool req);
        bool returnOptionalClass_async(Test.AMI_Initial_returnOptionalClass cb__, bool req, _System.Collections.Generic.Dictionary<string, string> ctx__);

        bool supportsRequiredParams();
        bool supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_supportsRequiredParams> begin_supportsRequiredParams();
        Ice.AsyncResult<Test.Callback_Initial_supportsRequiredParams> begin_supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_supportsRequiredParams(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_supportsRequiredParams(Ice.AsyncResult r__);

        bool supportsRequiredParams_async(Test.AMI_Initial_supportsRequiredParams cb__);
        bool supportsRequiredParams_async(Test.AMI_Initial_supportsRequiredParams cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

        bool supportsJavaSerializable();
        bool supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_supportsJavaSerializable> begin_supportsJavaSerializable();
        Ice.AsyncResult<Test.Callback_Initial_supportsJavaSerializable> begin_supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_supportsJavaSerializable(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_supportsJavaSerializable(Ice.AsyncResult r__);

        bool supportsJavaSerializable_async(Test.AMI_Initial_supportsJavaSerializable cb__);
        bool supportsJavaSerializable_async(Test.AMI_Initial_supportsJavaSerializable cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);

        bool supportsCsharpSerializable();
        bool supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Test.Callback_Initial_supportsCsharpSerializable> begin_supportsCsharpSerializable();
        Ice.AsyncResult<Test.Callback_Initial_supportsCsharpSerializable> begin_supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_supportsCsharpSerializable(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_supportsCsharpSerializable(Ice.AsyncResult r__);

        bool supportsCsharpSerializable_async(Test.AMI_Initial_supportsCsharpSerializable cb__);
        bool supportsCsharpSerializable_async(Test.AMI_Initial_supportsCsharpSerializable cb__, _System.Collections.Generic.Dictionary<string, string> ctx__);
    }
}

namespace Test
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface InitialOperations_
    {
        void shutdown(Ice.Current current__);

        Ice.Object pingPong(Ice.Object o, Ice.Current current__);

        void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3, Ice.Current current__);

        Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3, Ice.Current current__);

        Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3, Ice.Current current__);

        Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3, Ice.Current current__);

        Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3, Ice.Current current__);

        Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3, Ice.Current current__);

        Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3, Ice.Current current__);

        Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3, Ice.Current current__);

        Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3, Ice.Current current__);

        Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3, Ice.Current current__);

        Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3, Ice.Current current__);

        Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3, Ice.Current current__);

        Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3, Ice.Current current__);

        Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3, Ice.Current current__);

        Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, Ice.Current current__);

        Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3, Ice.Current current__);

        Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3, Ice.Current current__);

        Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3, Ice.Current current__);

        Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3, Ice.Current current__);

        Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3, Ice.Current current__);

        Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3, Ice.Current current__);

        Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3, Ice.Current current__);

        Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3, Ice.Current current__);

        Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, Ice.Current current__);

        Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3, Ice.Current current__);

        Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, Ice.Current current__);

        Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3, Ice.Current current__);

        Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, Ice.Current current__);

        Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, Ice.Current current__);

        Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, Ice.Current current__);

        void opClassAndUnknownOptional(Test.A p, Ice.Current current__);

        void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o, Ice.Current current__);

        bool supportsRequiredParams(Ice.Current current__);

        bool supportsJavaSerializable(Ice.Current current__);

        bool supportsCsharpSerializable(Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface InitialOperationsNC_
    {
        void shutdown();

        Ice.Object pingPong(Ice.Object o);

        void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);

        void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);

        void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o);

        Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3);

        Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3);

        Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3);

        Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3);

        Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3);

        Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3);

        Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3);

        Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3);

        Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3);

        Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3);

        Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3);

        Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3);

        Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3);

        Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3);

        Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3);

        Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3);

        Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3);

        Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3);

        Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3);

        Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3);

        Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3);

        Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3);

        Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3);

        Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3);

        Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3);

        Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3);

        Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3);

        Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3);

        Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3);

        Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3);

        void opClassAndUnknownOptional(Test.A p);

        void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o);

        void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o);

        bool supportsRequiredParams();

        bool supportsJavaSerializable();

        bool supportsCsharpSerializable();
    }
}

namespace Test
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OneOptionalPrxHelper : Ice.ObjectPrxHelperBase, OneOptionalPrx
    {
        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static OneOptionalPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OneOptionalPrx r = b as OneOptionalPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                OneOptionalPrxHelper h = new OneOptionalPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OneOptionalPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            OneOptionalPrx r = b as OneOptionalPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                OneOptionalPrxHelper h = new OneOptionalPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OneOptionalPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    OneOptionalPrxHelper h = new OneOptionalPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OneOptionalPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    OneOptionalPrxHelper h = new OneOptionalPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OneOptionalPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OneOptionalPrx r = b as OneOptionalPrx;
            if(r == null)
            {
                OneOptionalPrxHelper h = new OneOptionalPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OneOptionalPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            OneOptionalPrxHelper h = new OneOptionalPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Test::OneOptional"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new OneOptionalDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new OneOptionalDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, OneOptionalPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static OneOptionalPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                OneOptionalPrxHelper result = new OneOptionalPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        public static void write(Ice.OutputStream outS__, OneOptionalPrx v__)
        {
            outS__.writeProxy(v__);
        }

        public static OneOptionalPrx read(Ice.InputStream inS__)
        {
            Ice.ObjectPrx proxy = inS__.readProxy();
            if(proxy != null)
            {
                OneOptionalPrxHelper result = new OneOptionalPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class ByteSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, byte[] v__)
        {
            os__.writeByteSeq(v__);
        }

        public static byte[] read(IceInternal.BasicStream is__)
        {
            byte[] v__;
            v__ = is__.readByteSeq();
            return v__;
        }

        public static void write(Ice.OutputStream outS__, byte[] v__)
        {
            outS__.writeByteSeq(v__);
        }

        public static byte[] read(Ice.InputStream inS__)
        {
            byte[] v__;
            v__ = inS__.readByteSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class BoolSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, bool[] v__)
        {
            os__.writeBoolSeq(v__);
        }

        public static bool[] read(IceInternal.BasicStream is__)
        {
            bool[] v__;
            v__ = is__.readBoolSeq();
            return v__;
        }

        public static void write(Ice.OutputStream outS__, bool[] v__)
        {
            outS__.writeBoolSeq(v__);
        }

        public static bool[] read(Ice.InputStream inS__)
        {
            bool[] v__;
            v__ = inS__.readBoolSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class ShortSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, short[] v__)
        {
            os__.writeShortSeq(v__);
        }

        public static short[] read(IceInternal.BasicStream is__)
        {
            short[] v__;
            v__ = is__.readShortSeq();
            return v__;
        }

        public static void write(Ice.OutputStream outS__, short[] v__)
        {
            outS__.writeShortSeq(v__);
        }

        public static short[] read(Ice.InputStream inS__)
        {
            short[] v__;
            v__ = inS__.readShortSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class IntSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, int[] v__)
        {
            os__.writeIntSeq(v__);
        }

        public static int[] read(IceInternal.BasicStream is__)
        {
            int[] v__;
            v__ = is__.readIntSeq();
            return v__;
        }

        public static void write(Ice.OutputStream outS__, int[] v__)
        {
            outS__.writeIntSeq(v__);
        }

        public static int[] read(Ice.InputStream inS__)
        {
            int[] v__;
            v__ = inS__.readIntSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class LongSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, long[] v__)
        {
            os__.writeLongSeq(v__);
        }

        public static long[] read(IceInternal.BasicStream is__)
        {
            long[] v__;
            v__ = is__.readLongSeq();
            return v__;
        }

        public static void write(Ice.OutputStream outS__, long[] v__)
        {
            outS__.writeLongSeq(v__);
        }

        public static long[] read(Ice.InputStream inS__)
        {
            long[] v__;
            v__ = inS__.readLongSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class FloatSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, float[] v__)
        {
            os__.writeFloatSeq(v__);
        }

        public static float[] read(IceInternal.BasicStream is__)
        {
            float[] v__;
            v__ = is__.readFloatSeq();
            return v__;
        }

        public static void write(Ice.OutputStream outS__, float[] v__)
        {
            outS__.writeFloatSeq(v__);
        }

        public static float[] read(Ice.InputStream inS__)
        {
            float[] v__;
            v__ = inS__.readFloatSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class DoubleSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, double[] v__)
        {
            os__.writeDoubleSeq(v__);
        }

        public static double[] read(IceInternal.BasicStream is__)
        {
            double[] v__;
            v__ = is__.readDoubleSeq();
            return v__;
        }

        public static void write(Ice.OutputStream outS__, double[] v__)
        {
            outS__.writeDoubleSeq(v__);
        }

        public static double[] read(Ice.InputStream inS__)
        {
            double[] v__;
            v__ = inS__.readDoubleSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class StringSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, string[] v__)
        {
            os__.writeStringSeq(v__);
        }

        public static string[] read(IceInternal.BasicStream is__)
        {
            string[] v__;
            v__ = is__.readStringSeq();
            return v__;
        }

        public static void write(Ice.OutputStream outS__, string[] v__)
        {
            outS__.writeStringSeq(v__);
        }

        public static string[] read(Ice.InputStream inS__)
        {
            string[] v__;
            v__ = inS__.readStringSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class MyEnumSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, Test.MyEnum[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    os__.writeEnum((int)v__[ix__], 0);
                }
            }
        }

        public static Test.MyEnum[] read(IceInternal.BasicStream is__)
        {
            Test.MyEnum[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(1);
                v__ = new Test.MyEnum[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = (Test.MyEnum)is__.readEnum(0);
                }
            }
            return v__;
        }

        public static void write(Ice.OutputStream outS__, Test.MyEnum[] v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    outS__.writeEnum((int)v__[ix__], 0);
                }
            }
        }

        public static Test.MyEnum[] read(Ice.InputStream inS__)
        {
            Test.MyEnum[] v__;
            {
                int szx__ = inS__.readAndCheckSeqSize(1);
                v__ = new Test.MyEnum[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = (Test.MyEnum)inS__.readEnum(0);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class SmallStructSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, Test.SmallStruct[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    v__[ix__].write__(os__);
                }
            }
        }

        public static Test.SmallStruct[] read(IceInternal.BasicStream is__)
        {
            Test.SmallStruct[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(1);
                v__ = new Test.SmallStruct[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }

        public static void write(Ice.OutputStream outS__, Test.SmallStruct[] v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    v__[ix__].ice_write(outS__);
                }
            }
        }

        public static Test.SmallStruct[] read(Ice.InputStream inS__)
        {
            Test.SmallStruct[] v__;
            {
                int szx__ = inS__.readAndCheckSeqSize(1);
                v__ = new Test.SmallStruct[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__].ice_read(inS__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class SmallStructListHelper
    {
        public static void write(IceInternal.BasicStream os__, _System.Collections.Generic.List<Test.SmallStruct> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                for(int ix__ = 0; ix__ < v__.Count; ++ix__)
                {
                    v__[ix__].write__(os__);
                }
            }
        }

        public static _System.Collections.Generic.List<Test.SmallStruct> read(IceInternal.BasicStream is__)
        {
            _System.Collections.Generic.List<Test.SmallStruct> v__;
            {
                int szx__ = is__.readAndCheckSeqSize(1);
                v__ = new _System.Collections.Generic.List<Test.SmallStruct>(szx__);
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    Test.SmallStruct val__ = new Test.SmallStruct();
                    val__.read__(is__);
                    v__.Add(val__);
                }
            }
            return v__;
        }

        public static void write(Ice.OutputStream outS__, _System.Collections.Generic.List<Test.SmallStruct> v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Count);
                for(int ix__ = 0; ix__ < v__.Count; ++ix__)
                {
                    v__[ix__].ice_write(outS__);
                }
            }
        }

        public static _System.Collections.Generic.List<Test.SmallStruct> read(Ice.InputStream inS__)
        {
            _System.Collections.Generic.List<Test.SmallStruct> v__;
            {
                int szx__ = inS__.readAndCheckSeqSize(1);
                v__ = new _System.Collections.Generic.List<Test.SmallStruct>(szx__);
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    Test.SmallStruct val__ = new Test.SmallStruct();
                    val__.ice_read(inS__);
                    v__.Add(val__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class FixedStructSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, Test.FixedStruct[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    v__[ix__].write__(os__);
                }
            }
        }

        public static Test.FixedStruct[] read(IceInternal.BasicStream is__)
        {
            Test.FixedStruct[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(4);
                v__ = new Test.FixedStruct[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }

        public static void write(Ice.OutputStream outS__, Test.FixedStruct[] v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    v__[ix__].ice_write(outS__);
                }
            }
        }

        public static Test.FixedStruct[] read(Ice.InputStream inS__)
        {
            Test.FixedStruct[] v__;
            {
                int szx__ = inS__.readAndCheckSeqSize(4);
                v__ = new Test.FixedStruct[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__].ice_read(inS__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class FixedStructListHelper
    {
        public static void write(IceInternal.BasicStream os__, _System.Collections.Generic.LinkedList<Test.FixedStruct> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                _System.Collections.Generic.IEnumerator<Test.FixedStruct> e__ = v__.GetEnumerator();
                while(e__.MoveNext())
                {
                    e__.Current.write__(os__);
                }
            }
        }

        public static _System.Collections.Generic.LinkedList<Test.FixedStruct> read(IceInternal.BasicStream is__)
        {
            _System.Collections.Generic.LinkedList<Test.FixedStruct> v__;
            {
                int szx__ = is__.readAndCheckSeqSize(4);
                v__ = new _System.Collections.Generic.LinkedList<Test.FixedStruct>();
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    Test.FixedStruct val__ = new Test.FixedStruct();
                    val__.read__(is__);
                    v__.AddLast(val__);
                }
            }
            return v__;
        }

        public static void write(Ice.OutputStream outS__, _System.Collections.Generic.LinkedList<Test.FixedStruct> v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Count);
                _System.Collections.Generic.IEnumerator<Test.FixedStruct> e__ = v__.GetEnumerator();
                while(e__.MoveNext())
                {
                    e__.Current.ice_write(outS__);
                }
            }
        }

        public static _System.Collections.Generic.LinkedList<Test.FixedStruct> read(Ice.InputStream inS__)
        {
            _System.Collections.Generic.LinkedList<Test.FixedStruct> v__;
            {
                int szx__ = inS__.readAndCheckSeqSize(4);
                v__ = new _System.Collections.Generic.LinkedList<Test.FixedStruct>();
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    Test.FixedStruct val__ = new Test.FixedStruct();
                    val__.ice_read(inS__);
                    v__.AddLast(val__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class VarStructSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, Test.VarStruct[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Test.VarStruct() : v__[ix__]).write__(os__);
                }
            }
        }

        public static Test.VarStruct[] read(IceInternal.BasicStream is__)
        {
            Test.VarStruct[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(1);
                v__ = new Test.VarStruct[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Test.VarStruct();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }

        public static void write(Ice.OutputStream outS__, Test.VarStruct[] v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Test.VarStruct() : v__[ix__]).ice_write(outS__);
                }
            }
        }

        public static Test.VarStruct[] read(Ice.InputStream inS__)
        {
            Test.VarStruct[] v__;
            {
                int szx__ = inS__.readAndCheckSeqSize(1);
                v__ = new Test.VarStruct[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Test.VarStruct();
                    v__[ix__].ice_read(inS__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OneOptionalSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, Test.OneOptional[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    os__.writeObject(v__[ix__]);
                }
            }
        }

        public static Test.OneOptional[] read(IceInternal.BasicStream is__)
        {
            Test.OneOptional[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(1);
                v__ = new Test.OneOptional[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    IceInternal.ArrayPatcher<Test.OneOptional> spx = new IceInternal.ArrayPatcher<Test.OneOptional>("::Test::OneOptional", v__, ix__);
                    is__.readObject(spx);
                }
            }
            return v__;
        }

        public static void write(Ice.OutputStream outS__, Test.OneOptional[] v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    outS__.writeObject(v__[ix__]);
                }
            }
        }

        public static Test.OneOptional[] read(Ice.InputStream inS__)
        {
            Test.OneOptional[] v__;
            {
                int szx__ = inS__.readAndCheckSeqSize(1);
                v__ = new Test.OneOptional[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    IceInternal.ArrayPatcher<Test.OneOptional> spx = new IceInternal.ArrayPatcher<Test.OneOptional>("::Test::OneOptional", v__, ix__);
                    inS__.readObject(spx);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OneOptionalPrxSeqHelper
    {
        public static void write(IceInternal.BasicStream os__, Test.OneOptionalPrx[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    Test.OneOptionalPrxHelper.write__(os__, v__[ix__]);
                }
            }
        }

        public static Test.OneOptionalPrx[] read(IceInternal.BasicStream is__)
        {
            Test.OneOptionalPrx[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(2);
                v__ = new Test.OneOptionalPrx[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = Test.OneOptionalPrxHelper.read__(is__);
                }
            }
            return v__;
        }

        public static void write(Ice.OutputStream outS__, Test.OneOptionalPrx[] v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    Test.OneOptionalPrxHelper.write(outS__, v__[ix__]);
                }
            }
        }

        public static Test.OneOptionalPrx[] read(Ice.InputStream inS__)
        {
            Test.OneOptionalPrx[] v__;
            {
                int szx__ = inS__.readAndCheckSeqSize(2);
                v__ = new Test.OneOptionalPrx[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = Test.OneOptionalPrxHelper.read(inS__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class SerializableHelper
    {
        public static void write(IceInternal.BasicStream os__, byte[] v__)
        {
            os__.writeByteSeq(v__);
        }

        public static byte[] read(IceInternal.BasicStream is__)
        {
            byte[] v__;
            v__ = is__.readByteSeq();
            return v__;
        }

        public static void write(Ice.OutputStream outS__, byte[] v__)
        {
            outS__.writeByteSeq(v__);
        }

        public static byte[] read(Ice.InputStream inS__)
        {
            byte[] v__;
            v__ = inS__.readByteSeq();
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class IntIntDictHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<int, int> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<int, int> e__ in v__)
                {
                    os__.writeInt(e__.Key);
                    os__.writeInt(e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, int> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<int, int> r__ = new _System.Collections.Generic.Dictionary<int, int>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = is__.readInt();
                int v__;
                v__ = is__.readInt();
                r__[k__] = v__;
            }
            return r__;
        }

        public static void write(Ice.OutputStream outS__, _System.Collections.Generic.Dictionary<int, int> v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Count);
                foreach(_System.Collections.
                Generic.KeyValuePair<int, int> e__ in v__)
                {
                    outS__.writeInt(e__.Key);
                    outS__.writeInt(e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, int> read(Ice.InputStream inS__)
        {
            int sz__ = inS__.readSize();
            _System.Collections.Generic.Dictionary<int, int> r__ = new _System.Collections.Generic.Dictionary<int, int>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = inS__.readInt();
                int v__;
                v__ = inS__.readInt();
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class StringIntDictHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<string, int> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<string, int> e__ in v__)
                {
                    os__.writeString(e__.Key);
                    os__.writeInt(e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<string, int> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<string, int> r__ = new _System.Collections.Generic.Dictionary<string, int>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                string k__;
                k__ = is__.readString();
                int v__;
                v__ = is__.readInt();
                r__[k__] = v__;
            }
            return r__;
        }

        public static void write(Ice.OutputStream outS__, _System.Collections.Generic.Dictionary<string, int> v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Count);
                foreach(_System.Collections.
                Generic.KeyValuePair<string, int> e__ in v__)
                {
                    outS__.writeString(e__.Key);
                    outS__.writeInt(e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<string, int> read(Ice.InputStream inS__)
        {
            int sz__ = inS__.readSize();
            _System.Collections.Generic.Dictionary<string, int> r__ = new _System.Collections.Generic.Dictionary<string, int>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                string k__;
                k__ = inS__.readString();
                int v__;
                v__ = inS__.readInt();
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class IntEnumDictHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<int, Test.MyEnum> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<int, Test.MyEnum> e__ in v__)
                {
                    os__.writeInt(e__.Key);
                    os__.writeEnum((int)e__.Value, 0);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Test.MyEnum> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.MyEnum> r__ = new _System.Collections.Generic.Dictionary<int, Test.MyEnum>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = is__.readInt();
                Test.MyEnum v__;
                v__ = (Test.MyEnum)is__.readEnum(0);
                r__[k__] = v__;
            }
            return r__;
        }

        public static void write(Ice.OutputStream outS__, _System.Collections.Generic.Dictionary<int, Test.MyEnum> v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Count);
                foreach(_System.Collections.
                Generic.KeyValuePair<int, Test.MyEnum> e__ in v__)
                {
                    outS__.writeInt(e__.Key);
                    if((int)e__.Value < 0 || (int)e__.Value > 0)
                    {
                        throw new Ice.MarshalException("enumerator out of range");
                    }
                    outS__.writeEnum((int)e__.Value, 0);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Test.MyEnum> read(Ice.InputStream inS__)
        {
            int sz__ = inS__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.MyEnum> r__ = new _System.Collections.Generic.Dictionary<int, Test.MyEnum>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = inS__.readInt();
                Test.MyEnum v__;
                v__ = (Test.MyEnum)inS__.readEnum(0);
                if((int)v__ < 0 || (int)v__ > 0)
                {
                    throw new Ice.MarshalException("enumerator out of range");
                }
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class IntFixedStructDictHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<int, Test.FixedStruct> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<int, Test.FixedStruct> e__ in v__)
                {
                    os__.writeInt(e__.Key);
                    e__.Value.write__(os__);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Test.FixedStruct> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.FixedStruct> r__ = new _System.Collections.Generic.Dictionary<int, Test.FixedStruct>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = is__.readInt();
                Test.FixedStruct v__;
                v__ = new Test.FixedStruct();
                v__.read__(is__);
                r__[k__] = v__;
            }
            return r__;
        }

        public static void write(Ice.OutputStream outS__, _System.Collections.Generic.Dictionary<int, Test.FixedStruct> v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Count);
                foreach(_System.Collections.
                Generic.KeyValuePair<int, Test.FixedStruct> e__ in v__)
                {
                    outS__.writeInt(e__.Key);
                    e__.Value.ice_write(outS__);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Test.FixedStruct> read(Ice.InputStream inS__)
        {
            int sz__ = inS__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.FixedStruct> r__ = new _System.Collections.Generic.Dictionary<int, Test.FixedStruct>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = inS__.readInt();
                Test.FixedStruct v__;
                v__ = new Test.FixedStruct();
                v__.ice_read(inS__);
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class IntVarStructDictHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<int, Test.VarStruct> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<int, Test.VarStruct> e__ in v__)
                {
                    os__.writeInt(e__.Key);
                    if(e__.Value == null)
                    {
                        Test.VarStruct tmp__ = new Test.VarStruct();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        e__.Value.write__(os__);
                    }
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Test.VarStruct> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.VarStruct> r__ = new _System.Collections.Generic.Dictionary<int, Test.VarStruct>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = is__.readInt();
                Test.VarStruct v__;
                v__ = null;
                if(v__ == null)
                {
                    v__ = new Test.VarStruct();
                }
                v__.read__(is__);
                r__[k__] = v__;
            }
            return r__;
        }

        public static void write(Ice.OutputStream outS__, _System.Collections.Generic.Dictionary<int, Test.VarStruct> v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Count);
                foreach(_System.Collections.
                Generic.KeyValuePair<int, Test.VarStruct> e__ in v__)
                {
                    outS__.writeInt(e__.Key);
                    if(e__.Value == null)
                    {
                        Test.VarStruct tmp__ = new Test.VarStruct();
                        tmp__.ice_write(outS__);
                    }
                    else
                    {
                        e__.Value.ice_write(outS__);
                    }
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Test.VarStruct> read(Ice.InputStream inS__)
        {
            int sz__ = inS__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.VarStruct> r__ = new _System.Collections.Generic.Dictionary<int, Test.VarStruct>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = inS__.readInt();
                Test.VarStruct v__;
                v__ = null;
                if(v__ == null)
                {
                    v__ = new Test.VarStruct();
                }
                v__.ice_read(inS__);
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class IntOneOptionalDictHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<int, Test.OneOptional> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<int, Test.OneOptional> e__ in v__)
                {
                    os__.writeInt(e__.Key);
                    os__.writeObject(e__.Value);
                }
            }
        }

        public sealed class Patcher__ : IceInternal.Patcher
        {
            internal Patcher__(string type, _System.Collections.Generic.Dictionary<int, Test.OneOptional> m, int key) : base(type)
            {
                _m = m;
                _key = key;
            }

            public override void patch(Ice.Object v)
            {
                try
                {
                    _m[_key] = (Test.OneOptional)v;
                }
                catch(_System.InvalidCastException)
                {
                    IceInternal.Ex.throwUOE(type(), v.ice_id());
                }
            }

            private _System.Collections.Generic.Dictionary<int, Test.OneOptional> _m;
            private int _key;
        }

        public static _System.Collections.Generic.Dictionary<int, Test.OneOptional> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.OneOptional> r__ = new _System.Collections.Generic.Dictionary<int, Test.OneOptional>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = is__.readInt();
                is__.readObject(new Patcher__(Test.OneOptional.ice_staticId(), r__, k__));
            }
            return r__;
        }

        public static void write(Ice.OutputStream outS__, _System.Collections.Generic.Dictionary<int, Test.OneOptional> v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Count);
                foreach(_System.Collections.
                Generic.KeyValuePair<int, Test.OneOptional> e__ in v__)
                {
                    outS__.writeInt(e__.Key);
                    outS__.writeObject(e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Test.OneOptional> read(Ice.InputStream inS__)
        {
            int sz__ = inS__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.OneOptional> r__ = new _System.Collections.Generic.Dictionary<int, Test.OneOptional>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = inS__.readInt();
                inS__.readObject(new Patcher__(Test.OneOptional.ice_staticId(), r__, k__));
            }
            return r__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class IntOneOptionalPrxDictHelper
    {
        public static void write(IceInternal.BasicStream os__,
                                 _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx> v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Count);
                foreach(_System.Collections.Generic.KeyValuePair<int, Test.OneOptionalPrx> e__ in v__)
                {
                    os__.writeInt(e__.Key);
                    Test.OneOptionalPrxHelper.write__(os__, e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx> read(IceInternal.BasicStream is__)
        {
            int sz__ = is__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx> r__ = new _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = is__.readInt();
                Test.OneOptionalPrx v__;
                v__ = Test.OneOptionalPrxHelper.read__(is__);
                r__[k__] = v__;
            }
            return r__;
        }

        public static void write(Ice.OutputStream outS__, _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx> v__)
        {
            if(v__ == null)
            {
                outS__.writeSize(0);
            }
            else
            {
                outS__.writeSize(v__.Count);
                foreach(_System.Collections.
                Generic.KeyValuePair<int, Test.OneOptionalPrx> e__ in v__)
                {
                    outS__.writeInt(e__.Key);
                    Test.OneOptionalPrxHelper.write(outS__, e__.Value);
                }
            }
        }

        public static _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx> read(Ice.InputStream inS__)
        {
            int sz__ = inS__.readSize();
            _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx> r__ = new _System.Collections.Generic.Dictionary<int, Test.OneOptionalPrx>();
            for(int i__ = 0; i__ < sz__; ++i__)
            {
                int k__;
                k__ = inS__.readInt();
                Test.OneOptionalPrx v__;
                v__ = Test.OneOptionalPrxHelper.read(inS__);
                r__[k__] = v__;
            }
            return r__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class MultiOptionalPrxHelper : Ice.ObjectPrxHelperBase, MultiOptionalPrx
    {
        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static MultiOptionalPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MultiOptionalPrx r = b as MultiOptionalPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                MultiOptionalPrxHelper h = new MultiOptionalPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MultiOptionalPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            MultiOptionalPrx r = b as MultiOptionalPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                MultiOptionalPrxHelper h = new MultiOptionalPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MultiOptionalPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    MultiOptionalPrxHelper h = new MultiOptionalPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MultiOptionalPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    MultiOptionalPrxHelper h = new MultiOptionalPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MultiOptionalPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            MultiOptionalPrx r = b as MultiOptionalPrx;
            if(r == null)
            {
                MultiOptionalPrxHelper h = new MultiOptionalPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MultiOptionalPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            MultiOptionalPrxHelper h = new MultiOptionalPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Test::MultiOptional"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new MultiOptionalDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new MultiOptionalDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, MultiOptionalPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static MultiOptionalPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                MultiOptionalPrxHelper result = new MultiOptionalPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        public static void write(Ice.OutputStream outS__, MultiOptionalPrx v__)
        {
            outS__.writeProxy(v__);
        }

        public static MultiOptionalPrx read(Ice.InputStream inS__)
        {
            Ice.ObjectPrx proxy = inS__.readProxy();
            if(proxy != null)
            {
                MultiOptionalPrxHelper result = new MultiOptionalPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class APrxHelper : Ice.ObjectPrxHelperBase, APrx
    {
        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static APrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            APrx r = b as APrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                APrxHelper h = new APrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static APrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            APrx r = b as APrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                APrxHelper h = new APrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static APrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    APrxHelper h = new APrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static APrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    APrxHelper h = new APrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static APrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            APrx r = b as APrx;
            if(r == null)
            {
                APrxHelper h = new APrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static APrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            APrxHelper h = new APrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Test::A"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new ADelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new ADelD_();
        }

        public static void write__(IceInternal.BasicStream os__, APrx v__)
        {
            os__.writeProxy(v__);
        }

        public static APrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                APrxHelper result = new APrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        public static void write(Ice.OutputStream outS__, APrx v__)
        {
            outS__.writeProxy(v__);
        }

        public static APrx read(Ice.InputStream inS__)
        {
            Ice.ObjectPrx proxy = inS__.readProxy();
            if(proxy != null)
            {
                APrxHelper result = new APrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class BPrxHelper : Ice.ObjectPrxHelperBase, BPrx
    {
        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static BPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BPrx r = b as BPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                BPrxHelper h = new BPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            BPrx r = b as BPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                BPrxHelper h = new BPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    BPrxHelper h = new BPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    BPrxHelper h = new BPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static BPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            BPrx r = b as BPrx;
            if(r == null)
            {
                BPrxHelper h = new BPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static BPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            BPrxHelper h = new BPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Test::A",
            "::Test::B"
        };

        public static string ice_staticId()
        {
            return ids__[2];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new BDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new BDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, BPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static BPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                BPrxHelper result = new BPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        public static void write(Ice.OutputStream outS__, BPrx v__)
        {
            outS__.writeProxy(v__);
        }

        public static BPrx read(Ice.InputStream inS__)
        {
            Ice.ObjectPrx proxy = inS__.readProxy();
            if(proxy != null)
            {
                BPrxHelper result = new BPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class CPrxHelper : Ice.ObjectPrxHelperBase, CPrx
    {
        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static CPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CPrx r = b as CPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CPrxHelper h = new CPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CPrx r = b as CPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CPrxHelper h = new CPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CPrxHelper h = new CPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CPrxHelper h = new CPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CPrx r = b as CPrx;
            if(r == null)
            {
                CPrxHelper h = new CPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            CPrxHelper h = new CPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Test::A",
            "::Test::B",
            "::Test::C"
        };

        public static string ice_staticId()
        {
            return ids__[3];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new CDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new CDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, CPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static CPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                CPrxHelper result = new CPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        public static void write(Ice.OutputStream outS__, CPrx v__)
        {
            outS__.writeProxy(v__);
        }

        public static CPrx read(Ice.InputStream inS__)
        {
            Ice.ObjectPrx proxy = inS__.readProxy();
            if(proxy != null)
            {
                CPrxHelper result = new CPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class WDPrxHelper : Ice.ObjectPrxHelperBase, WDPrx
    {
        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static WDPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            WDPrx r = b as WDPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                WDPrxHelper h = new WDPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static WDPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            WDPrx r = b as WDPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                WDPrxHelper h = new WDPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static WDPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    WDPrxHelper h = new WDPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static WDPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    WDPrxHelper h = new WDPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static WDPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            WDPrx r = b as WDPrx;
            if(r == null)
            {
                WDPrxHelper h = new WDPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static WDPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            WDPrxHelper h = new WDPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Test::WD"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new WDDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new WDDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, WDPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static WDPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                WDPrxHelper result = new WDPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        public static void write(Ice.OutputStream outS__, WDPrx v__)
        {
            outS__.writeProxy(v__);
        }

        public static WDPrx read(Ice.InputStream inS__)
        {
            Ice.ObjectPrx proxy = inS__.readProxy();
            if(proxy != null)
            {
                WDPrxHelper result = new WDPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OptionalWithCustomPrxHelper : Ice.ObjectPrxHelperBase, OptionalWithCustomPrx
    {
        #region Asynchronous operations

        #endregion

        #region Checked and unchecked cast operations

        public static OptionalWithCustomPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OptionalWithCustomPrx r = b as OptionalWithCustomPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                OptionalWithCustomPrxHelper h = new OptionalWithCustomPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OptionalWithCustomPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            OptionalWithCustomPrx r = b as OptionalWithCustomPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                OptionalWithCustomPrxHelper h = new OptionalWithCustomPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OptionalWithCustomPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    OptionalWithCustomPrxHelper h = new OptionalWithCustomPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OptionalWithCustomPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    OptionalWithCustomPrxHelper h = new OptionalWithCustomPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static OptionalWithCustomPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            OptionalWithCustomPrx r = b as OptionalWithCustomPrx;
            if(r == null)
            {
                OptionalWithCustomPrxHelper h = new OptionalWithCustomPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static OptionalWithCustomPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            OptionalWithCustomPrxHelper h = new OptionalWithCustomPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Test::OptionalWithCustom"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new OptionalWithCustomDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new OptionalWithCustomDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, OptionalWithCustomPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static OptionalWithCustomPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                OptionalWithCustomPrxHelper result = new OptionalWithCustomPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        public static void write(Ice.OutputStream outS__, OptionalWithCustomPrx v__)
        {
            outS__.writeProxy(v__);
        }

        public static OptionalWithCustomPrx read(Ice.InputStream inS__)
        {
            Ice.ObjectPrx proxy = inS__.readProxy();
            if(proxy != null)
            {
                OptionalWithCustomPrxHelper result = new OptionalWithCustomPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class InitialPrxHelper : Ice.ObjectPrxHelperBase, InitialPrx
    {
        #region Synchronous operations

        public Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3)
        {
            return opBool(p1, out p3, null, false);
        }

        public Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opBool(p1, out p3, context__, true);
        }

        private Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opBool_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opBool_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opBool(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3)
        {
            return opBoolSeq(p1, out p3, null, false);
        }

        public Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opBoolSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opBoolSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opBoolSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opBoolSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3)
        {
            return opByte(p1, out p3, null, false);
        }

        public Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opByte(p1, out p3, context__, true);
        }

        private Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opByte_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opByte_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opByte(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3)
        {
            return opByteSeq(p1, out p3, null, false);
        }

        public Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opByteSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opByteSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opByteSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opByteSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void opClassAndUnknownOptional(Test.A p)
        {
            opClassAndUnknownOptional(p, null, false);
        }

        public void opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            opClassAndUnknownOptional(p, context__, true);
        }

        private void opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opClassAndUnknownOptional_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        del__.opClassAndUnknownOptional(p, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            opDerivedException(a, b, o, null, false);
        }

        public void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            opDerivedException(a, b, o, context__, true);
        }

        private void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opDerivedException_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opDerivedException_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        del__.opDerivedException(a, b, o, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3)
        {
            return opDouble(p1, out p3, null, false);
        }

        public Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opDouble(p1, out p3, context__, true);
        }

        private Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opDouble_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opDouble_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opDouble(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3)
        {
            return opDoubleSeq(p1, out p3, null, false);
        }

        public Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opDoubleSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opDoubleSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opDoubleSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opDoubleSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3)
        {
            return opFixedStruct(p1, out p3, null, false);
        }

        public Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opFixedStruct(p1, out p3, context__, true);
        }

        private Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opFixedStruct_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opFixedStruct_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opFixedStruct(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3)
        {
            return opFixedStructList(p1, out p3, null, false);
        }

        public Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opFixedStructList(p1, out p3, context__, true);
        }

        private Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opFixedStructList_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opFixedStructList_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opFixedStructList(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3)
        {
            return opFixedStructSeq(p1, out p3, null, false);
        }

        public Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opFixedStructSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opFixedStructSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opFixedStructSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opFixedStructSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3)
        {
            return opFloat(p1, out p3, null, false);
        }

        public Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opFloat(p1, out p3, context__, true);
        }

        private Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opFloat_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opFloat_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opFloat(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3)
        {
            return opFloatSeq(p1, out p3, null, false);
        }

        public Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opFloatSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opFloatSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opFloatSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opFloatSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3)
        {
            return opInt(p1, out p3, null, false);
        }

        public Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opInt(p1, out p3, context__, true);
        }

        private Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opInt_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opInt_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opInt(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3)
        {
            return opIntIntDict(p1, out p3, null, false);
        }

        public Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opIntIntDict(p1, out p3, context__, true);
        }

        private Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opIntIntDict_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opIntIntDict_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opIntIntDict(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3)
        {
            return opIntSeq(p1, out p3, null, false);
        }

        public Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opIntSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opIntSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opIntSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opIntSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3)
        {
            return opLong(p1, out p3, null, false);
        }

        public Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opLong(p1, out p3, context__, true);
        }

        private Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opLong_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opLong_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opLong(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3)
        {
            return opLongSeq(p1, out p3, null, false);
        }

        public Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opLongSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opLongSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opLongSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opLongSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3)
        {
            return opMyEnum(p1, out p3, null, false);
        }

        public Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opMyEnum(p1, out p3, context__, true);
        }

        private Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opMyEnum_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opMyEnum_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opMyEnum(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3)
        {
            return opOneOptional(p1, out p3, null, false);
        }

        public Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opOneOptional(p1, out p3, context__, true);
        }

        private Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opOneOptional_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opOneOptional_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opOneOptional(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3)
        {
            return opOneOptionalProxy(p1, out p3, null, false);
        }

        public Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opOneOptionalProxy(p1, out p3, context__, true);
        }

        private Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opOneOptionalProxy_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opOneOptionalProxy_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opOneOptionalProxy(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            opOptionalException(a, b, o, null, false);
        }

        public void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            opOptionalException(a, b, o, context__, true);
        }

        private void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opOptionalException_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opOptionalException_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        del__.opOptionalException(a, b, o, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            opRequiredException(a, b, o, null, false);
        }

        public void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            opRequiredException(a, b, o, context__, true);
        }

        private void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opRequiredException_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opRequiredException_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        del__.opRequiredException(a, b, o, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3)
        {
            return opSerializable(p1, out p3, null, false);
        }

        public Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opSerializable(p1, out p3, context__, true);
        }

        private Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opSerializable_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opSerializable_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opSerializable(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3)
        {
            return opShort(p1, out p3, null, false);
        }

        public Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opShort(p1, out p3, context__, true);
        }

        private Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opShort_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opShort_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opShort(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3)
        {
            return opShortSeq(p1, out p3, null, false);
        }

        public Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opShortSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opShortSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opShortSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opShortSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3)
        {
            return opSmallStruct(p1, out p3, null, false);
        }

        public Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opSmallStruct(p1, out p3, context__, true);
        }

        private Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opSmallStruct_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opSmallStruct_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opSmallStruct(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3)
        {
            return opSmallStructList(p1, out p3, null, false);
        }

        public Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opSmallStructList(p1, out p3, context__, true);
        }

        private Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opSmallStructList_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opSmallStructList_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opSmallStructList(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3)
        {
            return opSmallStructSeq(p1, out p3, null, false);
        }

        public Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opSmallStructSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opSmallStructSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opSmallStructSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opSmallStructSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3)
        {
            return opString(p1, out p3, null, false);
        }

        public Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opString(p1, out p3, context__, true);
        }

        private Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opString_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opString_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opString(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3)
        {
            return opStringIntDict(p1, out p3, null, false);
        }

        public Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opStringIntDict(p1, out p3, context__, true);
        }

        private Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opStringIntDict_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opStringIntDict_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opStringIntDict(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3)
        {
            return opStringSeq(p1, out p3, null, false);
        }

        public Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opStringSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opStringSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opStringSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opStringSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3)
        {
            return opVarStruct(p1, out p3, null, false);
        }

        public Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opVarStruct(p1, out p3, context__, true);
        }

        private Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opVarStruct_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opVarStruct_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opVarStruct(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3)
        {
            return opVarStructSeq(p1, out p3, null, false);
        }

        public Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return opVarStructSeq(p1, out p3, context__, true);
        }

        private Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __opVarStructSeq_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__opVarStructSeq_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.opVarStructSeq(p1, out p3, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public Ice.Object pingPong(Ice.Object o)
        {
            return pingPong(o, null, false);
        }

        public Ice.Object pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return pingPong(o, context__, true);
        }

        private Ice.Object pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __pingPong_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__pingPong_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.pingPong(o, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o)
        {
            returnOptionalClass(req, out o, null, false);
        }

        public void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            returnOptionalClass(req, out o, context__, true);
        }

        private void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __returnOptionalClass_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__returnOptionalClass_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        del__.returnOptionalClass(req, out o, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o)
        {
            sendOptionalClass(req, o, null, false);
        }

        public void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            sendOptionalClass(req, o, context__, true);
        }

        private void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __sendOptionalClass_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        del__.sendOptionalClass(req, o, context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public void shutdown()
        {
            shutdown(null, false);
        }

        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            shutdown(context__, true);
        }

        private void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __shutdown_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        del__.shutdown(context__, observer__);
                        return;
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public bool supportsCsharpSerializable()
        {
            return supportsCsharpSerializable(null, false);
        }

        public bool supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return supportsCsharpSerializable(context__, true);
        }

        private bool supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __supportsCsharpSerializable_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__supportsCsharpSerializable_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.supportsCsharpSerializable(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public bool supportsJavaSerializable()
        {
            return supportsJavaSerializable(null, false);
        }

        public bool supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return supportsJavaSerializable(context__, true);
        }

        private bool supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __supportsJavaSerializable_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__supportsJavaSerializable_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.supportsJavaSerializable(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        public bool supportsRequiredParams()
        {
            return supportsRequiredParams(null, false);
        }

        public bool supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return supportsRequiredParams(context__, true);
        }

        private bool supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __supportsRequiredParams_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__supportsRequiredParams_name);
                        delBase__ = getDelegate__(false);
                        InitialDel_ del__ = (InitialDel_)delBase__;
                        return del__.supportsRequiredParams(context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Test.Callback_Initial_opBool> begin_opBool(Ice.Optional<bool> p1)
        {
            return begin_opBool(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opBool> begin_opBool(Ice.Optional<bool> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opBool(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opBool(Ice.Optional<bool> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opBool(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opBool(Ice.Optional<bool> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opBool(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opBool_name = "opBool";

        public Ice.Optional<bool> end_opBool(out Ice.Optional<bool> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opBool_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<bool> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readBool(1);
                p3 = is__.readBool(3);
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opBool> begin_opBool(Ice.Optional<bool> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opBool_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opBool> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opBool>(this, __opBool_name, opBool_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opBool_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeBool(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opBool_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opBool cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<bool> p3;
            Ice.Optional<bool> ret__;
            try
            {
                ret__ = end_opBool(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opBool_async(Test.AMI_Initial_opBool cb__, Ice.Optional<bool> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opBool> result__;
            try
            {
                checkTwowayOnly__(__opBool_name);
                result__ = begin_opBool(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opBool>(this, __opBool_name, opBool_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opBool_async(Test.AMI_Initial_opBool cb__, Ice.Optional<bool> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opBool> result__;
            try
            {
                checkTwowayOnly__(__opBool_name);
                result__ = begin_opBool(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opBool>(this, __opBool_name, opBool_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opBoolSeq> begin_opBoolSeq(Ice.Optional<bool[]> p1)
        {
            return begin_opBoolSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opBoolSeq> begin_opBoolSeq(Ice.Optional<bool[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opBoolSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opBoolSeq(Ice.Optional<bool[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opBoolSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opBoolSeq(Ice.Optional<bool[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opBoolSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opBoolSeq_name = "opBoolSeq";

        public Ice.Optional<bool[]> end_opBoolSeq(out Ice.Optional<bool[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opBoolSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<bool[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    bool[] tmpVal__;
                    tmpVal__ = Test.BoolSeqHelper.read(is__);
                    ret__ = new Ice.Optional<bool[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<bool[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    bool[] tmpVal__;
                    tmpVal__ = Test.BoolSeqHelper.read(is__);
                    p3 = new Ice.Optional<bool[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<bool[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opBoolSeq> begin_opBoolSeq(Ice.Optional<bool[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opBoolSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opBoolSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opBoolSeq>(this, __opBoolSeq_name, opBoolSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opBoolSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeBoolSeq(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opBoolSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opBoolSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<bool[]> p3;
            Ice.Optional<bool[]> ret__;
            try
            {
                ret__ = end_opBoolSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opBoolSeq_async(Test.AMI_Initial_opBoolSeq cb__, Ice.Optional<bool[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opBoolSeq> result__;
            try
            {
                checkTwowayOnly__(__opBoolSeq_name);
                result__ = begin_opBoolSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opBoolSeq>(this, __opBoolSeq_name, opBoolSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opBoolSeq_async(Test.AMI_Initial_opBoolSeq cb__, Ice.Optional<bool[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opBoolSeq> result__;
            try
            {
                checkTwowayOnly__(__opBoolSeq_name);
                result__ = begin_opBoolSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opBoolSeq>(this, __opBoolSeq_name, opBoolSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opByte> begin_opByte(Ice.Optional<byte> p1)
        {
            return begin_opByte(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opByte> begin_opByte(Ice.Optional<byte> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opByte(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opByte(Ice.Optional<byte> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opByte(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opByte(Ice.Optional<byte> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opByte(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opByte_name = "opByte";

        public Ice.Optional<byte> end_opByte(out Ice.Optional<byte> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opByte_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<byte> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readByte(1);
                p3 = is__.readByte(3);
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opByte> begin_opByte(Ice.Optional<byte> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opByte_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opByte> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opByte>(this, __opByte_name, opByte_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opByte_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeByte(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opByte_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opByte cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<byte> p3;
            Ice.Optional<byte> ret__;
            try
            {
                ret__ = end_opByte(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opByte_async(Test.AMI_Initial_opByte cb__, Ice.Optional<byte> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opByte> result__;
            try
            {
                checkTwowayOnly__(__opByte_name);
                result__ = begin_opByte(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opByte>(this, __opByte_name, opByte_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opByte_async(Test.AMI_Initial_opByte cb__, Ice.Optional<byte> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opByte> result__;
            try
            {
                checkTwowayOnly__(__opByte_name);
                result__ = begin_opByte(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opByte>(this, __opByte_name, opByte_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opByteSeq> begin_opByteSeq(Ice.Optional<byte[]> p1)
        {
            return begin_opByteSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opByteSeq> begin_opByteSeq(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opByteSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opByteSeq(Ice.Optional<byte[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opByteSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opByteSeq(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opByteSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opByteSeq_name = "opByteSeq";

        public Ice.Optional<byte[]> end_opByteSeq(out Ice.Optional<byte[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opByteSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<byte[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    byte[] tmpVal__;
                    tmpVal__ = Test.ByteSeqHelper.read(is__);
                    ret__ = new Ice.Optional<byte[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<byte[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    byte[] tmpVal__;
                    tmpVal__ = Test.ByteSeqHelper.read(is__);
                    p3 = new Ice.Optional<byte[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<byte[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opByteSeq> begin_opByteSeq(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opByteSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opByteSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opByteSeq>(this, __opByteSeq_name, opByteSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opByteSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeByteSeq(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opByteSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opByteSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<byte[]> p3;
            Ice.Optional<byte[]> ret__;
            try
            {
                ret__ = end_opByteSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opByteSeq_async(Test.AMI_Initial_opByteSeq cb__, Ice.Optional<byte[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opByteSeq> result__;
            try
            {
                checkTwowayOnly__(__opByteSeq_name);
                result__ = begin_opByteSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opByteSeq>(this, __opByteSeq_name, opByteSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opByteSeq_async(Test.AMI_Initial_opByteSeq cb__, Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opByteSeq> result__;
            try
            {
                checkTwowayOnly__(__opByteSeq_name);
                result__ = begin_opByteSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opByteSeq>(this, __opByteSeq_name, opByteSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opClassAndUnknownOptional> begin_opClassAndUnknownOptional(Test.A p)
        {
            return begin_opClassAndUnknownOptional(p, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opClassAndUnknownOptional> begin_opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opClassAndUnknownOptional(p, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opClassAndUnknownOptional(Test.A p, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opClassAndUnknownOptional(p, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opClassAndUnknownOptional(p, ctx__, true, cb__, cookie__);
        }

        private const string __opClassAndUnknownOptional_name = "opClassAndUnknownOptional";

        public void end_opClassAndUnknownOptional(Ice.AsyncResult r__)
        {
            end__(r__, __opClassAndUnknownOptional_name);
        }

        private Ice.AsyncResult<Test.Callback_Initial_opClassAndUnknownOptional> begin_opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Test.Callback_Initial_opClassAndUnknownOptional> result__ = new IceInternal.OnewayOutgoingAsync<Test.Callback_Initial_opClassAndUnknownOptional>(this, __opClassAndUnknownOptional_name, opClassAndUnknownOptional_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opClassAndUnknownOptional_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeObject(p);
                os__.writePendingObjects();
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opClassAndUnknownOptional_completed__(Test.Callback_Initial_opClassAndUnknownOptional cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public bool opClassAndUnknownOptional_async(Test.AMI_Initial_opClassAndUnknownOptional cb__, Test.A p)
        {
            Ice.AsyncResult<Test.Callback_Initial_opClassAndUnknownOptional> result__ = begin_opClassAndUnknownOptional(p);
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opClassAndUnknownOptional_async(Test.AMI_Initial_opClassAndUnknownOptional cb__, Test.A p, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opClassAndUnknownOptional> result__ = begin_opClassAndUnknownOptional(p, ctx__);
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opDerivedException> begin_opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            return begin_opDerivedException(a, b, o, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opDerivedException> begin_opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opDerivedException(a, b, o, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opDerivedException(a, b, o, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opDerivedException(a, b, o, ctx__, true, cb__, cookie__);
        }

        private const string __opDerivedException_name = "opDerivedException";

        public void end_opDerivedException(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opDerivedException_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Test.OptionalException)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                outAsync__.readEmptyParams__();
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opDerivedException> begin_opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opDerivedException_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDerivedException> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDerivedException>(this, __opDerivedException_name, opDerivedException_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opDerivedException_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(1, a);
                os__.writeString(2, b);
                os__.writeObject(3, o);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opDerivedException_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opDerivedException cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_opDerivedException(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public bool opDerivedException_async(Test.AMI_Initial_opDerivedException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            Ice.AsyncResult<Test.Callback_Initial_opDerivedException> result__;
            try
            {
                checkTwowayOnly__(__opDerivedException_name);
                result__ = begin_opDerivedException(a, b, o);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDerivedException>(this, __opDerivedException_name, opDerivedException_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opDerivedException_async(Test.AMI_Initial_opDerivedException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opDerivedException> result__;
            try
            {
                checkTwowayOnly__(__opDerivedException_name);
                result__ = begin_opDerivedException(a, b, o, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDerivedException>(this, __opDerivedException_name, opDerivedException_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opDouble> begin_opDouble(Ice.Optional<double> p1)
        {
            return begin_opDouble(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opDouble> begin_opDouble(Ice.Optional<double> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opDouble(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opDouble(Ice.Optional<double> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opDouble(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opDouble(Ice.Optional<double> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opDouble(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opDouble_name = "opDouble";

        public Ice.Optional<double> end_opDouble(out Ice.Optional<double> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opDouble_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<double> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readDouble(1);
                p3 = is__.readDouble(3);
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opDouble> begin_opDouble(Ice.Optional<double> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opDouble_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDouble> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDouble>(this, __opDouble_name, opDouble_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opDouble_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeDouble(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opDouble_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opDouble cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<double> p3;
            Ice.Optional<double> ret__;
            try
            {
                ret__ = end_opDouble(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opDouble_async(Test.AMI_Initial_opDouble cb__, Ice.Optional<double> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opDouble> result__;
            try
            {
                checkTwowayOnly__(__opDouble_name);
                result__ = begin_opDouble(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDouble>(this, __opDouble_name, opDouble_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opDouble_async(Test.AMI_Initial_opDouble cb__, Ice.Optional<double> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opDouble> result__;
            try
            {
                checkTwowayOnly__(__opDouble_name);
                result__ = begin_opDouble(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDouble>(this, __opDouble_name, opDouble_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opDoubleSeq> begin_opDoubleSeq(Ice.Optional<double[]> p1)
        {
            return begin_opDoubleSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opDoubleSeq> begin_opDoubleSeq(Ice.Optional<double[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opDoubleSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opDoubleSeq(Ice.Optional<double[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opDoubleSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opDoubleSeq(Ice.Optional<double[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opDoubleSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opDoubleSeq_name = "opDoubleSeq";

        public Ice.Optional<double[]> end_opDoubleSeq(out Ice.Optional<double[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opDoubleSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<double[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    double[] tmpVal__;
                    tmpVal__ = Test.DoubleSeqHelper.read(is__);
                    ret__ = new Ice.Optional<double[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<double[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    double[] tmpVal__;
                    tmpVal__ = Test.DoubleSeqHelper.read(is__);
                    p3 = new Ice.Optional<double[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<double[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opDoubleSeq> begin_opDoubleSeq(Ice.Optional<double[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opDoubleSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDoubleSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDoubleSeq>(this, __opDoubleSeq_name, opDoubleSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opDoubleSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeDoubleSeq(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opDoubleSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opDoubleSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<double[]> p3;
            Ice.Optional<double[]> ret__;
            try
            {
                ret__ = end_opDoubleSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opDoubleSeq_async(Test.AMI_Initial_opDoubleSeq cb__, Ice.Optional<double[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opDoubleSeq> result__;
            try
            {
                checkTwowayOnly__(__opDoubleSeq_name);
                result__ = begin_opDoubleSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDoubleSeq>(this, __opDoubleSeq_name, opDoubleSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opDoubleSeq_async(Test.AMI_Initial_opDoubleSeq cb__, Ice.Optional<double[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opDoubleSeq> result__;
            try
            {
                checkTwowayOnly__(__opDoubleSeq_name);
                result__ = begin_opDoubleSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opDoubleSeq>(this, __opDoubleSeq_name, opDoubleSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFixedStruct> begin_opFixedStruct(Ice.Optional<Test.FixedStruct> p1)
        {
            return begin_opFixedStruct(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFixedStruct> begin_opFixedStruct(Ice.Optional<Test.FixedStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opFixedStruct(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opFixedStruct(Ice.Optional<Test.FixedStruct> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFixedStruct(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opFixedStruct(Ice.Optional<Test.FixedStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFixedStruct(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opFixedStruct_name = "opFixedStruct";

        public Ice.Optional<Test.FixedStruct> end_opFixedStruct(out Ice.Optional<Test.FixedStruct> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opFixedStruct_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<Test.FixedStruct> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    Test.FixedStruct tmpVal__ = new Test.FixedStruct();
                    tmpVal__.read__(is__);
                    ret__ = new Ice.Optional<Test.FixedStruct>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<Test.FixedStruct>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    Test.FixedStruct tmpVal__ = new Test.FixedStruct();
                    tmpVal__.read__(is__);
                    p3 = new Ice.Optional<Test.FixedStruct>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<Test.FixedStruct>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opFixedStruct> begin_opFixedStruct(Ice.Optional<Test.FixedStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opFixedStruct_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStruct> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStruct>(this, __opFixedStruct_name, opFixedStruct_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opFixedStruct_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                {
                    os__.writeSize(4);
                    p1.Value.write__(os__);
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opFixedStruct_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opFixedStruct cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.FixedStruct> p3;
            Ice.Optional<Test.FixedStruct> ret__;
            try
            {
                ret__ = end_opFixedStruct(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opFixedStruct_async(Test.AMI_Initial_opFixedStruct cb__, Ice.Optional<Test.FixedStruct> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFixedStruct> result__;
            try
            {
                checkTwowayOnly__(__opFixedStruct_name);
                result__ = begin_opFixedStruct(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStruct>(this, __opFixedStruct_name, opFixedStruct_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opFixedStruct_async(Test.AMI_Initial_opFixedStruct cb__, Ice.Optional<Test.FixedStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFixedStruct> result__;
            try
            {
                checkTwowayOnly__(__opFixedStruct_name);
                result__ = begin_opFixedStruct(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStruct>(this, __opFixedStruct_name, opFixedStruct_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFixedStructList> begin_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1)
        {
            return begin_opFixedStructList(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFixedStructList> begin_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opFixedStructList(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFixedStructList(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFixedStructList(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opFixedStructList_name = "opFixedStructList";

        public Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> end_opFixedStructList(out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opFixedStructList_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    _System.Collections.Generic.LinkedList<Test.FixedStruct> tmpVal__;
                    tmpVal__ = Test.FixedStructListHelper.read(is__);
                    ret__ = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    _System.Collections.Generic.LinkedList<Test.FixedStruct> tmpVal__;
                    tmpVal__ = Test.FixedStructListHelper.read(is__);
                    p3 = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opFixedStructList> begin_opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opFixedStructList_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStructList> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStructList>(this, __opFixedStructList_name, opFixedStructList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opFixedStructList_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                {
                    os__.writeSize(p1.Value == null ? 1 : p1.Value.Count * 4 + (p1.Value.Count > 254 ? 5 : 1));
                    Test.FixedStructListHelper.write(os__, p1.Value);
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opFixedStructList_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opFixedStructList cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3;
            Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> ret__;
            try
            {
                ret__ = end_opFixedStructList(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opFixedStructList_async(Test.AMI_Initial_opFixedStructList cb__, Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFixedStructList> result__;
            try
            {
                checkTwowayOnly__(__opFixedStructList_name);
                result__ = begin_opFixedStructList(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStructList>(this, __opFixedStructList_name, opFixedStructList_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opFixedStructList_async(Test.AMI_Initial_opFixedStructList cb__, Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFixedStructList> result__;
            try
            {
                checkTwowayOnly__(__opFixedStructList_name);
                result__ = begin_opFixedStructList(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStructList>(this, __opFixedStructList_name, opFixedStructList_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFixedStructSeq> begin_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1)
        {
            return begin_opFixedStructSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFixedStructSeq> begin_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opFixedStructSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFixedStructSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFixedStructSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opFixedStructSeq_name = "opFixedStructSeq";

        public Ice.Optional<Test.FixedStruct[]> end_opFixedStructSeq(out Ice.Optional<Test.FixedStruct[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opFixedStructSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<Test.FixedStruct[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    Test.FixedStruct[] tmpVal__;
                    tmpVal__ = Test.FixedStructSeqHelper.read(is__);
                    ret__ = new Ice.Optional<Test.FixedStruct[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<Test.FixedStruct[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    Test.FixedStruct[] tmpVal__;
                    tmpVal__ = Test.FixedStructSeqHelper.read(is__);
                    p3 = new Ice.Optional<Test.FixedStruct[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<Test.FixedStruct[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opFixedStructSeq> begin_opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opFixedStructSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStructSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStructSeq>(this, __opFixedStructSeq_name, opFixedStructSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opFixedStructSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                {
                    os__.writeSize(p1.Value == null ? 1 : p1.Value.Length * 4 + (p1.Value.Length > 254 ? 5 : 1));
                    Test.FixedStructSeqHelper.write(os__, p1.Value);
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opFixedStructSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opFixedStructSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.FixedStruct[]> p3;
            Ice.Optional<Test.FixedStruct[]> ret__;
            try
            {
                ret__ = end_opFixedStructSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opFixedStructSeq_async(Test.AMI_Initial_opFixedStructSeq cb__, Ice.Optional<Test.FixedStruct[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFixedStructSeq> result__;
            try
            {
                checkTwowayOnly__(__opFixedStructSeq_name);
                result__ = begin_opFixedStructSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStructSeq>(this, __opFixedStructSeq_name, opFixedStructSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opFixedStructSeq_async(Test.AMI_Initial_opFixedStructSeq cb__, Ice.Optional<Test.FixedStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFixedStructSeq> result__;
            try
            {
                checkTwowayOnly__(__opFixedStructSeq_name);
                result__ = begin_opFixedStructSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFixedStructSeq>(this, __opFixedStructSeq_name, opFixedStructSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFloat> begin_opFloat(Ice.Optional<float> p1)
        {
            return begin_opFloat(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFloat> begin_opFloat(Ice.Optional<float> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opFloat(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opFloat(Ice.Optional<float> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFloat(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opFloat(Ice.Optional<float> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFloat(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opFloat_name = "opFloat";

        public Ice.Optional<float> end_opFloat(out Ice.Optional<float> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opFloat_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<float> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readFloat(1);
                p3 = is__.readFloat(3);
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opFloat> begin_opFloat(Ice.Optional<float> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opFloat_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFloat> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFloat>(this, __opFloat_name, opFloat_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opFloat_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeFloat(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opFloat_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opFloat cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<float> p3;
            Ice.Optional<float> ret__;
            try
            {
                ret__ = end_opFloat(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opFloat_async(Test.AMI_Initial_opFloat cb__, Ice.Optional<float> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFloat> result__;
            try
            {
                checkTwowayOnly__(__opFloat_name);
                result__ = begin_opFloat(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFloat>(this, __opFloat_name, opFloat_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opFloat_async(Test.AMI_Initial_opFloat cb__, Ice.Optional<float> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFloat> result__;
            try
            {
                checkTwowayOnly__(__opFloat_name);
                result__ = begin_opFloat(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFloat>(this, __opFloat_name, opFloat_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFloatSeq> begin_opFloatSeq(Ice.Optional<float[]> p1)
        {
            return begin_opFloatSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opFloatSeq> begin_opFloatSeq(Ice.Optional<float[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opFloatSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opFloatSeq(Ice.Optional<float[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFloatSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opFloatSeq(Ice.Optional<float[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opFloatSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opFloatSeq_name = "opFloatSeq";

        public Ice.Optional<float[]> end_opFloatSeq(out Ice.Optional<float[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opFloatSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<float[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    float[] tmpVal__;
                    tmpVal__ = Test.FloatSeqHelper.read(is__);
                    ret__ = new Ice.Optional<float[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<float[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    float[] tmpVal__;
                    tmpVal__ = Test.FloatSeqHelper.read(is__);
                    p3 = new Ice.Optional<float[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<float[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opFloatSeq> begin_opFloatSeq(Ice.Optional<float[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opFloatSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFloatSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFloatSeq>(this, __opFloatSeq_name, opFloatSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opFloatSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeFloatSeq(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opFloatSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opFloatSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<float[]> p3;
            Ice.Optional<float[]> ret__;
            try
            {
                ret__ = end_opFloatSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opFloatSeq_async(Test.AMI_Initial_opFloatSeq cb__, Ice.Optional<float[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFloatSeq> result__;
            try
            {
                checkTwowayOnly__(__opFloatSeq_name);
                result__ = begin_opFloatSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFloatSeq>(this, __opFloatSeq_name, opFloatSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opFloatSeq_async(Test.AMI_Initial_opFloatSeq cb__, Ice.Optional<float[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opFloatSeq> result__;
            try
            {
                checkTwowayOnly__(__opFloatSeq_name);
                result__ = begin_opFloatSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opFloatSeq>(this, __opFloatSeq_name, opFloatSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opInt> begin_opInt(Ice.Optional<int> p1)
        {
            return begin_opInt(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opInt> begin_opInt(Ice.Optional<int> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opInt(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opInt(Ice.Optional<int> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opInt(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opInt(Ice.Optional<int> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opInt(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opInt_name = "opInt";

        public Ice.Optional<int> end_opInt(out Ice.Optional<int> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opInt_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<int> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readInt(1);
                p3 = is__.readInt(3);
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opInt> begin_opInt(Ice.Optional<int> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opInt_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opInt> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opInt>(this, __opInt_name, opInt_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opInt_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opInt_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opInt cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<int> p3;
            Ice.Optional<int> ret__;
            try
            {
                ret__ = end_opInt(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opInt_async(Test.AMI_Initial_opInt cb__, Ice.Optional<int> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opInt> result__;
            try
            {
                checkTwowayOnly__(__opInt_name);
                result__ = begin_opInt(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opInt>(this, __opInt_name, opInt_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opInt_async(Test.AMI_Initial_opInt cb__, Ice.Optional<int> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opInt> result__;
            try
            {
                checkTwowayOnly__(__opInt_name);
                result__ = begin_opInt(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opInt>(this, __opInt_name, opInt_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opIntIntDict> begin_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1)
        {
            return begin_opIntIntDict(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opIntIntDict> begin_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opIntIntDict(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opIntIntDict(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opIntIntDict(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opIntIntDict_name = "opIntIntDict";

        public Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> end_opIntIntDict(out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opIntIntDict_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    _System.Collections.Generic.Dictionary<int, int> tmpVal__ = new _System.Collections.Generic.Dictionary<int, int>();
                    tmpVal__ = Test.IntIntDictHelper.read(is__);
                    ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    _System.Collections.Generic.Dictionary<int, int> tmpVal__ = new _System.Collections.Generic.Dictionary<int, int>();
                    tmpVal__ = Test.IntIntDictHelper.read(is__);
                    p3 = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opIntIntDict> begin_opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opIntIntDict_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opIntIntDict> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opIntIntDict>(this, __opIntIntDict_name, opIntIntDict_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opIntIntDict_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                {
                    os__.writeSize(p1.Value == null ? 1 : p1.Value.Count * 8 + (p1.Value.Count > 254 ? 5 : 1));
                    Test.IntIntDictHelper.write(os__, p1.Value);
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opIntIntDict_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opIntIntDict cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3;
            Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> ret__;
            try
            {
                ret__ = end_opIntIntDict(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opIntIntDict_async(Test.AMI_Initial_opIntIntDict cb__, Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opIntIntDict> result__;
            try
            {
                checkTwowayOnly__(__opIntIntDict_name);
                result__ = begin_opIntIntDict(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opIntIntDict>(this, __opIntIntDict_name, opIntIntDict_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opIntIntDict_async(Test.AMI_Initial_opIntIntDict cb__, Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opIntIntDict> result__;
            try
            {
                checkTwowayOnly__(__opIntIntDict_name);
                result__ = begin_opIntIntDict(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opIntIntDict>(this, __opIntIntDict_name, opIntIntDict_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opIntSeq> begin_opIntSeq(Ice.Optional<int[]> p1)
        {
            return begin_opIntSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opIntSeq> begin_opIntSeq(Ice.Optional<int[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opIntSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opIntSeq(Ice.Optional<int[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opIntSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opIntSeq(Ice.Optional<int[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opIntSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opIntSeq_name = "opIntSeq";

        public Ice.Optional<int[]> end_opIntSeq(out Ice.Optional<int[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opIntSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<int[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    int[] tmpVal__;
                    tmpVal__ = Test.IntSeqHelper.read(is__);
                    ret__ = new Ice.Optional<int[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<int[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    int[] tmpVal__;
                    tmpVal__ = Test.IntSeqHelper.read(is__);
                    p3 = new Ice.Optional<int[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<int[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opIntSeq> begin_opIntSeq(Ice.Optional<int[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opIntSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opIntSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opIntSeq>(this, __opIntSeq_name, opIntSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opIntSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeIntSeq(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opIntSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opIntSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<int[]> p3;
            Ice.Optional<int[]> ret__;
            try
            {
                ret__ = end_opIntSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opIntSeq_async(Test.AMI_Initial_opIntSeq cb__, Ice.Optional<int[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opIntSeq> result__;
            try
            {
                checkTwowayOnly__(__opIntSeq_name);
                result__ = begin_opIntSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opIntSeq>(this, __opIntSeq_name, opIntSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opIntSeq_async(Test.AMI_Initial_opIntSeq cb__, Ice.Optional<int[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opIntSeq> result__;
            try
            {
                checkTwowayOnly__(__opIntSeq_name);
                result__ = begin_opIntSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opIntSeq>(this, __opIntSeq_name, opIntSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opLong> begin_opLong(Ice.Optional<long> p1)
        {
            return begin_opLong(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opLong> begin_opLong(Ice.Optional<long> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opLong(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opLong(Ice.Optional<long> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opLong(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opLong(Ice.Optional<long> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opLong(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opLong_name = "opLong";

        public Ice.Optional<long> end_opLong(out Ice.Optional<long> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opLong_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<long> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                p3 = is__.readLong(2);
                ret__ = is__.readLong(3);
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opLong> begin_opLong(Ice.Optional<long> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opLong_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opLong> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opLong>(this, __opLong_name, opLong_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opLong_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeLong(1, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opLong_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opLong cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<long> p3;
            Ice.Optional<long> ret__;
            try
            {
                ret__ = end_opLong(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opLong_async(Test.AMI_Initial_opLong cb__, Ice.Optional<long> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opLong> result__;
            try
            {
                checkTwowayOnly__(__opLong_name);
                result__ = begin_opLong(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opLong>(this, __opLong_name, opLong_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opLong_async(Test.AMI_Initial_opLong cb__, Ice.Optional<long> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opLong> result__;
            try
            {
                checkTwowayOnly__(__opLong_name);
                result__ = begin_opLong(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opLong>(this, __opLong_name, opLong_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opLongSeq> begin_opLongSeq(Ice.Optional<long[]> p1)
        {
            return begin_opLongSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opLongSeq> begin_opLongSeq(Ice.Optional<long[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opLongSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opLongSeq(Ice.Optional<long[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opLongSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opLongSeq(Ice.Optional<long[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opLongSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opLongSeq_name = "opLongSeq";

        public Ice.Optional<long[]> end_opLongSeq(out Ice.Optional<long[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opLongSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<long[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    long[] tmpVal__;
                    tmpVal__ = Test.LongSeqHelper.read(is__);
                    ret__ = new Ice.Optional<long[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<long[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    long[] tmpVal__;
                    tmpVal__ = Test.LongSeqHelper.read(is__);
                    p3 = new Ice.Optional<long[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<long[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opLongSeq> begin_opLongSeq(Ice.Optional<long[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opLongSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opLongSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opLongSeq>(this, __opLongSeq_name, opLongSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opLongSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeLongSeq(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opLongSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opLongSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<long[]> p3;
            Ice.Optional<long[]> ret__;
            try
            {
                ret__ = end_opLongSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opLongSeq_async(Test.AMI_Initial_opLongSeq cb__, Ice.Optional<long[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opLongSeq> result__;
            try
            {
                checkTwowayOnly__(__opLongSeq_name);
                result__ = begin_opLongSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opLongSeq>(this, __opLongSeq_name, opLongSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opLongSeq_async(Test.AMI_Initial_opLongSeq cb__, Ice.Optional<long[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opLongSeq> result__;
            try
            {
                checkTwowayOnly__(__opLongSeq_name);
                result__ = begin_opLongSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opLongSeq>(this, __opLongSeq_name, opLongSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opMyEnum> begin_opMyEnum(Ice.Optional<Test.MyEnum> p1)
        {
            return begin_opMyEnum(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opMyEnum> begin_opMyEnum(Ice.Optional<Test.MyEnum> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opMyEnum(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opMyEnum(Ice.Optional<Test.MyEnum> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opMyEnum(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opMyEnum(Ice.Optional<Test.MyEnum> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opMyEnum(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opMyEnum_name = "opMyEnum";

        public Ice.Optional<Test.MyEnum> end_opMyEnum(out Ice.Optional<Test.MyEnum> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opMyEnum_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<Test.MyEnum> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.Size))
                {
                    Test.MyEnum tmpVal__;
                    tmpVal__ = (Test.MyEnum)is__.readEnum(0);
                    ret__ = new Ice.Optional<Test.MyEnum>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<Test.MyEnum>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.Size))
                {
                    Test.MyEnum tmpVal__;
                    tmpVal__ = (Test.MyEnum)is__.readEnum(0);
                    p3 = new Ice.Optional<Test.MyEnum>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<Test.MyEnum>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opMyEnum> begin_opMyEnum(Ice.Optional<Test.MyEnum> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opMyEnum_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opMyEnum> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opMyEnum>(this, __opMyEnum_name, opMyEnum_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opMyEnum_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue)
                {
                    os__.writeEnum(2, (int)p1.Value, 1);
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opMyEnum_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opMyEnum cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.MyEnum> p3;
            Ice.Optional<Test.MyEnum> ret__;
            try
            {
                ret__ = end_opMyEnum(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opMyEnum_async(Test.AMI_Initial_opMyEnum cb__, Ice.Optional<Test.MyEnum> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opMyEnum> result__;
            try
            {
                checkTwowayOnly__(__opMyEnum_name);
                result__ = begin_opMyEnum(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opMyEnum>(this, __opMyEnum_name, opMyEnum_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opMyEnum_async(Test.AMI_Initial_opMyEnum cb__, Ice.Optional<Test.MyEnum> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opMyEnum> result__;
            try
            {
                checkTwowayOnly__(__opMyEnum_name);
                result__ = begin_opMyEnum(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opMyEnum>(this, __opMyEnum_name, opMyEnum_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opOneOptional> begin_opOneOptional(Ice.Optional<Test.OneOptional> p1)
        {
            return begin_opOneOptional(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opOneOptional> begin_opOneOptional(Ice.Optional<Test.OneOptional> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opOneOptional(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opOneOptional(Ice.Optional<Test.OneOptional> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opOneOptional(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opOneOptional(Ice.Optional<Test.OneOptional> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opOneOptional(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opOneOptional_name = "opOneOptional";

        public Ice.Optional<Test.OneOptional> end_opOneOptional(out Ice.Optional<Test.OneOptional> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opOneOptional_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<Test.OneOptional> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                Ice.OptionalPatcher<Test.OneOptional> p3__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
                Ice.OptionalPatcher<Test.OneOptional> ret__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
                is__.readObject(1, ret__PP);
                is__.readObject(3, p3__PP);
                outAsync__.endReadParams__();
                p3 = p3__PP.value;
                ret__ = ret__PP.value;
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opOneOptional> begin_opOneOptional(Ice.Optional<Test.OneOptional> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opOneOptional_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOneOptional> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOneOptional>(this, __opOneOptional_name, opOneOptional_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opOneOptional_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeObject(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opOneOptional_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opOneOptional cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.OneOptional> p3;
            Ice.Optional<Test.OneOptional> ret__;
            try
            {
                ret__ = end_opOneOptional(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opOneOptional_async(Test.AMI_Initial_opOneOptional cb__, Ice.Optional<Test.OneOptional> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opOneOptional> result__;
            try
            {
                checkTwowayOnly__(__opOneOptional_name);
                result__ = begin_opOneOptional(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOneOptional>(this, __opOneOptional_name, opOneOptional_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opOneOptional_async(Test.AMI_Initial_opOneOptional cb__, Ice.Optional<Test.OneOptional> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opOneOptional> result__;
            try
            {
                checkTwowayOnly__(__opOneOptional_name);
                result__ = begin_opOneOptional(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOneOptional>(this, __opOneOptional_name, opOneOptional_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opOneOptionalProxy> begin_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1)
        {
            return begin_opOneOptionalProxy(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opOneOptionalProxy> begin_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opOneOptionalProxy(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opOneOptionalProxy(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opOneOptionalProxy(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opOneOptionalProxy_name = "opOneOptionalProxy";

        public Ice.Optional<Test.OneOptionalPrx> end_opOneOptionalProxy(out Ice.Optional<Test.OneOptionalPrx> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opOneOptionalProxy_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<Test.OneOptionalPrx> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    Test.OneOptionalPrx tmpVal__;
                    tmpVal__ = Test.OneOptionalPrxHelper.read__(is__);
                    ret__ = new Ice.Optional<Test.OneOptionalPrx>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<Test.OneOptionalPrx>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    Test.OneOptionalPrx tmpVal__;
                    tmpVal__ = Test.OneOptionalPrxHelper.read__(is__);
                    p3 = new Ice.Optional<Test.OneOptionalPrx>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<Test.OneOptionalPrx>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opOneOptionalProxy> begin_opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opOneOptionalProxy_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOneOptionalProxy> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOneOptionalProxy>(this, __opOneOptionalProxy_name, opOneOptionalProxy_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opOneOptionalProxy_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.FSize))
                {
                    os__.startSize();
                    Test.OneOptionalPrxHelper.write__(os__, p1.Value);
                    os__.endSize();
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opOneOptionalProxy_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opOneOptionalProxy cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.OneOptionalPrx> p3;
            Ice.Optional<Test.OneOptionalPrx> ret__;
            try
            {
                ret__ = end_opOneOptionalProxy(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opOneOptionalProxy_async(Test.AMI_Initial_opOneOptionalProxy cb__, Ice.Optional<Test.OneOptionalPrx> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opOneOptionalProxy> result__;
            try
            {
                checkTwowayOnly__(__opOneOptionalProxy_name);
                result__ = begin_opOneOptionalProxy(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOneOptionalProxy>(this, __opOneOptionalProxy_name, opOneOptionalProxy_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opOneOptionalProxy_async(Test.AMI_Initial_opOneOptionalProxy cb__, Ice.Optional<Test.OneOptionalPrx> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opOneOptionalProxy> result__;
            try
            {
                checkTwowayOnly__(__opOneOptionalProxy_name);
                result__ = begin_opOneOptionalProxy(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOneOptionalProxy>(this, __opOneOptionalProxy_name, opOneOptionalProxy_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opOptionalException> begin_opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            return begin_opOptionalException(a, b, o, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opOptionalException> begin_opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opOptionalException(a, b, o, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opOptionalException(a, b, o, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opOptionalException(a, b, o, ctx__, true, cb__, cookie__);
        }

        private const string __opOptionalException_name = "opOptionalException";

        public void end_opOptionalException(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opOptionalException_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Test.OptionalException)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                outAsync__.readEmptyParams__();
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opOptionalException> begin_opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opOptionalException_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOptionalException> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOptionalException>(this, __opOptionalException_name, opOptionalException_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opOptionalException_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(1, a);
                os__.writeString(2, b);
                os__.writeObject(3, o);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opOptionalException_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opOptionalException cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_opOptionalException(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public bool opOptionalException_async(Test.AMI_Initial_opOptionalException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            Ice.AsyncResult<Test.Callback_Initial_opOptionalException> result__;
            try
            {
                checkTwowayOnly__(__opOptionalException_name);
                result__ = begin_opOptionalException(a, b, o);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOptionalException>(this, __opOptionalException_name, opOptionalException_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opOptionalException_async(Test.AMI_Initial_opOptionalException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opOptionalException> result__;
            try
            {
                checkTwowayOnly__(__opOptionalException_name);
                result__ = begin_opOptionalException(a, b, o, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opOptionalException>(this, __opOptionalException_name, opOptionalException_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opRequiredException> begin_opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            return begin_opRequiredException(a, b, o, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opRequiredException> begin_opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opRequiredException(a, b, o, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opRequiredException(a, b, o, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opRequiredException(a, b, o, ctx__, true, cb__, cookie__);
        }

        private const string __opRequiredException_name = "opRequiredException";

        public void end_opRequiredException(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opRequiredException_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Test.OptionalException)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                outAsync__.readEmptyParams__();
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opRequiredException> begin_opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opRequiredException_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opRequiredException> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opRequiredException>(this, __opRequiredException_name, opRequiredException_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opRequiredException_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(1, a);
                os__.writeString(2, b);
                os__.writeObject(3, o);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opRequiredException_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opRequiredException cb__, Ice.ExceptionCallback excb__)
        {
            try
            {
                end_opRequiredException(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__();
            }
        }

        public bool opRequiredException_async(Test.AMI_Initial_opRequiredException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o)
        {
            Ice.AsyncResult<Test.Callback_Initial_opRequiredException> result__;
            try
            {
                checkTwowayOnly__(__opRequiredException_name);
                result__ = begin_opRequiredException(a, b, o);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opRequiredException>(this, __opRequiredException_name, opRequiredException_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opRequiredException_async(Test.AMI_Initial_opRequiredException cb__, Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opRequiredException> result__;
            try
            {
                checkTwowayOnly__(__opRequiredException_name);
                result__ = begin_opRequiredException(a, b, o, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opRequiredException>(this, __opRequiredException_name, opRequiredException_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opSerializable> begin_opSerializable(Ice.Optional<byte[]> p1)
        {
            return begin_opSerializable(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opSerializable> begin_opSerializable(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opSerializable(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opSerializable(Ice.Optional<byte[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opSerializable(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opSerializable(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opSerializable(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opSerializable_name = "opSerializable";

        public Ice.Optional<byte[]> end_opSerializable(out Ice.Optional<byte[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opSerializable_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<byte[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    byte[] tmpVal__;
                    tmpVal__ = Test.SerializableHelper.read(is__);
                    ret__ = new Ice.Optional<byte[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<byte[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    byte[] tmpVal__;
                    tmpVal__ = Test.SerializableHelper.read(is__);
                    p3 = new Ice.Optional<byte[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<byte[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opSerializable> begin_opSerializable(Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opSerializable_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSerializable> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSerializable>(this, __opSerializable_name, opSerializable_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opSerializable_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeByteSeq(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opSerializable_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opSerializable cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<byte[]> p3;
            Ice.Optional<byte[]> ret__;
            try
            {
                ret__ = end_opSerializable(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opSerializable_async(Test.AMI_Initial_opSerializable cb__, Ice.Optional<byte[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opSerializable> result__;
            try
            {
                checkTwowayOnly__(__opSerializable_name);
                result__ = begin_opSerializable(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSerializable>(this, __opSerializable_name, opSerializable_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opSerializable_async(Test.AMI_Initial_opSerializable cb__, Ice.Optional<byte[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opSerializable> result__;
            try
            {
                checkTwowayOnly__(__opSerializable_name);
                result__ = begin_opSerializable(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSerializable>(this, __opSerializable_name, opSerializable_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opShort> begin_opShort(Ice.Optional<short> p1)
        {
            return begin_opShort(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opShort> begin_opShort(Ice.Optional<short> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opShort(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opShort(Ice.Optional<short> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opShort(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opShort(Ice.Optional<short> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opShort(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opShort_name = "opShort";

        public Ice.Optional<short> end_opShort(out Ice.Optional<short> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opShort_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<short> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readShort(1);
                p3 = is__.readShort(3);
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opShort> begin_opShort(Ice.Optional<short> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opShort_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opShort> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opShort>(this, __opShort_name, opShort_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opShort_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeShort(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opShort_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opShort cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<short> p3;
            Ice.Optional<short> ret__;
            try
            {
                ret__ = end_opShort(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opShort_async(Test.AMI_Initial_opShort cb__, Ice.Optional<short> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opShort> result__;
            try
            {
                checkTwowayOnly__(__opShort_name);
                result__ = begin_opShort(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opShort>(this, __opShort_name, opShort_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opShort_async(Test.AMI_Initial_opShort cb__, Ice.Optional<short> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opShort> result__;
            try
            {
                checkTwowayOnly__(__opShort_name);
                result__ = begin_opShort(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opShort>(this, __opShort_name, opShort_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opShortSeq> begin_opShortSeq(Ice.Optional<short[]> p1)
        {
            return begin_opShortSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opShortSeq> begin_opShortSeq(Ice.Optional<short[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opShortSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opShortSeq(Ice.Optional<short[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opShortSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opShortSeq(Ice.Optional<short[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opShortSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opShortSeq_name = "opShortSeq";

        public Ice.Optional<short[]> end_opShortSeq(out Ice.Optional<short[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opShortSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<short[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    short[] tmpVal__;
                    tmpVal__ = Test.ShortSeqHelper.read(is__);
                    ret__ = new Ice.Optional<short[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<short[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    short[] tmpVal__;
                    tmpVal__ = Test.ShortSeqHelper.read(is__);
                    p3 = new Ice.Optional<short[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<short[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opShortSeq> begin_opShortSeq(Ice.Optional<short[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opShortSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opShortSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opShortSeq>(this, __opShortSeq_name, opShortSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opShortSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeShortSeq(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opShortSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opShortSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<short[]> p3;
            Ice.Optional<short[]> ret__;
            try
            {
                ret__ = end_opShortSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opShortSeq_async(Test.AMI_Initial_opShortSeq cb__, Ice.Optional<short[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opShortSeq> result__;
            try
            {
                checkTwowayOnly__(__opShortSeq_name);
                result__ = begin_opShortSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opShortSeq>(this, __opShortSeq_name, opShortSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opShortSeq_async(Test.AMI_Initial_opShortSeq cb__, Ice.Optional<short[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opShortSeq> result__;
            try
            {
                checkTwowayOnly__(__opShortSeq_name);
                result__ = begin_opShortSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opShortSeq>(this, __opShortSeq_name, opShortSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opSmallStruct> begin_opSmallStruct(Ice.Optional<Test.SmallStruct> p1)
        {
            return begin_opSmallStruct(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opSmallStruct> begin_opSmallStruct(Ice.Optional<Test.SmallStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opSmallStruct(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opSmallStruct(Ice.Optional<Test.SmallStruct> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opSmallStruct(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opSmallStruct(Ice.Optional<Test.SmallStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opSmallStruct(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opSmallStruct_name = "opSmallStruct";

        public Ice.Optional<Test.SmallStruct> end_opSmallStruct(out Ice.Optional<Test.SmallStruct> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opSmallStruct_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<Test.SmallStruct> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    Test.SmallStruct tmpVal__ = new Test.SmallStruct();
                    tmpVal__.read__(is__);
                    ret__ = new Ice.Optional<Test.SmallStruct>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<Test.SmallStruct>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    is__.skipSize();
                    Test.SmallStruct tmpVal__ = new Test.SmallStruct();
                    tmpVal__.read__(is__);
                    p3 = new Ice.Optional<Test.SmallStruct>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<Test.SmallStruct>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opSmallStruct> begin_opSmallStruct(Ice.Optional<Test.SmallStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opSmallStruct_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStruct> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStruct>(this, __opSmallStruct_name, opSmallStruct_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opSmallStruct_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                {
                    os__.writeSize(1);
                    p1.Value.write__(os__);
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opSmallStruct_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opSmallStruct cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.SmallStruct> p3;
            Ice.Optional<Test.SmallStruct> ret__;
            try
            {
                ret__ = end_opSmallStruct(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opSmallStruct_async(Test.AMI_Initial_opSmallStruct cb__, Ice.Optional<Test.SmallStruct> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opSmallStruct> result__;
            try
            {
                checkTwowayOnly__(__opSmallStruct_name);
                result__ = begin_opSmallStruct(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStruct>(this, __opSmallStruct_name, opSmallStruct_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opSmallStruct_async(Test.AMI_Initial_opSmallStruct cb__, Ice.Optional<Test.SmallStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opSmallStruct> result__;
            try
            {
                checkTwowayOnly__(__opSmallStruct_name);
                result__ = begin_opSmallStruct(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStruct>(this, __opSmallStruct_name, opSmallStruct_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opSmallStructList> begin_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1)
        {
            return begin_opSmallStructList(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opSmallStructList> begin_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opSmallStructList(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opSmallStructList(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opSmallStructList(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opSmallStructList_name = "opSmallStructList";

        public Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> end_opSmallStructList(out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opSmallStructList_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    _System.Collections.Generic.List<Test.SmallStruct> tmpVal__;
                    tmpVal__ = Test.SmallStructListHelper.read(is__);
                    ret__ = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    _System.Collections.Generic.List<Test.SmallStruct> tmpVal__;
                    tmpVal__ = Test.SmallStructListHelper.read(is__);
                    p3 = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opSmallStructList> begin_opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opSmallStructList_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStructList> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStructList>(this, __opSmallStructList_name, opSmallStructList_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opSmallStructList_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                {
                    Test.SmallStructListHelper.write(os__, p1.Value);
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opSmallStructList_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opSmallStructList cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3;
            Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> ret__;
            try
            {
                ret__ = end_opSmallStructList(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opSmallStructList_async(Test.AMI_Initial_opSmallStructList cb__, Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opSmallStructList> result__;
            try
            {
                checkTwowayOnly__(__opSmallStructList_name);
                result__ = begin_opSmallStructList(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStructList>(this, __opSmallStructList_name, opSmallStructList_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opSmallStructList_async(Test.AMI_Initial_opSmallStructList cb__, Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opSmallStructList> result__;
            try
            {
                checkTwowayOnly__(__opSmallStructList_name);
                result__ = begin_opSmallStructList(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStructList>(this, __opSmallStructList_name, opSmallStructList_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opSmallStructSeq> begin_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1)
        {
            return begin_opSmallStructSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opSmallStructSeq> begin_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opSmallStructSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opSmallStructSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opSmallStructSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opSmallStructSeq_name = "opSmallStructSeq";

        public Ice.Optional<Test.SmallStruct[]> end_opSmallStructSeq(out Ice.Optional<Test.SmallStruct[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opSmallStructSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<Test.SmallStruct[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                {
                    Test.SmallStruct[] tmpVal__;
                    tmpVal__ = Test.SmallStructSeqHelper.read(is__);
                    ret__ = new Ice.Optional<Test.SmallStruct[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<Test.SmallStruct[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                {
                    Test.SmallStruct[] tmpVal__;
                    tmpVal__ = Test.SmallStructSeqHelper.read(is__);
                    p3 = new Ice.Optional<Test.SmallStruct[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<Test.SmallStruct[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opSmallStructSeq> begin_opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opSmallStructSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStructSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStructSeq>(this, __opSmallStructSeq_name, opSmallStructSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opSmallStructSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                {
                    Test.SmallStructSeqHelper.write(os__, p1.Value);
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opSmallStructSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opSmallStructSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.SmallStruct[]> p3;
            Ice.Optional<Test.SmallStruct[]> ret__;
            try
            {
                ret__ = end_opSmallStructSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opSmallStructSeq_async(Test.AMI_Initial_opSmallStructSeq cb__, Ice.Optional<Test.SmallStruct[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opSmallStructSeq> result__;
            try
            {
                checkTwowayOnly__(__opSmallStructSeq_name);
                result__ = begin_opSmallStructSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStructSeq>(this, __opSmallStructSeq_name, opSmallStructSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opSmallStructSeq_async(Test.AMI_Initial_opSmallStructSeq cb__, Ice.Optional<Test.SmallStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opSmallStructSeq> result__;
            try
            {
                checkTwowayOnly__(__opSmallStructSeq_name);
                result__ = begin_opSmallStructSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opSmallStructSeq>(this, __opSmallStructSeq_name, opSmallStructSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opString> begin_opString(Ice.Optional<string> p1)
        {
            return begin_opString(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opString> begin_opString(Ice.Optional<string> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opString(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opString(Ice.Optional<string> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opString(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opString(Ice.Optional<string> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opString(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opString_name = "opString";

        public Ice.Optional<string> end_opString(out Ice.Optional<string> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opString_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<string> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readString(1);
                p3 = is__.readString(3);
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opString> begin_opString(Ice.Optional<string> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opString_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opString> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opString>(this, __opString_name, opString_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opString_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opString_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opString cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<string> p3;
            Ice.Optional<string> ret__;
            try
            {
                ret__ = end_opString(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opString_async(Test.AMI_Initial_opString cb__, Ice.Optional<string> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opString> result__;
            try
            {
                checkTwowayOnly__(__opString_name);
                result__ = begin_opString(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opString>(this, __opString_name, opString_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opString_async(Test.AMI_Initial_opString cb__, Ice.Optional<string> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opString> result__;
            try
            {
                checkTwowayOnly__(__opString_name);
                result__ = begin_opString(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opString>(this, __opString_name, opString_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opStringIntDict> begin_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1)
        {
            return begin_opStringIntDict(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opStringIntDict> begin_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opStringIntDict(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opStringIntDict(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opStringIntDict(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opStringIntDict_name = "opStringIntDict";

        public Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> end_opStringIntDict(out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opStringIntDict_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    _System.Collections.Generic.Dictionary<string, int> tmpVal__ = new _System.Collections.Generic.Dictionary<string, int>();
                    tmpVal__ = Test.StringIntDictHelper.read(is__);
                    ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    _System.Collections.Generic.Dictionary<string, int> tmpVal__ = new _System.Collections.Generic.Dictionary<string, int>();
                    tmpVal__ = Test.StringIntDictHelper.read(is__);
                    p3 = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opStringIntDict> begin_opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opStringIntDict_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opStringIntDict> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opStringIntDict>(this, __opStringIntDict_name, opStringIntDict_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opStringIntDict_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.FSize))
                {
                    os__.startSize();
                    Test.StringIntDictHelper.write(os__, p1.Value);
                    os__.endSize();
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opStringIntDict_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opStringIntDict cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3;
            Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> ret__;
            try
            {
                ret__ = end_opStringIntDict(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opStringIntDict_async(Test.AMI_Initial_opStringIntDict cb__, Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opStringIntDict> result__;
            try
            {
                checkTwowayOnly__(__opStringIntDict_name);
                result__ = begin_opStringIntDict(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opStringIntDict>(this, __opStringIntDict_name, opStringIntDict_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opStringIntDict_async(Test.AMI_Initial_opStringIntDict cb__, Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opStringIntDict> result__;
            try
            {
                checkTwowayOnly__(__opStringIntDict_name);
                result__ = begin_opStringIntDict(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opStringIntDict>(this, __opStringIntDict_name, opStringIntDict_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opStringSeq> begin_opStringSeq(Ice.Optional<string[]> p1)
        {
            return begin_opStringSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opStringSeq> begin_opStringSeq(Ice.Optional<string[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opStringSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opStringSeq(Ice.Optional<string[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opStringSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opStringSeq(Ice.Optional<string[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opStringSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opStringSeq_name = "opStringSeq";

        public Ice.Optional<string[]> end_opStringSeq(out Ice.Optional<string[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opStringSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<string[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    string[] tmpVal__;
                    tmpVal__ = Test.StringSeqHelper.read(is__);
                    ret__ = new Ice.Optional<string[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<string[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    string[] tmpVal__;
                    tmpVal__ = Test.StringSeqHelper.read(is__);
                    p3 = new Ice.Optional<string[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<string[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opStringSeq> begin_opStringSeq(Ice.Optional<string[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opStringSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opStringSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opStringSeq>(this, __opStringSeq_name, opStringSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opStringSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeStringSeq(2, p1);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opStringSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opStringSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<string[]> p3;
            Ice.Optional<string[]> ret__;
            try
            {
                ret__ = end_opStringSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opStringSeq_async(Test.AMI_Initial_opStringSeq cb__, Ice.Optional<string[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opStringSeq> result__;
            try
            {
                checkTwowayOnly__(__opStringSeq_name);
                result__ = begin_opStringSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opStringSeq>(this, __opStringSeq_name, opStringSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opStringSeq_async(Test.AMI_Initial_opStringSeq cb__, Ice.Optional<string[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opStringSeq> result__;
            try
            {
                checkTwowayOnly__(__opStringSeq_name);
                result__ = begin_opStringSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opStringSeq>(this, __opStringSeq_name, opStringSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opVarStruct> begin_opVarStruct(Ice.Optional<Test.VarStruct> p1)
        {
            return begin_opVarStruct(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opVarStruct> begin_opVarStruct(Ice.Optional<Test.VarStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opVarStruct(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opVarStruct(Ice.Optional<Test.VarStruct> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opVarStruct(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opVarStruct(Ice.Optional<Test.VarStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opVarStruct(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opVarStruct_name = "opVarStruct";

        public Ice.Optional<Test.VarStruct> end_opVarStruct(out Ice.Optional<Test.VarStruct> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opVarStruct_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<Test.VarStruct> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    Test.VarStruct tmpVal__ = null;
                    if(tmpVal__ == null)
                    {
                        tmpVal__ = new Test.VarStruct();
                    }
                    tmpVal__.read__(is__);
                    ret__ = new Ice.Optional<Test.VarStruct>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<Test.VarStruct>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    Test.VarStruct tmpVal__ = null;
                    if(tmpVal__ == null)
                    {
                        tmpVal__ = new Test.VarStruct();
                    }
                    tmpVal__.read__(is__);
                    p3 = new Ice.Optional<Test.VarStruct>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<Test.VarStruct>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opVarStruct> begin_opVarStruct(Ice.Optional<Test.VarStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opVarStruct_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opVarStruct> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opVarStruct>(this, __opVarStruct_name, opVarStruct_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opVarStruct_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.FSize))
                {
                    os__.startSize();
                    if(p1.Value == null)
                    {
                        Test.VarStruct tmp__ = new Test.VarStruct();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        p1.Value.write__(os__);
                    }
                    os__.endSize();
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opVarStruct_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opVarStruct cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.VarStruct> p3;
            Ice.Optional<Test.VarStruct> ret__;
            try
            {
                ret__ = end_opVarStruct(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opVarStruct_async(Test.AMI_Initial_opVarStruct cb__, Ice.Optional<Test.VarStruct> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opVarStruct> result__;
            try
            {
                checkTwowayOnly__(__opVarStruct_name);
                result__ = begin_opVarStruct(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opVarStruct>(this, __opVarStruct_name, opVarStruct_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opVarStruct_async(Test.AMI_Initial_opVarStruct cb__, Ice.Optional<Test.VarStruct> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opVarStruct> result__;
            try
            {
                checkTwowayOnly__(__opVarStruct_name);
                result__ = begin_opVarStruct(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opVarStruct>(this, __opVarStruct_name, opVarStruct_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_opVarStructSeq> begin_opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1)
        {
            return begin_opVarStructSeq(p1, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_opVarStructSeq> begin_opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_opVarStructSeq(p1, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opVarStructSeq(p1, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_opVarStructSeq(p1, ctx__, true, cb__, cookie__);
        }

        private const string __opVarStructSeq_name = "opVarStructSeq";

        public Ice.Optional<Test.VarStruct[]> end_opVarStructSeq(out Ice.Optional<Test.VarStruct[]> p3, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __opVarStructSeq_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Optional<Test.VarStruct[]> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    Test.VarStruct[] tmpVal__;
                    tmpVal__ = Test.VarStructSeqHelper.read(is__);
                    ret__ = new Ice.Optional<Test.VarStruct[]>(tmpVal__);
                }
                else
                {
                    ret__ = new Ice.Optional<Test.VarStruct[]>();
                }
                if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                {
                    is__.skip(4);
                    Test.VarStruct[] tmpVal__;
                    tmpVal__ = Test.VarStructSeqHelper.read(is__);
                    p3 = new Ice.Optional<Test.VarStruct[]>(tmpVal__);
                }
                else
                {
                    p3 = new Ice.Optional<Test.VarStruct[]>();
                }
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_opVarStructSeq> begin_opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__opVarStructSeq_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opVarStructSeq> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opVarStructSeq>(this, __opVarStructSeq_name, opVarStructSeq_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__opVarStructSeq_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.FSize))
                {
                    os__.startSize();
                    Test.VarStructSeqHelper.write(os__, p1.Value);
                    os__.endSize();
                }
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void opVarStructSeq_completed__(Ice.AsyncResult r__, Test.Callback_Initial_opVarStructSeq cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.VarStruct[]> p3;
            Ice.Optional<Test.VarStruct[]> ret__;
            try
            {
                ret__ = end_opVarStructSeq(out p3, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, p3);
            }
        }

        public bool opVarStructSeq_async(Test.AMI_Initial_opVarStructSeq cb__, Ice.Optional<Test.VarStruct[]> p1)
        {
            Ice.AsyncResult<Test.Callback_Initial_opVarStructSeq> result__;
            try
            {
                checkTwowayOnly__(__opVarStructSeq_name);
                result__ = begin_opVarStructSeq(p1);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opVarStructSeq>(this, __opVarStructSeq_name, opVarStructSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool opVarStructSeq_async(Test.AMI_Initial_opVarStructSeq cb__, Ice.Optional<Test.VarStruct[]> p1, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_opVarStructSeq> result__;
            try
            {
                checkTwowayOnly__(__opVarStructSeq_name);
                result__ = begin_opVarStructSeq(p1, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_opVarStructSeq>(this, __opVarStructSeq_name, opVarStructSeq_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_pingPong> begin_pingPong(Ice.Object o)
        {
            return begin_pingPong(o, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_pingPong> begin_pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_pingPong(o, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_pingPong(Ice.Object o, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_pingPong(o, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_pingPong(o, ctx__, true, cb__, cookie__);
        }

        private const string __pingPong_name = "pingPong";

        public Ice.Object end_pingPong(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __pingPong_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                Ice.Object ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                IceInternal.ParamPatcher<Ice.Object> ret__PP = new IceInternal.ParamPatcher<Ice.Object>(Ice.ObjectImpl.ice_staticId());
                is__.readObject(ret__PP);
                is__.readPendingObjects();
                outAsync__.endReadParams__();
                ret__ = ret__PP.value;
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_pingPong> begin_pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__pingPong_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_pingPong> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_pingPong>(this, __pingPong_name, pingPong_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__pingPong_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeObject(o);
                os__.writePendingObjects();
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void pingPong_completed__(Ice.AsyncResult r__, Test.Callback_Initial_pingPong cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Object ret__;
            try
            {
                ret__ = end_pingPong(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public bool pingPong_async(Test.AMI_Initial_pingPong cb__, Ice.Object o)
        {
            Ice.AsyncResult<Test.Callback_Initial_pingPong> result__;
            try
            {
                checkTwowayOnly__(__pingPong_name);
                result__ = begin_pingPong(o);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_pingPong>(this, __pingPong_name, pingPong_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool pingPong_async(Test.AMI_Initial_pingPong cb__, Ice.Object o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_pingPong> result__;
            try
            {
                checkTwowayOnly__(__pingPong_name);
                result__ = begin_pingPong(o, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_pingPong>(this, __pingPong_name, pingPong_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_returnOptionalClass> begin_returnOptionalClass(bool req)
        {
            return begin_returnOptionalClass(req, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_returnOptionalClass> begin_returnOptionalClass(bool req, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_returnOptionalClass(req, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_returnOptionalClass(bool req, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_returnOptionalClass(req, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_returnOptionalClass(bool req, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_returnOptionalClass(req, ctx__, true, cb__, cookie__);
        }

        private const string __returnOptionalClass_name = "returnOptionalClass";

        public void end_returnOptionalClass(out Ice.Optional<Test.OneOptional> o, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __returnOptionalClass_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                Ice.OptionalPatcher<Test.OneOptional> o__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
                is__.readObject(1, o__PP);
                outAsync__.endReadParams__();
                o = o__PP.value;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_returnOptionalClass> begin_returnOptionalClass(bool req, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__returnOptionalClass_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_returnOptionalClass> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_returnOptionalClass>(this, __returnOptionalClass_name, returnOptionalClass_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__returnOptionalClass_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeBool(req);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void returnOptionalClass_completed__(Ice.AsyncResult r__, Test.Callback_Initial_returnOptionalClass cb__, Ice.ExceptionCallback excb__)
        {
            Ice.Optional<Test.OneOptional> o;
            try
            {
                end_returnOptionalClass(out o, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(o);
            }
        }

        public bool returnOptionalClass_async(Test.AMI_Initial_returnOptionalClass cb__, bool req)
        {
            Ice.AsyncResult<Test.Callback_Initial_returnOptionalClass> result__;
            try
            {
                checkTwowayOnly__(__returnOptionalClass_name);
                result__ = begin_returnOptionalClass(req);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_returnOptionalClass>(this, __returnOptionalClass_name, returnOptionalClass_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool returnOptionalClass_async(Test.AMI_Initial_returnOptionalClass cb__, bool req, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_returnOptionalClass> result__;
            try
            {
                checkTwowayOnly__(__returnOptionalClass_name);
                result__ = begin_returnOptionalClass(req, ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_returnOptionalClass>(this, __returnOptionalClass_name, returnOptionalClass_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_sendOptionalClass> begin_sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o)
        {
            return begin_sendOptionalClass(req, o, null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_sendOptionalClass> begin_sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_sendOptionalClass(req, o, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendOptionalClass(req, o, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendOptionalClass(req, o, ctx__, true, cb__, cookie__);
        }

        private const string __sendOptionalClass_name = "sendOptionalClass";

        public void end_sendOptionalClass(Ice.AsyncResult r__)
        {
            end__(r__, __sendOptionalClass_name);
        }

        private Ice.AsyncResult<Test.Callback_Initial_sendOptionalClass> begin_sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Test.Callback_Initial_sendOptionalClass> result__ = new IceInternal.OnewayOutgoingAsync<Test.Callback_Initial_sendOptionalClass>(this, __sendOptionalClass_name, sendOptionalClass_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__sendOptionalClass_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeBool(req);
                os__.writeObject(1, o);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void sendOptionalClass_completed__(Test.Callback_Initial_sendOptionalClass cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public bool sendOptionalClass_async(Test.AMI_Initial_sendOptionalClass cb__, bool req, Ice.Optional<Test.OneOptional> o)
        {
            Ice.AsyncResult<Test.Callback_Initial_sendOptionalClass> result__ = begin_sendOptionalClass(req, o);
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool sendOptionalClass_async(Test.AMI_Initial_sendOptionalClass cb__, bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_sendOptionalClass> result__ = begin_sendOptionalClass(req, o, ctx__);
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_shutdown> begin_shutdown()
        {
            return begin_shutdown(null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_shutdown(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_shutdown(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_shutdown(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_shutdown(ctx__, true, cb__, cookie__);
        }

        private const string __shutdown_name = "shutdown";

        public void end_shutdown(Ice.AsyncResult r__)
        {
            end__(r__, __shutdown_name);
        }

        private Ice.AsyncResult<Test.Callback_Initial_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Test.Callback_Initial_shutdown> result__ = new IceInternal.OnewayOutgoingAsync<Test.Callback_Initial_shutdown>(this, __shutdown_name, shutdown_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__shutdown_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void shutdown_completed__(Test.Callback_Initial_shutdown cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public bool shutdown_async(Test.AMI_Initial_shutdown cb__)
        {
            Ice.AsyncResult<Test.Callback_Initial_shutdown> result__ = begin_shutdown();
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool shutdown_async(Test.AMI_Initial_shutdown cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_shutdown> result__ = begin_shutdown(ctx__);
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_supportsCsharpSerializable> begin_supportsCsharpSerializable()
        {
            return begin_supportsCsharpSerializable(null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_supportsCsharpSerializable> begin_supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_supportsCsharpSerializable(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_supportsCsharpSerializable(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_supportsCsharpSerializable(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_supportsCsharpSerializable(ctx__, true, cb__, cookie__);
        }

        private const string __supportsCsharpSerializable_name = "supportsCsharpSerializable";

        public bool end_supportsCsharpSerializable(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __supportsCsharpSerializable_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readBool();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_supportsCsharpSerializable> begin_supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__supportsCsharpSerializable_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsCsharpSerializable> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsCsharpSerializable>(this, __supportsCsharpSerializable_name, supportsCsharpSerializable_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__supportsCsharpSerializable_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void supportsCsharpSerializable_completed__(Ice.AsyncResult r__, Test.Callback_Initial_supportsCsharpSerializable cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_supportsCsharpSerializable(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public bool supportsCsharpSerializable_async(Test.AMI_Initial_supportsCsharpSerializable cb__)
        {
            Ice.AsyncResult<Test.Callback_Initial_supportsCsharpSerializable> result__;
            try
            {
                checkTwowayOnly__(__supportsCsharpSerializable_name);
                result__ = begin_supportsCsharpSerializable();
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsCsharpSerializable>(this, __supportsCsharpSerializable_name, supportsCsharpSerializable_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool supportsCsharpSerializable_async(Test.AMI_Initial_supportsCsharpSerializable cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_supportsCsharpSerializable> result__;
            try
            {
                checkTwowayOnly__(__supportsCsharpSerializable_name);
                result__ = begin_supportsCsharpSerializable(ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsCsharpSerializable>(this, __supportsCsharpSerializable_name, supportsCsharpSerializable_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_supportsJavaSerializable> begin_supportsJavaSerializable()
        {
            return begin_supportsJavaSerializable(null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_supportsJavaSerializable> begin_supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_supportsJavaSerializable(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_supportsJavaSerializable(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_supportsJavaSerializable(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_supportsJavaSerializable(ctx__, true, cb__, cookie__);
        }

        private const string __supportsJavaSerializable_name = "supportsJavaSerializable";

        public bool end_supportsJavaSerializable(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __supportsJavaSerializable_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readBool();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_supportsJavaSerializable> begin_supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__supportsJavaSerializable_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsJavaSerializable> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsJavaSerializable>(this, __supportsJavaSerializable_name, supportsJavaSerializable_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__supportsJavaSerializable_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void supportsJavaSerializable_completed__(Ice.AsyncResult r__, Test.Callback_Initial_supportsJavaSerializable cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_supportsJavaSerializable(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public bool supportsJavaSerializable_async(Test.AMI_Initial_supportsJavaSerializable cb__)
        {
            Ice.AsyncResult<Test.Callback_Initial_supportsJavaSerializable> result__;
            try
            {
                checkTwowayOnly__(__supportsJavaSerializable_name);
                result__ = begin_supportsJavaSerializable();
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsJavaSerializable>(this, __supportsJavaSerializable_name, supportsJavaSerializable_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool supportsJavaSerializable_async(Test.AMI_Initial_supportsJavaSerializable cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_supportsJavaSerializable> result__;
            try
            {
                checkTwowayOnly__(__supportsJavaSerializable_name);
                result__ = begin_supportsJavaSerializable(ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsJavaSerializable>(this, __supportsJavaSerializable_name, supportsJavaSerializable_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<Test.Callback_Initial_supportsRequiredParams> begin_supportsRequiredParams()
        {
            return begin_supportsRequiredParams(null, false, null, null);
        }

        public Ice.AsyncResult<Test.Callback_Initial_supportsRequiredParams> begin_supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_supportsRequiredParams(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_supportsRequiredParams(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_supportsRequiredParams(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_supportsRequiredParams(ctx__, true, cb__, cookie__);
        }

        private const string __supportsRequiredParams_name = "supportsRequiredParams";

        public bool end_supportsRequiredParams(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __supportsRequiredParams_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = is__.readBool();
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<Test.Callback_Initial_supportsRequiredParams> begin_supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__supportsRequiredParams_name);
            IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsRequiredParams> result__ =  new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsRequiredParams>(this, __supportsRequiredParams_name, supportsRequiredParams_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__supportsRequiredParams_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                result__.writeEmptyParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void supportsRequiredParams_completed__(Ice.AsyncResult r__, Test.Callback_Initial_supportsRequiredParams cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_supportsRequiredParams(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public bool supportsRequiredParams_async(Test.AMI_Initial_supportsRequiredParams cb__)
        {
            Ice.AsyncResult<Test.Callback_Initial_supportsRequiredParams> result__;
            try
            {
                checkTwowayOnly__(__supportsRequiredParams_name);
                result__ = begin_supportsRequiredParams();
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsRequiredParams>(this, __supportsRequiredParams_name, supportsRequiredParams_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public bool supportsRequiredParams_async(Test.AMI_Initial_supportsRequiredParams cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Test.Callback_Initial_supportsRequiredParams> result__;
            try
            {
                checkTwowayOnly__(__supportsRequiredParams_name);
                result__ = begin_supportsRequiredParams(ctx__);
            }
            catch(Ice.TwowayOnlyException ex)
            {
                result__ = new IceInternal.TwowayOutgoingAsync<Test.Callback_Initial_supportsRequiredParams>(this, __supportsRequiredParams_name, supportsRequiredParams_completed__, null);
                ((IceInternal.OutgoingAsyncBase)result__).exceptionAsync__(ex);
            }
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if(cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        #endregion

        #region Checked and unchecked cast operations

        public static InitialPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            InitialPrx r = b as InitialPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                InitialPrxHelper h = new InitialPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static InitialPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            InitialPrx r = b as InitialPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                InitialPrxHelper h = new InitialPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static InitialPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    InitialPrxHelper h = new InitialPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static InitialPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    InitialPrxHelper h = new InitialPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static InitialPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            InitialPrx r = b as InitialPrx;
            if(r == null)
            {
                InitialPrxHelper h = new InitialPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static InitialPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            InitialPrxHelper h = new InitialPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::Test::Initial"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new InitialDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new InitialDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, InitialPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static InitialPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                InitialPrxHelper result = new InitialPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        public static void write(Ice.OutputStream outS__, InitialPrx v__)
        {
            outS__.writeProxy(v__);
        }

        public static InitialPrx read(Ice.InputStream inS__)
        {
            Ice.ObjectPrx proxy = inS__.readProxy();
            if(proxy != null)
            {
                InitialPrxHelper result = new InitialPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Test
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface OneOptionalDel_ : Ice.ObjectDel_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface MultiOptionalDel_ : Ice.ObjectDel_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface ADel_ : Ice.ObjectDel_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface BDel_ : Test.ADel_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface CDel_ : Test.BDel_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface WDDel_ : Ice.ObjectDel_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface OptionalWithCustomDel_ : Ice.ObjectDel_
    {
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public interface InitialDel_ : Ice.ObjectDel_
    {
        void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Object pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        bool supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        bool supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);

        bool supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }
}

namespace Test
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OneOptionalDelM_ : Ice.ObjectDelM_, OneOptionalDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class MultiOptionalDelM_ : Ice.ObjectDelM_, MultiOptionalDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class ADelM_ : Ice.ObjectDelM_, ADel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class BDelM_ : Ice.ObjectDelM_, BDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class CDelM_ : Ice.ObjectDelM_, CDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class WDDelM_ : Ice.ObjectDelM_, WDDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OptionalWithCustomDelM_ : Ice.ObjectDelM_, OptionalWithCustomDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class InitialDelM_ : Ice.ObjectDelM_, InitialDel_
    {
        public Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opBool", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeBool(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<bool> ret__;
                    ret__ = is__.readBool(1);
                    p3 = is__.readBool(3);
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opBoolSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeBoolSeq(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<bool[]> ret__;
                    ret__ = new Ice.Optional<bool[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        bool[] tmpVal__;
                        tmpVal__ = Test.BoolSeqHelper.read(is__);
                        ret__ = new Ice.Optional<bool[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<bool[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        bool[] tmpVal__;
                        tmpVal__ = Test.BoolSeqHelper.read(is__);
                        p3 = new Ice.Optional<bool[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<bool[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opByte", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeByte(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<byte> ret__;
                    ret__ = is__.readByte(1);
                    p3 = is__.readByte(3);
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opByteSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeByteSeq(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<byte[]> ret__;
                    ret__ = new Ice.Optional<byte[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal__;
                        tmpVal__ = Test.ByteSeqHelper.read(is__);
                        ret__ = new Ice.Optional<byte[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<byte[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal__;
                        tmpVal__ = Test.ByteSeqHelper.read(is__);
                        p3 = new Ice.Optional<byte[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<byte[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opClassAndUnknownOptional", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeObject(p);
                    os__.writePendingObjects();
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opDerivedException", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeInt(1, a);
                    os__.writeString(2, b);
                    os__.writeObject(3, o);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Test.OptionalException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.readEmptyParams();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opDouble", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeDouble(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<double> ret__;
                    ret__ = is__.readDouble(1);
                    p3 = is__.readDouble(3);
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opDoubleSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeDoubleSeq(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<double[]> ret__;
                    ret__ = new Ice.Optional<double[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        double[] tmpVal__;
                        tmpVal__ = Test.DoubleSeqHelper.read(is__);
                        ret__ = new Ice.Optional<double[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<double[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        double[] tmpVal__;
                        tmpVal__ = Test.DoubleSeqHelper.read(is__);
                        p3 = new Ice.Optional<double[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<double[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opFixedStruct", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                    {
                        os__.writeSize(4);
                        p1.Value.write__(os__);
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<Test.FixedStruct> ret__;
                    ret__ = new Ice.Optional<Test.FixedStruct>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        Test.FixedStruct tmpVal__ = new Test.FixedStruct();
                        tmpVal__.read__(is__);
                        ret__ = new Ice.Optional<Test.FixedStruct>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<Test.FixedStruct>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        Test.FixedStruct tmpVal__ = new Test.FixedStruct();
                        tmpVal__.read__(is__);
                        p3 = new Ice.Optional<Test.FixedStruct>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<Test.FixedStruct>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opFixedStructList", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                    {
                        os__.writeSize(p1.Value == null ? 1 : p1.Value.Count * 4 + (p1.Value.Count > 254 ? 5 : 1));
                        Test.FixedStructListHelper.write(os__, p1.Value);
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> ret__;
                    ret__ = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        _System.Collections.Generic.LinkedList<Test.FixedStruct> tmpVal__;
                        tmpVal__ = Test.FixedStructListHelper.read(is__);
                        ret__ = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        _System.Collections.Generic.LinkedList<Test.FixedStruct> tmpVal__;
                        tmpVal__ = Test.FixedStructListHelper.read(is__);
                        p3 = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opFixedStructSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                    {
                        os__.writeSize(p1.Value == null ? 1 : p1.Value.Length * 4 + (p1.Value.Length > 254 ? 5 : 1));
                        Test.FixedStructSeqHelper.write(os__, p1.Value);
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<Test.FixedStruct[]> ret__;
                    ret__ = new Ice.Optional<Test.FixedStruct[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        Test.FixedStruct[] tmpVal__;
                        tmpVal__ = Test.FixedStructSeqHelper.read(is__);
                        ret__ = new Ice.Optional<Test.FixedStruct[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<Test.FixedStruct[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        Test.FixedStruct[] tmpVal__;
                        tmpVal__ = Test.FixedStructSeqHelper.read(is__);
                        p3 = new Ice.Optional<Test.FixedStruct[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<Test.FixedStruct[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opFloat", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeFloat(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<float> ret__;
                    ret__ = is__.readFloat(1);
                    p3 = is__.readFloat(3);
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opFloatSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeFloatSeq(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<float[]> ret__;
                    ret__ = new Ice.Optional<float[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        float[] tmpVal__;
                        tmpVal__ = Test.FloatSeqHelper.read(is__);
                        ret__ = new Ice.Optional<float[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<float[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        float[] tmpVal__;
                        tmpVal__ = Test.FloatSeqHelper.read(is__);
                        p3 = new Ice.Optional<float[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<float[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opInt", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeInt(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<int> ret__;
                    ret__ = is__.readInt(1);
                    p3 = is__.readInt(3);
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opIntIntDict", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                    {
                        os__.writeSize(p1.Value == null ? 1 : p1.Value.Count * 8 + (p1.Value.Count > 254 ? 5 : 1));
                        Test.IntIntDictHelper.write(os__, p1.Value);
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> ret__;
                    ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        _System.Collections.Generic.Dictionary<int, int> tmpVal__ = new _System.Collections.Generic.Dictionary<int, int>();
                        tmpVal__ = Test.IntIntDictHelper.read(is__);
                        ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        _System.Collections.Generic.Dictionary<int, int> tmpVal__ = new _System.Collections.Generic.Dictionary<int, int>();
                        tmpVal__ = Test.IntIntDictHelper.read(is__);
                        p3 = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opIntSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeIntSeq(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<int[]> ret__;
                    ret__ = new Ice.Optional<int[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        int[] tmpVal__;
                        tmpVal__ = Test.IntSeqHelper.read(is__);
                        ret__ = new Ice.Optional<int[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<int[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        int[] tmpVal__;
                        tmpVal__ = Test.IntSeqHelper.read(is__);
                        p3 = new Ice.Optional<int[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<int[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opLong", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeLong(1, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<long> ret__;
                    p3 = is__.readLong(2);
                    ret__ = is__.readLong(3);
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opLongSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeLongSeq(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<long[]> ret__;
                    ret__ = new Ice.Optional<long[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        long[] tmpVal__;
                        tmpVal__ = Test.LongSeqHelper.read(is__);
                        ret__ = new Ice.Optional<long[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<long[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        long[] tmpVal__;
                        tmpVal__ = Test.LongSeqHelper.read(is__);
                        p3 = new Ice.Optional<long[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<long[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opMyEnum", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue)
                    {
                        os__.writeEnum(2, (int)p1.Value, 1);
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<Test.MyEnum> ret__;
                    ret__ = new Ice.Optional<Test.MyEnum>();
                    if(is__.readOpt(1, Ice.OptionalFormat.Size))
                    {
                        Test.MyEnum tmpVal__;
                        tmpVal__ = (Test.MyEnum)is__.readEnum(0);
                        ret__ = new Ice.Optional<Test.MyEnum>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<Test.MyEnum>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.Size))
                    {
                        Test.MyEnum tmpVal__;
                        tmpVal__ = (Test.MyEnum)is__.readEnum(0);
                        p3 = new Ice.Optional<Test.MyEnum>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<Test.MyEnum>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opOneOptional", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeObject(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<Test.OneOptional> ret__;
                    ret__ = new Ice.Optional<Test.OneOptional>();
                    Ice.OptionalPatcher<Test.OneOptional> p3__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
                    Ice.OptionalPatcher<Test.OneOptional> ret__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
                    is__.readObject(1, ret__PP);
                    is__.readObject(3, p3__PP);
                    og__.endReadParams();
                    p3 = p3__PP.value;
                    ret__ = ret__PP.value;
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opOneOptionalProxy", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.FSize))
                    {
                        os__.startSize();
                        Test.OneOptionalPrxHelper.write__(os__, p1.Value);
                        os__.endSize();
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<Test.OneOptionalPrx> ret__;
                    ret__ = new Ice.Optional<Test.OneOptionalPrx>();
                    if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        Test.OneOptionalPrx tmpVal__;
                        tmpVal__ = Test.OneOptionalPrxHelper.read__(is__);
                        ret__ = new Ice.Optional<Test.OneOptionalPrx>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<Test.OneOptionalPrx>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        Test.OneOptionalPrx tmpVal__;
                        tmpVal__ = Test.OneOptionalPrxHelper.read__(is__);
                        p3 = new Ice.Optional<Test.OneOptionalPrx>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<Test.OneOptionalPrx>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opOptionalException", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeInt(1, a);
                    os__.writeString(2, b);
                    os__.writeObject(3, o);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Test.OptionalException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.readEmptyParams();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opRequiredException", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeInt(1, a);
                    os__.writeString(2, b);
                    os__.writeObject(3, o);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Test.OptionalException)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    og__.readEmptyParams();
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opSerializable", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeByteSeq(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<byte[]> ret__;
                    ret__ = new Ice.Optional<byte[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal__;
                        tmpVal__ = Test.SerializableHelper.read(is__);
                        ret__ = new Ice.Optional<byte[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<byte[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        byte[] tmpVal__;
                        tmpVal__ = Test.SerializableHelper.read(is__);
                        p3 = new Ice.Optional<byte[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<byte[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opShort", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeShort(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<short> ret__;
                    ret__ = is__.readShort(1);
                    p3 = is__.readShort(3);
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opShortSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeShortSeq(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<short[]> ret__;
                    ret__ = new Ice.Optional<short[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        short[] tmpVal__;
                        tmpVal__ = Test.ShortSeqHelper.read(is__);
                        ret__ = new Ice.Optional<short[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<short[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        short[] tmpVal__;
                        tmpVal__ = Test.ShortSeqHelper.read(is__);
                        p3 = new Ice.Optional<short[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<short[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opSmallStruct", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                    {
                        os__.writeSize(1);
                        p1.Value.write__(os__);
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<Test.SmallStruct> ret__;
                    ret__ = new Ice.Optional<Test.SmallStruct>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        Test.SmallStruct tmpVal__ = new Test.SmallStruct();
                        tmpVal__.read__(is__);
                        ret__ = new Ice.Optional<Test.SmallStruct>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<Test.SmallStruct>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        is__.skipSize();
                        Test.SmallStruct tmpVal__ = new Test.SmallStruct();
                        tmpVal__.read__(is__);
                        p3 = new Ice.Optional<Test.SmallStruct>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<Test.SmallStruct>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opSmallStructList", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                    {
                        Test.SmallStructListHelper.write(os__, p1.Value);
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> ret__;
                    ret__ = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        _System.Collections.Generic.List<Test.SmallStruct> tmpVal__;
                        tmpVal__ = Test.SmallStructListHelper.read(is__);
                        ret__ = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        _System.Collections.Generic.List<Test.SmallStruct> tmpVal__;
                        tmpVal__ = Test.SmallStructListHelper.read(is__);
                        p3 = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opSmallStructSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.VSize))
                    {
                        Test.SmallStructSeqHelper.write(os__, p1.Value);
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<Test.SmallStruct[]> ret__;
                    ret__ = new Ice.Optional<Test.SmallStruct[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.VSize))
                    {
                        Test.SmallStruct[] tmpVal__;
                        tmpVal__ = Test.SmallStructSeqHelper.read(is__);
                        ret__ = new Ice.Optional<Test.SmallStruct[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<Test.SmallStruct[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.VSize))
                    {
                        Test.SmallStruct[] tmpVal__;
                        tmpVal__ = Test.SmallStructSeqHelper.read(is__);
                        p3 = new Ice.Optional<Test.SmallStruct[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<Test.SmallStruct[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opString", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<string> ret__;
                    ret__ = is__.readString(1);
                    p3 = is__.readString(3);
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opStringIntDict", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.FSize))
                    {
                        os__.startSize();
                        Test.StringIntDictHelper.write(os__, p1.Value);
                        os__.endSize();
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> ret__;
                    ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
                    if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        _System.Collections.Generic.Dictionary<string, int> tmpVal__ = new _System.Collections.Generic.Dictionary<string, int>();
                        tmpVal__ = Test.StringIntDictHelper.read(is__);
                        ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        _System.Collections.Generic.Dictionary<string, int> tmpVal__ = new _System.Collections.Generic.Dictionary<string, int>();
                        tmpVal__ = Test.StringIntDictHelper.read(is__);
                        p3 = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opStringSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeStringSeq(2, p1);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<string[]> ret__;
                    ret__ = new Ice.Optional<string[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        string[] tmpVal__;
                        tmpVal__ = Test.StringSeqHelper.read(is__);
                        ret__ = new Ice.Optional<string[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<string[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        string[] tmpVal__;
                        tmpVal__ = Test.StringSeqHelper.read(is__);
                        p3 = new Ice.Optional<string[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<string[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opVarStruct", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.FSize))
                    {
                        os__.startSize();
                        if(p1.Value == null)
                        {
                            Test.VarStruct tmp__ = new Test.VarStruct();
                            tmp__.write__(os__);
                        }
                        else
                        {
                            p1.Value.write__(os__);
                        }
                        os__.endSize();
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<Test.VarStruct> ret__;
                    ret__ = new Ice.Optional<Test.VarStruct>();
                    if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        Test.VarStruct tmpVal__ = null;
                        if(tmpVal__ == null)
                        {
                            tmpVal__ = new Test.VarStruct();
                        }
                        tmpVal__.read__(is__);
                        ret__ = new Ice.Optional<Test.VarStruct>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<Test.VarStruct>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        Test.VarStruct tmpVal__ = null;
                        if(tmpVal__ == null)
                        {
                            tmpVal__ = new Test.VarStruct();
                        }
                        tmpVal__.read__(is__);
                        p3 = new Ice.Optional<Test.VarStruct>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<Test.VarStruct>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("opVarStructSeq", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    if(p1.HasValue && os__.writeOpt(2, Ice.OptionalFormat.FSize))
                    {
                        os__.startSize();
                        Test.VarStructSeqHelper.write(os__, p1.Value);
                        os__.endSize();
                    }
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Optional<Test.VarStruct[]> ret__;
                    ret__ = new Ice.Optional<Test.VarStruct[]>();
                    if(is__.readOpt(1, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        Test.VarStruct[] tmpVal__;
                        tmpVal__ = Test.VarStructSeqHelper.read(is__);
                        ret__ = new Ice.Optional<Test.VarStruct[]>(tmpVal__);
                    }
                    else
                    {
                        ret__ = new Ice.Optional<Test.VarStruct[]>();
                    }
                    if(is__.readOpt(3, Ice.OptionalFormat.FSize))
                    {
                        is__.skip(4);
                        Test.VarStruct[] tmpVal__;
                        tmpVal__ = Test.VarStructSeqHelper.read(is__);
                        p3 = new Ice.Optional<Test.VarStruct[]>(tmpVal__);
                    }
                    else
                    {
                        p3 = new Ice.Optional<Test.VarStruct[]>();
                    }
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Ice.Object pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("pingPong", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeObject(o);
                    os__.writePendingObjects();
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.Object ret__;
                    IceInternal.ParamPatcher<Ice.Object> ret__PP = new IceInternal.ParamPatcher<Ice.Object>(Ice.ObjectImpl.ice_staticId());
                    is__.readObject(ret__PP);
                    is__.readPendingObjects();
                    og__.endReadParams();
                    ret__ = ret__PP.value;
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("returnOptionalClass", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeBool(req);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    Ice.OptionalPatcher<Test.OneOptional> o__PP = new Ice.OptionalPatcher<Test.OneOptional>(Test.OneOptional.ice_staticId());
                    is__.readObject(1, o__PP);
                    og__.endReadParams();
                    o = o__PP.value;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("sendOptionalClass", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeBool(req);
                    os__.writeObject(1, o);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("shutdown", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                if(og__.hasResponse())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.readEmptyParams();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("supportsCsharpSerializable", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    bool ret__;
                    ret__ = is__.readBool();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("supportsJavaSerializable", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    bool ret__;
                    ret__ = is__.readBool();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("supportsRequiredParams", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                og__.writeEmptyParams();
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    bool ret__;
                    ret__ = is__.readBool();
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace Test
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OneOptionalDelD_ : Ice.ObjectDelD_, OneOptionalDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class MultiOptionalDelD_ : Ice.ObjectDelD_, MultiOptionalDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class ADelD_ : Ice.ObjectDelD_, ADel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class BDelD_ : Ice.ObjectDelD_, BDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class CDelD_ : Ice.ObjectDelD_, CDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class WDDelD_ : Ice.ObjectDelD_, WDDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class OptionalWithCustomDelD_ : Ice.ObjectDelD_, OptionalWithCustomDel_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public sealed class InitialDelD_ : Ice.ObjectDelD_, InitialDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<bool> opBool(Ice.Optional<bool> p1, out Ice.Optional<bool> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opBool", Ice.OperationMode.Normal, context__);
            Ice.Optional<bool> p3Holder__ = new Ice.Optional<bool>();
            Ice.Optional<bool> result__ = new Ice.Optional<bool>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opBool(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<bool[]> opBoolSeq(Ice.Optional<bool[]> p1, out Ice.Optional<bool[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opBoolSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<bool[]> p3Holder__ = new Ice.Optional<bool[]>();
            Ice.Optional<bool[]> result__ = new Ice.Optional<bool[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opBoolSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<byte> opByte(Ice.Optional<byte> p1, out Ice.Optional<byte> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opByte", Ice.OperationMode.Normal, context__);
            Ice.Optional<byte> p3Holder__ = new Ice.Optional<byte>();
            Ice.Optional<byte> result__ = new Ice.Optional<byte>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opByte(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<byte[]> opByteSeq(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opByteSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<byte[]> p3Holder__ = new Ice.Optional<byte[]>();
            Ice.Optional<byte[]> result__ = new Ice.Optional<byte[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opByteSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void opClassAndUnknownOptional(Test.A p, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opClassAndUnknownOptional", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.opClassAndUnknownOptional(p, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void opDerivedException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opDerivedException", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.opDerivedException(a, b, o, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Test.OptionalException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<double> opDouble(Ice.Optional<double> p1, out Ice.Optional<double> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opDouble", Ice.OperationMode.Normal, context__);
            Ice.Optional<double> p3Holder__ = new Ice.Optional<double>();
            Ice.Optional<double> result__ = new Ice.Optional<double>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opDouble(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<double[]> opDoubleSeq(Ice.Optional<double[]> p1, out Ice.Optional<double[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opDoubleSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<double[]> p3Holder__ = new Ice.Optional<double[]>();
            Ice.Optional<double[]> result__ = new Ice.Optional<double[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opDoubleSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<Test.FixedStruct> opFixedStruct(Ice.Optional<Test.FixedStruct> p1, out Ice.Optional<Test.FixedStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opFixedStruct", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.FixedStruct> p3Holder__ = new Ice.Optional<Test.FixedStruct>();
            Ice.Optional<Test.FixedStruct> result__ = new Ice.Optional<Test.FixedStruct>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opFixedStruct(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> opFixedStructList(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p1, out Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opFixedStructList", Ice.OperationMode.Normal, context__);
            Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3Holder__ = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>();
            Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> result__ = new Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opFixedStructList(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<Test.FixedStruct[]> opFixedStructSeq(Ice.Optional<Test.FixedStruct[]> p1, out Ice.Optional<Test.FixedStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opFixedStructSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.FixedStruct[]> p3Holder__ = new Ice.Optional<Test.FixedStruct[]>();
            Ice.Optional<Test.FixedStruct[]> result__ = new Ice.Optional<Test.FixedStruct[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opFixedStructSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<float> opFloat(Ice.Optional<float> p1, out Ice.Optional<float> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opFloat", Ice.OperationMode.Normal, context__);
            Ice.Optional<float> p3Holder__ = new Ice.Optional<float>();
            Ice.Optional<float> result__ = new Ice.Optional<float>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opFloat(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<float[]> opFloatSeq(Ice.Optional<float[]> p1, out Ice.Optional<float[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opFloatSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<float[]> p3Holder__ = new Ice.Optional<float[]>();
            Ice.Optional<float[]> result__ = new Ice.Optional<float[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opFloatSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<int> opInt(Ice.Optional<int> p1, out Ice.Optional<int> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opInt", Ice.OperationMode.Normal, context__);
            Ice.Optional<int> p3Holder__ = new Ice.Optional<int>();
            Ice.Optional<int> result__ = new Ice.Optional<int>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opInt(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> opIntIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opIntIntDict", Ice.OperationMode.Normal, context__);
            Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3Holder__ = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
            Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> result__ = new Ice.Optional<_System.Collections.Generic.Dictionary<int, int>>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opIntIntDict(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<int[]> opIntSeq(Ice.Optional<int[]> p1, out Ice.Optional<int[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opIntSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<int[]> p3Holder__ = new Ice.Optional<int[]>();
            Ice.Optional<int[]> result__ = new Ice.Optional<int[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opIntSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<long> opLong(Ice.Optional<long> p1, out Ice.Optional<long> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opLong", Ice.OperationMode.Normal, context__);
            Ice.Optional<long> p3Holder__ = new Ice.Optional<long>();
            Ice.Optional<long> result__ = new Ice.Optional<long>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opLong(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<long[]> opLongSeq(Ice.Optional<long[]> p1, out Ice.Optional<long[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opLongSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<long[]> p3Holder__ = new Ice.Optional<long[]>();
            Ice.Optional<long[]> result__ = new Ice.Optional<long[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opLongSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<Test.MyEnum> opMyEnum(Ice.Optional<Test.MyEnum> p1, out Ice.Optional<Test.MyEnum> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opMyEnum", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.MyEnum> p3Holder__ = new Ice.Optional<Test.MyEnum>();
            Ice.Optional<Test.MyEnum> result__ = new Ice.Optional<Test.MyEnum>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opMyEnum(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<Test.OneOptional> opOneOptional(Ice.Optional<Test.OneOptional> p1, out Ice.Optional<Test.OneOptional> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opOneOptional", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.OneOptional> p3Holder__ = new Ice.Optional<Test.OneOptional>();
            Ice.Optional<Test.OneOptional> result__ = new Ice.Optional<Test.OneOptional>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opOneOptional(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<Test.OneOptionalPrx> opOneOptionalProxy(Ice.Optional<Test.OneOptionalPrx> p1, out Ice.Optional<Test.OneOptionalPrx> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opOneOptionalProxy", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.OneOptionalPrx> p3Holder__ = new Ice.Optional<Test.OneOptionalPrx>();
            Ice.Optional<Test.OneOptionalPrx> result__ = new Ice.Optional<Test.OneOptionalPrx>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opOneOptionalProxy(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void opOptionalException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opOptionalException", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.opOptionalException(a, b, o, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Test.OptionalException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void opRequiredException(Ice.Optional<int> a, Ice.Optional<string> b, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opRequiredException", Ice.OperationMode.Normal, context__);
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    servant__.opRequiredException(a, b, o, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Test.OptionalException)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<byte[]> opSerializable(Ice.Optional<byte[]> p1, out Ice.Optional<byte[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opSerializable", Ice.OperationMode.Normal, context__);
            Ice.Optional<byte[]> p3Holder__ = new Ice.Optional<byte[]>();
            Ice.Optional<byte[]> result__ = new Ice.Optional<byte[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opSerializable(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<short> opShort(Ice.Optional<short> p1, out Ice.Optional<short> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opShort", Ice.OperationMode.Normal, context__);
            Ice.Optional<short> p3Holder__ = new Ice.Optional<short>();
            Ice.Optional<short> result__ = new Ice.Optional<short>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opShort(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<short[]> opShortSeq(Ice.Optional<short[]> p1, out Ice.Optional<short[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opShortSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<short[]> p3Holder__ = new Ice.Optional<short[]>();
            Ice.Optional<short[]> result__ = new Ice.Optional<short[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opShortSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<Test.SmallStruct> opSmallStruct(Ice.Optional<Test.SmallStruct> p1, out Ice.Optional<Test.SmallStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opSmallStruct", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.SmallStruct> p3Holder__ = new Ice.Optional<Test.SmallStruct>();
            Ice.Optional<Test.SmallStruct> result__ = new Ice.Optional<Test.SmallStruct>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opSmallStruct(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> opSmallStructList(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p1, out Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opSmallStructList", Ice.OperationMode.Normal, context__);
            Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3Holder__ = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
            Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> result__ = new Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opSmallStructList(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<Test.SmallStruct[]> opSmallStructSeq(Ice.Optional<Test.SmallStruct[]> p1, out Ice.Optional<Test.SmallStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opSmallStructSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.SmallStruct[]> p3Holder__ = new Ice.Optional<Test.SmallStruct[]>();
            Ice.Optional<Test.SmallStruct[]> result__ = new Ice.Optional<Test.SmallStruct[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opSmallStructSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<string> opString(Ice.Optional<string> p1, out Ice.Optional<string> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opString", Ice.OperationMode.Normal, context__);
            Ice.Optional<string> p3Holder__ = new Ice.Optional<string>();
            Ice.Optional<string> result__ = new Ice.Optional<string>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opString(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> opStringIntDict(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p1, out Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opStringIntDict", Ice.OperationMode.Normal, context__);
            Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3Holder__ = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
            Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> result__ = new Ice.Optional<_System.Collections.Generic.Dictionary<string, int>>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opStringIntDict(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<string[]> opStringSeq(Ice.Optional<string[]> p1, out Ice.Optional<string[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opStringSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<string[]> p3Holder__ = new Ice.Optional<string[]>();
            Ice.Optional<string[]> result__ = new Ice.Optional<string[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opStringSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<Test.VarStruct> opVarStruct(Ice.Optional<Test.VarStruct> p1, out Ice.Optional<Test.VarStruct> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opVarStruct", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.VarStruct> p3Holder__ = new Ice.Optional<Test.VarStruct>();
            Ice.Optional<Test.VarStruct> result__ = new Ice.Optional<Test.VarStruct>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opVarStruct(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Optional<Test.VarStruct[]> opVarStructSeq(Ice.Optional<Test.VarStruct[]> p1, out Ice.Optional<Test.VarStruct[]> p3, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "opVarStructSeq", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.VarStruct[]> p3Holder__ = new Ice.Optional<Test.VarStruct[]>();
            Ice.Optional<Test.VarStruct[]> result__ = new Ice.Optional<Test.VarStruct[]>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.opVarStructSeq(p1, out p3Holder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            p3 = p3Holder__;
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Ice.Object pingPong(Ice.Object o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "pingPong", Ice.OperationMode.Normal, context__);
            Ice.Object result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.pingPong(o, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void returnOptionalClass(bool req, out Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "returnOptionalClass", Ice.OperationMode.Normal, context__);
            Ice.Optional<Test.OneOptional> oHolder__ = new Ice.Optional<Test.OneOptional>();
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.returnOptionalClass(req, out oHolder__, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            o = oHolder__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void sendOptionalClass(bool req, Ice.Optional<Test.OneOptional> o, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "sendOptionalClass", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.sendOptionalClass(req, o, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "shutdown", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.shutdown(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool supportsCsharpSerializable(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "supportsCsharpSerializable", Ice.OperationMode.Normal, context__);
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.supportsCsharpSerializable(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool supportsJavaSerializable(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "supportsJavaSerializable", Ice.OperationMode.Normal, context__);
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.supportsJavaSerializable(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool supportsRequiredParams(_System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "supportsRequiredParams", Ice.OperationMode.Normal, context__);
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Initial servant__ = null;
                try
                {
                    servant__ = (Initial)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.supportsRequiredParams(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }
}

namespace Test
{
}

namespace Test
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_shutdown : Ice.AMICallbackBase
    {
        public abstract void ice_response();

        public void response__()
        {
            ice_response();
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_pingPong : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Object ret__);

        public void response__(Ice.Object ret__)
        {
            ice_response(ret__);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opOptionalException : Ice.AMICallbackBase
    {
        public abstract void ice_response();

        public void response__()
        {
            ice_response();
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opDerivedException : Ice.AMICallbackBase
    {
        public abstract void ice_response();

        public void response__()
        {
            ice_response();
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opRequiredException : Ice.AMICallbackBase
    {
        public abstract void ice_response();

        public void response__()
        {
            ice_response();
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opByte : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<byte> ret__, Ice.Optional<byte> p3);

        public void response__(Ice.Optional<byte> ret__, Ice.Optional<byte> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opBool : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<bool> ret__, Ice.Optional<bool> p3);

        public void response__(Ice.Optional<bool> ret__, Ice.Optional<bool> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opShort : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<short> ret__, Ice.Optional<short> p3);

        public void response__(Ice.Optional<short> ret__, Ice.Optional<short> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opInt : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<int> ret__, Ice.Optional<int> p3);

        public void response__(Ice.Optional<int> ret__, Ice.Optional<int> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opLong : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<long> ret__, Ice.Optional<long> p3);

        public void response__(Ice.Optional<long> ret__, Ice.Optional<long> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opFloat : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<float> ret__, Ice.Optional<float> p3);

        public void response__(Ice.Optional<float> ret__, Ice.Optional<float> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opDouble : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<double> ret__, Ice.Optional<double> p3);

        public void response__(Ice.Optional<double> ret__, Ice.Optional<double> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opString : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<string> ret__, Ice.Optional<string> p3);

        public void response__(Ice.Optional<string> ret__, Ice.Optional<string> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opMyEnum : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.MyEnum> ret__, Ice.Optional<Test.MyEnum> p3);

        public void response__(Ice.Optional<Test.MyEnum> ret__, Ice.Optional<Test.MyEnum> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opSmallStruct : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.SmallStruct> ret__, Ice.Optional<Test.SmallStruct> p3);

        public void response__(Ice.Optional<Test.SmallStruct> ret__, Ice.Optional<Test.SmallStruct> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opFixedStruct : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.FixedStruct> ret__, Ice.Optional<Test.FixedStruct> p3);

        public void response__(Ice.Optional<Test.FixedStruct> ret__, Ice.Optional<Test.FixedStruct> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opVarStruct : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.VarStruct> ret__, Ice.Optional<Test.VarStruct> p3);

        public void response__(Ice.Optional<Test.VarStruct> ret__, Ice.Optional<Test.VarStruct> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opOneOptional : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.OneOptional> ret__, Ice.Optional<Test.OneOptional> p3);

        public void response__(Ice.Optional<Test.OneOptional> ret__, Ice.Optional<Test.OneOptional> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opOneOptionalProxy : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.OneOptionalPrx> ret__, Ice.Optional<Test.OneOptionalPrx> p3);

        public void response__(Ice.Optional<Test.OneOptionalPrx> ret__, Ice.Optional<Test.OneOptionalPrx> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opByteSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<byte[]> ret__, Ice.Optional<byte[]> p3);

        public void response__(Ice.Optional<byte[]> ret__, Ice.Optional<byte[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opBoolSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<bool[]> ret__, Ice.Optional<bool[]> p3);

        public void response__(Ice.Optional<bool[]> ret__, Ice.Optional<bool[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opShortSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<short[]> ret__, Ice.Optional<short[]> p3);

        public void response__(Ice.Optional<short[]> ret__, Ice.Optional<short[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opIntSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<int[]> ret__, Ice.Optional<int[]> p3);

        public void response__(Ice.Optional<int[]> ret__, Ice.Optional<int[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opLongSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<long[]> ret__, Ice.Optional<long[]> p3);

        public void response__(Ice.Optional<long[]> ret__, Ice.Optional<long[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opFloatSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<float[]> ret__, Ice.Optional<float[]> p3);

        public void response__(Ice.Optional<float[]> ret__, Ice.Optional<float[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opDoubleSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<double[]> ret__, Ice.Optional<double[]> p3);

        public void response__(Ice.Optional<double[]> ret__, Ice.Optional<double[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opStringSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<string[]> ret__, Ice.Optional<string[]> p3);

        public void response__(Ice.Optional<string[]> ret__, Ice.Optional<string[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opSmallStructSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.SmallStruct[]> ret__, Ice.Optional<Test.SmallStruct[]> p3);

        public void response__(Ice.Optional<Test.SmallStruct[]> ret__, Ice.Optional<Test.SmallStruct[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opSmallStructList : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> ret__, Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3);

        public void response__(Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> ret__, Ice.Optional<_System.Collections.Generic.List<Test.SmallStruct>> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opFixedStructSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.FixedStruct[]> ret__, Ice.Optional<Test.FixedStruct[]> p3);

        public void response__(Ice.Optional<Test.FixedStruct[]> ret__, Ice.Optional<Test.FixedStruct[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opFixedStructList : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> ret__, Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3);

        public void response__(Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> ret__, Ice.Optional<_System.Collections.Generic.LinkedList<Test.FixedStruct>> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opVarStructSeq : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.VarStruct[]> ret__, Ice.Optional<Test.VarStruct[]> p3);

        public void response__(Ice.Optional<Test.VarStruct[]> ret__, Ice.Optional<Test.VarStruct[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opSerializable : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<byte[]> ret__, Ice.Optional<byte[]> p3);

        public void response__(Ice.Optional<byte[]> ret__, Ice.Optional<byte[]> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opIntIntDict : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> ret__, Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3);

        public void response__(Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> ret__, Ice.Optional<_System.Collections.Generic.Dictionary<int, int>> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opStringIntDict : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> ret__, Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3);

        public void response__(Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> ret__, Ice.Optional<_System.Collections.Generic.Dictionary<string, int>> p3)
        {
            ice_response(ret__, p3);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_opClassAndUnknownOptional : Ice.AMICallbackBase
    {
        public abstract void ice_response();

        public void response__()
        {
            ice_response();
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_sendOptionalClass : Ice.AMICallbackBase
    {
        public abstract void ice_response();

        public void response__()
        {
            ice_response();
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_returnOptionalClass : Ice.AMICallbackBase
    {
        public abstract void ice_response(Ice.Optional<Test.OneOptional> o);

        public void response__(Ice.Optional<Test.OneOptional> o)
        {
            ice_response(o);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_supportsRequiredParams : Ice.AMICallbackBase
    {
        public abstract void ice_response(bool ret__);

        public void response__(bool ret__)
        {
            ice_response(ret__);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_supportsJavaSerializable : Ice.AMICallbackBase
    {
        public abstract void ice_response(bool ret__);

        public void response__(bool ret__)
        {
            ice_response(ret__);
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5b")]
    public abstract class AMI_Initial_supportsCsharpSerializable : Ice.AMICallbackBase
    {
        public abstract void ice_response(bool ret__);

        public void response__(bool ret__)
        {
            ice_response(ret__);
        }
    }
}
