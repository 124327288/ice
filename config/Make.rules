# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Select an installation base directory. The directory will be created
# if it does not exist.
#
prefix			?= /opt/Ice-$(version)

#
# The "root directory" for runpath embedded in executables. Can be set
# to change the runpath added to Ice executables.
#
# If not set, a runpath relative to the path of the executable is
# embedded (using @loader_path on OS X and $ORIGIN on Linux).
#
#embedded_runpath_prefix ?= /opt/Ice-$(mmversion)

#
# Define embedded_runpath as no if you don't want any runpath added to
# the executables. If not set, defaults to to "yes"
#
#embedded_runpath 	?= yes

#
# Define OPTIMIZE as yes if you want to build with optimization.
# Otherwise Ice is build with debug information.
#
#OPTIMIZE		= yes

#
# Default Mutex protocol: one of PrioNone or PrioInherit.
#
#DEFAULT_MUTEX_PROTOCOL ?= PrioNone

#
# Define PLATFORMS to the list of platforms to build. This defaults
# to the first supported platform for this system.
#
# Run `make print V=supported-platforms' to see the list of supported
# platforms on this system.
#
PLATFORMS              	?= $(firstword $(supported-platforms))

#
# Configurations to build. This defaults to the first supported
# configuration.
#
# Run `make print V=supported-configs` to see the list of supported
# configurations.
#
CONFIGS			?= $(firstword $(supported-configs))

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

os			?= $(shell uname)

include	$(top_srcdir)/config/Make.project.rules
include	$(top_srcdir)/config/Make.tests.rules
include	$(top_srcdir)/config/Make.rules.$(os)

ifeq ($(USE_BIN_DIST),yes)
prefix 			:= $(or $(ICE_HOME),$(if $(filter Darwin,$(os)),/usr/local,/usr))
bindir			?= $(install_bindir)
libdir			?= $(install_libdir)
slicedir 		?= $(install_slicedir)
includedir		?= $(install_includedir)
else
bindir			?= $(call mappingdir,$(or $1,$(currentdir)),bin)
libdir			?= $(call mappingdir,$(or $1,$(currentdir)),lib)
slicedir		?= $(top_srcdir)/slice
includedir		?= $(call mappingdir,$(or $1,$(currentdir)),include)
endif

srcdir 			?= $(call mappingdir,$(or $1,$(currentdir)),src)

usr_dir_install		:= $(filter /usr%,$(prefix))
install_bindir	  	?= $(prefix)/bin
install_libdir	  	?= $(prefix)/lib
install_slicedir 	?= $(prefix)$(if $(usr_dir_install),/share/Ice-$(version))/slice
install_includedir	?= $(prefix)/include
install_docdir 		?= $(prefix)$(if $(usr_dir_install),/share/Ice-$(version))
install_mandir		?= $(prefix)$(if $(usr_dir_install),/share)/man
install_configdir 	?= $(prefix)$(if $(usr_dir_install),/share/Ice-$(version),/config)

version     		= 3.7a0
mmversion		= 3.7
soversion   		= 37a0

INSTALL			= cp -fp
MV  			= mv -f
RM  			= rm -f
MKDIR 			= mkdir
CHMOD			= chmod

Q 			:= $(if $(V),,@)
E 			:= $(if $(V),@:,@echo)

#
# 3rd party library defaults
#
mcpp_ldflags		?= -lmcpp
iconv_ldflags		?= -liconv
expat_ldflags		?= -lexpat
bz2_ldflags		?= -lbz2
lmdb_ldflags		?= -llmdb

#
# Languages, platforms and configurations to build
#
supported-languages	?= cpp java python ruby php
supported-configs	?= shared

platforms 		= $(if $(filter all,$(PLATFORMS)),$(supported-platforms),$(PLATFORMS))
configs 		= $(if $(filter all,$(CONFIGS)),$(supported-configs),$(CONFIGS))
languages 		= $(if $(filter all,$(or $(LANGUAGES),all)),$(supported-languages),$(LANGUAGES))
build-platform		:= $(or $(build-platform),$(firstword $(supported-platforms)))

#
# Configuration variables
#
# The variables defined below are called with ($1=component,$2=platform,$3=config,$4=$1[$2-$3][,$5=subconfig])
#

# Defaults for configurations which don't override the specified variable
config_targetdir	= $(if $(filter %/build,$($1_targetdir)),$5)
config_objdir		= $5
config_dependency	= $5

# Static configuration for static builds
static_targetrule	= $(if $(filter-out program,$($1_target)),static-)
static_ldflags		= $$(call unique,$$(foreach d,$$(call get-all-deps,$4),$$(call make-static-dep-ldflags,$$d)))\
			  $$(strip $$(foreach d,$$(call get-all-deps,$1) $1,$$(call make-lib-ldflags,$$d)))\
			  $$(strip $$(foreach d,$$(call get-all-deps,$1) $1,$$(call make-system-lib-ldflags,$$d)))

# Shared configuration for shared builds
shared_projects		= %
shared_objdir		= $(if $(filter-out program,$($1_target)),shared/pic,shared/nopic)
shared_targetrule	= $(if $(filter-out program,$($1_target)),shared-)
shared_cppflags		= $(if $(filter-out program,$($1_target)),-fPIC)
shared_ldflags		= $$(call unique,$$(foreach d,$$($4_dependencies),$$(call make-shared-dep-ldflags,$$d,$4)))\
			  $$(strip $$(call make-lib-ldflags,$1))\
			  $$(strip $$(call make-system-lib-ldflags,$1))

#
# Platform variables
#
# The variables defined below are called with ($1=component,$2=platform,$3=config,$4=$1[$2-$3])
#

# Defaults for platforms which don't override the specified variable
platform_cc		?= $(CC)
platform_cxx		?= $(CXX)
platform_ld 		?= $(CXX)
platform_ar		?= $(AR)
platform_objdir		?= $2
platform_targetdir	?= /$2
platform_installdir	?=
platform_dependency	?= $2

# The projects and tests variable are used to load projects/tests in Makefile.mk fragments
projects :=
tests :=

#
# Global targets
#
.PHONY: all
all::

.PHONY: clean
clean::

.PHONY: distclean
distclean::

.PHONY: install
install::

#
# Rule to view the value of a variable (e.g.: make debug V=Ice_sources to print out the variable Ice_sources).
#
print:
	$(foreach v,$(filter $(V),$(.VARIABLES)),$(warning $v = $($v)))

#
# Helper functions
#
dirname 	= $(patsubst %/,%,$(if $(findstring /,$1),$(dir $1)))
currentdir 	= $(call dirname,$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST)))
unique		= $(strip $(if $1,$(firstword $1) $(call unique,$(filter-out $(firstword $1),$1))))
files-to-dirs 	= $(call unique,$(call dirname,$(filter $(if $2,$(addprefix %.,$2),%),$1)))

empty 		:=
space 		:= $(empty) $(empty)
comma 		:= ,

mappingdir2 	= $(if $(filter ../%,$1),$(call mappingdir2,$(patsubst ../%,%,$1)),$(firstword $(subst /, ,$1)))
mappingdir  	= $(patsubst $(lang_srcdir)/%,%,$(if $(filter-out ../%,$1),$2,$(top_srcdir)/$(call mappingdir2,$1)/$2))

#
# $(call make-dependency,$1=dependency,$2=component,$3=platform,$4=config)
#
# Computes dependency[config-platform] for given component.
#
make-dependency		= $1[$(subst $(space),-,$(call platform-and-config-var,dependency,$2,$3,$4))]

#
# Get direct and transitive dependencies
#
# $(call get-all-deps,component)
#
get-all-deps		= $(call unique,$(if $($1_dependencies),\
				$(foreach d,$($1_dependencies),$d $(call get-all-deps,$d)),$1))

#
# Helpers to compute ldflags for dependencies, libraries and system libraries
#
rpath-ldflag 		?= -Wl,-rpath,$1

ifneq ($(embedded_runpath),no)
ifeq ($(embedded_runpath_prefix),)
#
# Add rpath relative to the path of the loader if linking with library from different directory.
#
make-rpath-ldflag = $(if $(filter-out $1,$2),\
			$(if $(filter /%,$1),\
			    $(call rpath-ldflag,$1),\
		            $(call rpath-ldflag,$(loader_path)/$(call relpathfromdir,$(patsubst $(lang_srcdir)/%,%,$2))/$1)))
make-shared-dep-ldflags	= $(call make-rpath-ldflag,$($1_targetdir),$($2_targetdir)) -L$($1_targetdir) -l$($1_targetname)
else
#
# Add rpath with $(embedded_runpath_prefix) if linking with library installed in different directory.
#
make-rpath-ldflag = $(if $(filter-out $1,$2),$(call rpath-ldflag,$(patsubst $(prefix)/%,$(embedded_runpath_prefix)/%,$1)))
make-shared-dep-ldflags	= $(call make-rpath-ldflag,$($1_installdir),$($2_installdir)) -L$($1_targetdir) -l$($1_targetname)
endif
else
make-shared-dep-ldflags	= -L$($1_targetdir) -l$($1_targetname)
endif

make-static-dep-ldflags	= $($1_targetdir)/$(call mklibname,$($1_targetname))
make-lib-ldflags 	= $(foreach l,$($1_libs),$($l_ldflags))
make-system-lib-ldflags = $($1_system_libs)

#
# $(call repathfromdir,path), returns reversed relative path for directory (e.g.: test/Ice/operations
# is transformed to ../../..). This is used for rpath computations.
#
relpathfromdir 	= $(if $(findstring /,$1),$(call relpathfromdir,$(call dirname,$1))/..,..)

#
# $(call platform-and-config-var,$1=variable,$2=component,$3=platform,$4=configuration)
#
# Check for platform and configuration specific variable. For example, if variable
# is `objdir', for the configuration `cpp11-static' and the `osx' platform, the
# resulting value will be: $(osx_objdir) $(cpp11_objdir) $(static_objdir).
#
# The configuration value is decomposed based on the dash character and the value
# of each individual configurations is recomposed with a dash (so for the config
# cfg1-cfg2-...-cfgN, we return the value $(cfg1_VAR) $(cfg2_VAR) ... $(cfgN_VAR)
# for the variable VAR).
#
# This also supports default value for platform/configuration variables. So if
# osx_objdir isn't defined, we'll use the default value platform_objdir.
#
var-or-dflt		= $(call $(if $(filter undefined,$(origin $1)),$2,$1),$3,$4,$5,$6,$7)
platform-var		= $(strip $(foreach c,$3,$(call var-or-dflt,$c_$1,platform_$1,$2,$3,$4,$5)))
config-var		= $(strip $(foreach c,$(subst -,$(space),$4),$(call var-or-dflt,$c_$1,config_$1,$2,$3,$4,$5,$c)))
platform-and-config-var = $(strip $(platform-var) $(config-var))

#
# Functions to transform a list of source filenames to generated source/header, object or dependency filenames.
#Â 
generated-extensions := ice $(if $(filter yes,$(BISON_FLEX)),y l)
source-extensions    := ice y l cpp m mm

generated-to-source  = $(notdir $(foreach ext,$(generated-extensions),$(patsubst %.$(ext),%.$2,$(filter %.$(ext),$1))))
generated-to-header  = $(notdir $(foreach ext,$(generated-extensions),$(patsubst %.$(ext),%.h,$(filter %.$(ext),$1))))
source-to-object     = $(notdir $(foreach ext,$(source-extensions),$(patsubst %.$(ext),%.o,$(filter %.$(ext),$1))))
source-to-dependency = $(patsubst %,%.d,$(notdir $1))

