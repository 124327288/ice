['icebox', 'simple'].each {
 	def name = it
	project(":demoIceGrid${it.capitalize()}") {
		slice {
			java {
				include = ["${projectDir}", "${sliceDir}"]
				srcDir = '.'
			}
		}

		sourceSets {
			main {
				java {
					srcDir '.'
					output.classesDir "${buildDir}/classes"
				}
			}
		}

		dependencies {
			compile localDependency("ice")
			compile localDependency("icebox")
			compile localDependency("icegrid")
		}

        // Create a jar for the client & server which includes everything in the demo.
        task clientJar(type: Jar) {
        	version = ""
           	baseName = "client"
	        from(sourceSets.main.output) {
	        	include "**"
	        }
        }

        task serverJar(type: Jar) {
        	version = ""
	        baseName = "server"
	        from(sourceSets.main.output) {
	        	include "**"
	        }
        }

        clientJar {
            manifest {
                attributes("Main-Class": "Client")
                attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
            }
        }

        serverJar {
            manifest {
            	attributes("Main-Class": "Server")
                attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
            }
        }

        artifacts {
        	archives clientJar, serverJar;
        }

        // Don't create the default jar.
        jar.enabled = false

		idea.module {
		    excludeDirs -= file(buildDir)
		    buildDir.listFiles({d, f ->f != 'generated-src'} as FilenameFilter).each { excludeDirs += it }
		}
	}
}
