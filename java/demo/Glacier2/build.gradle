// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

['callback', 'chat', 'voip'].each {
 	def name = it
	project(":demoGlacier2${it.capitalize()}") {
		slice {
			java {
				include = ["${projectDir}", "${sliceDir}"]
				srcDir = '.'
			}
		}

		sourceSets {
			main {
				java {
					srcDir '.'
					output.classesDir "${buildDir}/classes"
				}
			}
		}

		dependencies {
			compile localDependency("ice")
			compile localDependency("glacier2")
		}

		// Create a jar for the client & server which includes everything in the demo.
		task clientJar(type: Jar) {
			version = ""
 		    baseName = "client"
    		from(sourceSets.main.output) {
        		include "**"
    		}
		}

		task serverJar(type: Jar) {
			version = ""
 		    baseName = "server"
    		from(sourceSets.main.output) {
        		include "**"
    		}
		}

		clientJar {
		    manifest {
		    	attributes("Main-Class": "Client")
		        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
		    }
		}

		serverJar {
		    manifest {
		    	attributes("Main-Class": "Server")
		    	attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
		    }
		}

		// The voip demo has no clientJar.
		if(name != "voip") {
			artifacts {
				archives clientJar;
			}
		}

		// The chat demo has no serverJar.
		if(name != "chat") {
			artifacts {
				archives serverJar;
			}
		}

		// Don't create the default jar.
		jar.enabled = false

		idea.module {
		    excludeDirs -= file(buildDir)
		    buildDir.listFiles({d, f ->f != 'generated-src'} as FilenameFilter).each { excludeDirs += it }
		}
	}
}
