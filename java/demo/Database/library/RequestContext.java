// **********************************************************************
//
// Copyright (c) 2003-2008 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

class RequestContext
{
    public static RequestContext
    getCurrentContext()
    {
        synchronized(_contextMap)
        {
            RequestContext context = _contextMap.get(Thread.currentThread());
            if(context != null)
            {
                //context._logger.trace("RequestContext", "getCurrentContext: thread " + Thread.currentThread() +
                                      //": connection: " + context._conn);
            }
            return context;
        }
    }

    public java.sql.PreparedStatement
    prepareStatement(String sql)
        throws java.sql.SQLException
    {
        java.sql.PreparedStatement stmt = _conn.prepareStatement(sql);
        _statements.add(stmt);
        return stmt;
    }

    public java.sql.PreparedStatement
    prepareStatement(String sql, int autoGeneratedKeys)
        throws java.sql.SQLException
    {
        java.sql.PreparedStatement stmt = _conn.prepareStatement(sql, autoGeneratedKeys);
        _statements.add(stmt);
        return stmt;
    }

    // Called to obtain ownership of the context. If context is no
    // longer released automatically when the current request has
    // completed.
    public void
    obtain()
    {
        // Remove the current context from the map.
        synchronized(_contextMap)
        {
            //_logger.trace("RequestContext", "obtain: connection: " + _conn);
            _contextMap.remove(Thread.currentThread());
        }
    }

    // Called to release the context resources.
    public void
    release()
    {
        synchronized(_contextMap)
        {
            RequestContext context = _contextMap.remove(Thread.currentThread());
            assert context == null;
        }

        //_logger.trace("RequestContext", "release: connection: " + _conn);

        // Release all resources.
        try
        {
            // Rollback the transaction if it was not committed.
            if(!_commit)
            {
                //_logger.trace("RequestContext", "rollback: thread " + Thread.currentThread() + ": connection: " + _conn);
                _conn.rollback();
            }

            java.util.Iterator<java.sql.Statement> p = _statements.iterator();
            while(p.hasNext())
            {
                p.next().close();
            }
        }
        catch(java.sql.SQLException e)
        {
            error(e);
        }

        _pool.release(_conn);
        
        _statements.clear();
        _conn = null;
        _pool = null;
    }

    public void
    commit()
        throws java.sql.SQLException
    {
        _conn.commit();
        //_logger.trace("RequestContext", "commit: thread " + Thread.currentThread() + ": connection: " + _conn);
        _commit = true;
    }

    RequestContext(Ice.Logger logger, ConnectionPool pool)
    {
        _logger = logger;
        _pool = pool;
        _conn = pool.acquire();
        synchronized(_contextMap)
        {
            //_logger.trace("RequestContext", "associate: thread " + Thread.currentThread() + ": connection: " + _conn);
            _contextMap.put(Thread.currentThread(), this);
        }
    }

    // Called only from the servant locator.
    void
    releaseFromLocator()
    {
        synchronized(_contextMap)
        {
            //_logger.trace("RequestContext", "release: connection: " + _conn);
            // Remove the current context from the map.
            RequestContext context = _contextMap.remove(Thread.currentThread());
            assert context == this;
        }
        release();
    }

    private void
    error(Exception ex)
    {
        java.io.StringWriter sw = new java.io.StringWriter();
        java.io.PrintWriter pw = new java.io.PrintWriter(sw);
        ex.printStackTrace(pw);
        pw.flush();
        _logger.error("RequestContext: error:\n" + sw.toString());
    }

    // A map of threads to request contexts.
    private static java.util.Map<Thread, RequestContext> _contextMap = new java.util.HashMap<Thread, RequestContext>();

    private Ice.Logger _logger;
    private ConnectionPool _pool;
    private java.util.List<java.sql.Statement> _statements = new java.util.LinkedList<java.sql.Statement>();
    private java.sql.Connection _conn;
    private boolean _commit = false;
}
