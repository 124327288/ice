// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

slice {
	java {
		include = ["${projectDir}", "${sliceDir}"]
		args = "--tie"
		srcDir = '.'
	}
}

sourceSets {
	main {
		java {
			srcDir '.'
			output.classesDir "${buildDir}/classes"
		}
	}
}

if (useMavenJars) {
	dependencies {
		compile "com.zeroc:ice:${iceVersion}"
		compile "com.zeroc:glacier2:${iceVersion}"
	}
} else if (distJarDir != null) {
	dependencies {
		compile files("${distJarDir}/Ice${versionSuffix}.jar")
		compile files("${distJarDir}/Glacier2${versionSuffix}.jar")
	}
} else {
	dependencies {
		compile project(':Ice')
		compile project(':Glacier2')
	}
}

// Create a jar for the client & server which includes everything in the demo.
task clientJar(type: Jar) {
   	baseName = "client"
    from(sourceSets.main.output) {
    	include "**"
    }
}

task serverJar(type: Jar) {
    baseName = "server"
    from(sourceSets.main.output) {
    	include "**"
    }
}

clientJar {
    manifest {
        attributes("Main-Class": "Client")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

serverJar {
    manifest {
    	attributes("Main-Class": "Server")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

artifacts {
	archives clientJar, serverJar;
}

idea.module {
	excludeDirs -= file(buildDir)
	buildDir.listFiles({d, f ->f != 'generated-src'} as FilenameFilter).each { excludeDirs += it }
}
