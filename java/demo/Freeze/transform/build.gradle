// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

slice {
	java {
		include = ["${projectDir}", "${sliceDir}"]
		srcDir = '.'
	}
	freezej {
		files = [file("ContactData.ice"), file("NewContactData.ice")]
		include = ["${projectDir}"]
		args = "--ice"
		dict {
			Contacts {
				javaType = "Demo.Contacts"
				key = "string"
				value = "Demo::ContactData"
				index = [[ member: 'phoneNumber', case: 'false']]
			}
		}
		dict {
			NewContacts {
				javaType = "Demo.NewContacts"
				key = "string"
				value = "Demo::NewContactData"
				index = [[ member: 'phoneNumber', case: 'false']]
			}
		}
	}
}

sourceSets {
	main {
		java {
			srcDir '.'
			output.classesDir "${buildDir}/classes"
		}
	}
}

if (useMavenJars) {
	dependencies {
		compile "com.zeroc:ice:${iceVersion}"
		compile "com.zeroc:freeze:${iceVersion}"
		compile 'com.sleepycat:db:5.3.28'
	}
} else if (distJarDir != null) {
	dependencies {
		compile files("${distJarDir}/Ice${versionSuffix}.jar")
		compile files("${distJarDir}/Freeze${versionSuffix}.jar")
		compile 'com.sleepycat:db:5.3.28'
	}
} else {
	dependencies {
		compile project(':Ice')
		compile project(':Freeze')
	}
}

// Create a jar for the client & server which includes everything in the demo.
task createJar(type: Jar) {
   	baseName = "create"
    from(sourceSets.main.output) {
    	include "**"
    }
}

task recreateJar(type: Jar) {
    baseName = "recreate"
    from(sourceSets.main.output) {
    	include "**"
    }
}

task readJar(type: Jar) {
    baseName = "read"
    from(sourceSets.main.output) {
    	include "**"
    }
}

task readnewJar(type: Jar) {
    baseName = "readnew"
    from(sourceSets.main.output) {
    	include "**"
    }
}

createJar {
    manifest {
        attributes("Main-Class": "Create")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

recreateJar {
    manifest {
    	attributes("Main-Class": "Recreate")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

readJar {
    manifest {
    	attributes("Main-Class": "Read")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

readnewJar {
    manifest {
    	attributes("Main-Class": "ReadNew")
        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
    }
}

artifacts {
	archives createJar, recreateJar, readJar, readnewJar;
}

idea.module {
	excludeDirs -= file(buildDir)
	buildDir.listFiles({d, f ->f != 'generated-src'} as FilenameFilter).each { excludeDirs += it }
}
