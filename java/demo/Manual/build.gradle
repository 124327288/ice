// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

['evictor_filesystem', 'lifecycle', 'printer', 'simple_filesystem'].each {
	// abc_def -> AbcDef
	def name = it.split('_').collect { it.capitalize() }.join()
	project(":demoManual${name}") {
		slice {
			java {
				include = ["${projectDir}", "${sliceDir}"]
				srcDir = '.'
			}
		}

		sourceSets {
			main {
				java {
					srcDir '.'
					output.classesDir "${buildDir}/classes"
				}
			}
		}

		dependencies {
			compile localDependency("ice")
		}

		if(name == "EvictorFilesystem") {
			dependencies {
				compile localDependency("freeze")
			}
			dependencies {
				runtime files(dbJar)
			}
		}

		// Create a jar for the client & server which includes everything in the demo.
		task clientJar(type: Jar) {
			version = ""
 		   	baseName = "client"
    		from(sourceSets.main.output) {
        		include "**"
    		}
		}

		task serverJar(type: Jar) {
			version = ""
 		    baseName = "server"
    		from(sourceSets.main.output) {
        		include "**"
    		}
		}

		clientJar {
		    manifest {
		    	attributes("Main-Class": "Client")
		        attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
		    }
		}

		serverJar {
		    manifest {
		    	attributes("Main-Class": "Server")
		    	attributes("Class-Path": configurations.compile.resolve().collect { it.toURI() }.join(' '))
		    }
		}

		artifacts {
			archives clientJar, serverJar;
		}

		// Don't create the default jar.
		jar.enabled = false

		idea.module {
		    excludeDirs -= file(buildDir)
		    buildDir.listFiles({d, f ->f != 'generated-src'} as FilenameFilter).each { excludeDirs += it }
		}
	}
}
