<!--
 **********************************************************************

 Copyright (c) 2003-2008 ZeroC, Inc. All rights reserved.

 This copy of Ice is licensed to you under the terms described in the
 ICE_LICENSE file included in this distribution.

 **********************************************************************
-->

<project name="common" basedir=".">

    <property environment="env"/>

    <target name="init" depends="config-init">
      <!-- Create the time stamp -->
      <tstamp/>
    </target>

    <!-- Load build configuration properties -->
    <property file="${top.dir}/config/build.properties"/>

    <!-- Check which Ice language mapping we're supposed to build, "java2" or "java5" -->
    <condition property="ice.mapping" value="java5">
      <not><isset property="ice.mapping"/></not>
    </condition>
    <fail message="Invalid ${ice.mapping} value specified in build.properties.">
      <condition>
        <and>
          <not><equals arg1="${ice.mapping}" arg2="java2" trim="true"/></not>
          <not><equals arg1="${ice.mapping}" arg2="java5" trim="true"/></not>
        </and>
      </condition>
    </fail>
    <condition property="java2">
	<equals arg1="${ice.mapping}" arg2="java2"/>
    </condition>

    <!-- Use the global metadata "java:java2" when using java2 mapping -->
    <condition property="java2metadata" value="java:java2" else="">
	<isset property="java2"/>
    </condition>

    <!-- Require 1.5 compatibility for the source code -->
    <condition property="jdk.version" value="1.5">
        <not><isset property="jdk.version"/></not>
    </condition>

    <!-- Use -Xlint:unchecked when using JDK 1.5 -->
    <condition property="javac.lint" value="-Xlint:unchecked" else="">
	<and>
	    <not>
	        <isset property="java2"/>
	    </not>
	    <istrue value="${lint.unchecked}"/>
	</and>
    </condition>

    <!-- javac doesn't like an empty argument, so we have to disable the use
         of javac.lint when the property is empty -->
    <condition property="javac.lint.compiler" value="bogus">
	<equals arg1="${javac.lint}" arg2=""/>
    </condition>
    <condition property="javac.lint.compiler" value="javac1.5">
	<not>
	    <equals arg1="${javac.lint}" arg2=""/>
	</not>
    </condition>

    <!-- Commonly needed properties -->
    <property name="class.dir" value="classes"/>
    <property name="generated.dir" value="generated"/>

    <!-- Check if proguard and jgoodies are available. -->
    <condition property="hasProguard">
	<available classname="proguard.ant.ProGuardTask" classpath="${env.CLASSPATH}" />
    </condition>
    <condition property="hasJGoodies">
	<and>
	    <available classname="com.jgoodies.looks.Options" classpath="${env.CLASSPATH}" />
	    <available classname="com.jgoodies.forms.factories.Borders" classpath="${env.CLASSPATH}" />
	</and>
    </condition>
    <condition property="hasProguardAndJGoodies">
	<and>
	    <isset property="hasProguard" />
	    <isset property="hasJGoodies" />
	</and>
    </condition>


    <!-- We use pathconvert to ensure that ice.top.dir is relative to the path of the build.xml
         file insead of the current working directory. -->
    <pathconvert property="ice.top.dir">
      <path location="${top.dir}"/>
    </pathconvert>

    <!-- 

         The following code below now checks if:

         - we're building a source distribution (in which case either the translator from the source 
           distribution is used or the one from an external binary distribution specified with 
           ICE_HOME=<path> or -Dice.home=<path>).

         - we're building against a binary distribution (e.g.: building the demos using a binary
           distribution specified with ICE_HOME=<path> or -Dice.home=<path>).

         - we're building against an RPM distribution (e.g.: building the demos using the installed
           RPM distribution).

         Once we have figured this out, we set the ice.home, slice.dir, ant.task.dir and ice.classpath 
         properties accordingly.

         NOTE: Changes made to these rules should also be applied to config/Make.common.rules

      -->

    <condition property="slice.translator" value="slice2java.exe" else="slice2java">
      <os family="windows"/>
    </condition>

    <!-- First, check if we're building a source distribution. -->

    <condition property="ice.dir" value="${ice.top.dir}/..">
        <available file="${ice.top.dir}/../java"/>
    </condition>
    <!-- When building a source distribution, we allow using either the
         translators from a binary distribution or the local translators, -->
    <condition property="ice.cpp.dir" value="${ice.home}">
        <and>
            <isset property="ice.dir"/>
            <not><isset property="ice.cpp.dir"/></not>
            <available file="${ice.home}/bin/${slice.translator}"/>
        </and>
    </condition>
    <condition property="ice.cpp.dir" value="${ice.dir}/cpp">
        <and>
            <isset property="ice.dir"/>
            <not><isset property="ice.cpp.dir"/></not>
            <available file="${ice.dir}/cpp/bin/${slice.translator}"/>
        </and>
    </condition>
    <condition property="ice.cpp.dir" value="${env.ICE_HOME}" else="${ice.dir}/cpp">
        <and>
            <isset property="ice.dir"/>
            <not><isset property="ice.cpp.dir"/></not>
            <available file="${env.ICE_HOME}/bin/${slice.translator}"/>
        </and>
    </condition>
    <condition property="ice.src.dist">
        <and>
            <isset property="ice.dir"/>
        </and>
    </condition>

    <!-- Then, check if we're building against a binary distribution. -->

    <condition property="ice.dir" value="${ice.home}">
        <and>
          <not><isset property="ice.dir"/></not>
          <available file="${ice.home}/bin/${slice.translator}"/>
          <available file="${ice.home}/ant/SliceTask.class"/>
        </and>
    </condition>
    <condition property="ice.dir" value="${ice.top.dir}">
        <and>
          <not><isset property="ice.dir"/></not>
          <available file="${ice.top.dir}/bin/${slice.translator}"/>
          <available file="${ice.top.dir}/ant/SliceTask.class"/>
        </and>
    </condition>
    <condition property="ice.dir" value="${env.ICE_HOME}">
        <and>
          <not><isset property="ice.dir"/></not>
          <available file="${env.ICE_HOME}/bin/${slice.translator}"/>
          <available file="${env.ICE_HOME}/ant/SliceTask.class"/>
        </and>
    </condition>
    <condition property="ice.bin.dist">
        <and>
            <not><isset property="ice.src.dist"/></not>
            <isset property="ice.dir"/>
	    </and>
    </condition>

    <!-- Then, check if we're building against an RPM distribution on Linux. -->

    <condition property="ice.rpm.dist">
        <and>
            <os name="Linux"/>
            <not><isset property="ice.dir"/></not>
            <available file="/usr/lib/Ice-${ice.version}/ant/SliceTask.class"/>
            <available file="/usr/bin/${slice.translator}"/>
	    </and>
    </condition>

    <!-- At this point, either ice.rpm.dist, ice.src.dist or ice.bin.dist should be set, if not
         we couldn't find a valid Ice distribution. -->
    <fail message="Unable to find a valid Ice distribution, please verify ICE_HOME is properly configured and Ice is correctly installed.">
        <condition>
            <not><or>
              <isset property="ice.rpm.dist"/>
              <isset property="ice.src.dist"/>
              <isset property="ice.bin.dist"/>
            </or></not>
        </condition>
    </fail>

    <!-- Set ice.home for the ant Slice tasks or ensure it's properly set by the user. -->
    <condition property="ice.home" value="${ice.dir}">
        <isset property="ice.bin.dist"/>
    </condition>
    <condition property="ice.home" value="${ice.cpp.dir}">
        <isset property="ice.src.dist"/>
    </condition>
    <fail message="Unable to find a valid Ice distribution in ${ice.home}, please verify ice.home is properly configured and Ice is correctly installed.">
        <condition>
            <and>
              <isset property="ice.rpm.dist"/>
              <isset property="ice.home"/>
              <not><available file="${ice.home}/bin/${slice.translator}"/></not>
            </and>  
        </condition>
    </fail>
    <fail message="Unable to find a valid Ice distribution in ${env.ICE_HOME}, please verify ICE_HOME is properly configured and Ice is correctly installed.">
        <condition>
            <and>
              <isset property="ice.rpm.dist"/>
              <not><isset property="ice.home"/></not>
              <isset property="env.ICE_HOME"/>
              <not><available file="${env.ICE_HOME}/bin/${slice.translator}"/></not>
            </and>  
        </condition>
    </fail>

    <target name="config-init">

        <!-- Set slice.dir to the directory containing the Slice files. -->
	<condition property="slice.dir" value="${ice.dir}/slice">
	    <isset property="ice.src.dist"/>
	</condition>
	<condition property="slice.dir" value="${ice.dir}/slice">
	    <isset property="ice.bin.dist"/>
	</condition>
	<condition property="slice.dir" value="/usr/share/Ice-${ice.version}/slice">
	    <isset property="ice.rpm.dist"/>
	</condition>

        <!-- Set ant.task.dir to the directory containing the Slice ant tasks. -->
	<condition property="ant.task.dir" value="${ice.dir}/java/ant">
	    <isset property="ice.src.dist"/>
	</condition>
	<condition property="ant.task.dir" value="${ice.dir}/ant">
	    <isset property="ice.bin.dist"/>
	</condition>
	<condition property="ant.task.dir" value="/usr/lib/Ice-${ice.version}/ant">
	    <isset property="ice.rpm.dist"/>
	</condition>

	<taskdef name="slice2java" classpath="${ant.task.dir}" classname="Slice2JavaTask"/>
	<taskdef name="slice2freezej" classpath="${ant.task.dir}" classname="Slice2FreezeJTask" />

	<!-- Set ice.classpath with the distribution Ice.jar file -->
	<condition property="dist.lib.dir" value="${ice.dir}/java/lib">
	    <isset property="ice.src.dist"/>
	</condition>
	<condition property="dist.lib.dir" value="${ice.dir}/lib">
	    <isset property="ice.bin.dist"/>
	</condition>
	<condition property="dist.lib.dir" value="/usr/lib/Ice-${ice.version}">
	    <isset property="ice.rpm.dist"/>
	</condition>

	<condition property="dist.jar.file" value="${dist.lib.dir}/java2/Ice.jar" else="${dist.lib.dir}/Ice.jar">
	    <and>
		<available file="${dist.lib.dir}/java2/Ice.jar"/>
		<isset property="java2"/>
	    </and>
	</condition>

	<path id="ice.classpath">
	    <fileset file="${dist.jar.file}"/>
	</path>
        
    </target>
    
</project>
