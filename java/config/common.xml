<!--
 **********************************************************************

 Copyright (c) 2003-2007 ZeroC, Inc. All rights reserved.

 This copy of Ice is licensed to you under the terms described in the
 ICE_LICENSE file included in this distribution.

 **********************************************************************
-->

<project name="common" basedir=".">

    <property environment="env"/>

    <target name="init" depends="config-init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <!-- Load build configuration properties -->
    <property file="${top.dir}/config/build.properties"/>

    <condition property="ice.mapping" value="java5">
	<not><isset property="ice.mapping"/></not>
    </condition>

    <fail message="Invalid ${ice.mapping} value specified in build.properties.">
      <condition>
        <and>
          <not><equals arg1="${ice.mapping}" arg2="java2" trim="true"/></not>
          <not><equals arg1="${ice.mapping}" arg2="java5" trim="true"/></not>
        </and>
      </condition>
    </fail>

    <condition property="java2">
	<equals arg1="${ice.mapping}" arg2="java2"/>
    </condition>

    <!-- Use the global metadata "java:java2" when using java2 mapping -->
    <condition property="java2metadata" value="java:java2" else="">
	<isset property="java2"/>
    </condition>

    <!-- Require 1.5 compatibility for the source code -->
    <condition property="jdk.version" value="1.5">
        <not><isset property="jdk.version"/></not>
    </condition>

    <!-- Use -Xlint:unchecked when using JDK 1.5 -->
    <condition property="javac.lint" value="-Xlint:unchecked" else="">
	<and>
	    <not>
	        <isset property="java2"/>
	    </not>
	    <istrue value="${lint.unchecked}"/>
	</and>
    </condition>

    <!-- javac doesn't like an empty argument, so we have to disable the use
         of javac.lint when the property is empty -->
    <condition property="javac.lint.compiler" value="bogus">
	<equals arg1="${javac.lint}" arg2=""/>
    </condition>
    <condition property="javac.lint.compiler" value="javac1.5">
	<not>
	    <equals arg1="${javac.lint}" arg2=""/>
	</not>
    </condition>

    <!-- Commonly needed properties -->
    <property name="class.dir" value="classes"/>
    <property name="generated.dir" value="generated"/>

    <!-- Figure out file locations -->
    <condition property="ice.dir" value="${env.ICE_HOME}">
	<and>
	     <available file="${env.ICE_HOME}/slice" />
            <not>
                <isset property="ice.dir"/>
	    </not>
            <not>
                <equals arg1="use.ice.rpm" arg2="yes" />
            </not>
	</and>
    </condition>

    <condition property="ice.dir" value="/usr">
        <and>
            <equals arg1="use.ice.rpm" arg2="yes" />
	    <available file="/usr/share/Ice-${ice.version}/slice"/>
            <not>
                <isset property="ice.dir"/>
            </not>
	</and>
    </condition>

    <pathconvert property="ice.top.dir.repository">
        <!-- We use the path location attribute to ensure that the
             resulting ice.dir directory will be relative to the
             project base directory. --> 
	<path location="${top.dir}/.."/>
    </pathconvert>
    <condition property="use.src.dir">
	<and>
	    <available file="${ice.top.dir.repository}/slice"/>
            <not>
                <isset property="ice.dir"/>
            </not>
            <not>
                <equals arg1="use.ice.rpm" arg2="yes" />
            </not>
	</and>
    </condition>

    <condition property="ice.dir" value="${ice.top.dir.repository}">
        <isset property="use.src.dir" />
    </condition>

    <!-- We set ice.home if we know that the translators are in ice.dir. --> 
    <condition property="ice.home" value="${ice.dir}">
        <and>
            <or>
                <available file="${ice.dir}/bin/slice2java"/>
                <available file="${ice.dir}/bin/slice2java.exe"/>
            </or>
            <not>
                <isset property="use.src.dir" />
            </not>
        </and>
    </condition>

    <condition property="ice.home" value="${ice.dir}/cpp">
        <isset property="use.src.dir" />
    </condition>

    <!-- Detect Ice for Java location -->

    <!-- A slice directory in ${top.dir} indicates a source distribution build. 
         A makedist.py script indicates a CVS checkout. -->

     <condition property="icej.dir" value="${top.dir}/../java">
        <isset property="use.src.dir" />
    </condition>

    <!-- The following conditions should only occur when building the demo 
         distributions. -->

    <!-- Then we check to see if we are building against ICE_HOME or an /opt -->
    <condition property="icej.dir" value="${ice.dir}">
	<and>
	    <available file="${ice.dir}/lib/Ice.jar"/>
	    <not>
		<isset property="icej.dir"/>
	    </not>
	</and>
    </condition>

    <!-- RPM -->
    <condition property="icej.dir" value="/usr">
        <equals arg1="use.ice.rpm" arg2="yes" />
    </condition>

    <!-- In RPM installs, files are located in different relative locations
         than other install types. Use 'with-rpm' later on to make decisions
         about the locations of slice, docs, jars, etc. --> 
     <condition property="with-rpm" value="true">
        <equals arg1="use.ice.rpm" arg2="yes" />
    </condition>

    <fail message="Unable to detect a valid Ice installation." unless="ice.dir" />
    <fail message="Unable to detect a valid Ice for Java installation." unless="icej.dir"/>

    <condition property="hasProguard">
	<available classname="proguard.ant.ProGuardTask" classpath="${env.CLASSPATH}" />
    </condition>

    <condition property="hasJGoodies">
	<and>
	    <available classname="com.jgoodies.looks.Options" classpath="${env.CLASSPATH}" />
	    <available classname="com.jgoodies.forms.factories.Borders" classpath="${env.CLASSPATH}" />
	</and>
    </condition>

    <condition property="hasProguardAndJGoodies">
	<and>
	    <isset property="hasProguard" />
	    <isset property="hasJGoodies" />
	</and>
    </condition>

    <target name="config-init">

	<condition property="lib.dir" 
	    value="/usr/lib/Ice-${ice.version}"
	    else="${icej.dir}/lib">
	    <isset property="with-rpm"/>
	</condition>

	<condition property="slice.dir" value="/usr/share/Ice-${ice.version}/slice" else="${ice.dir}/slice">
	    <isset property="with-rpm"/>
	</condition>

	<condition property="ant.task.dir" value="${lib.dir}/ant" else="${icej.dir}/ant">
	    <isset property="with-rpm"/>
	</condition>

	<taskdef name="slice2java" classpath="${ant.task.dir}" classname="Slice2JavaTask"/>
	<taskdef name="slice2freezej" classpath="${ant.task.dir}" classname="Slice2FreezeJTask" />

	<!-- 
	    This condition satisfies the differences in Ice.jar location for
	    /opt, rpm, cvs builds and src distribution builds. If the Ice.jar
	    is present in the lib/java2 subdirectory, it implies an binary /opt
	    install or RPM. Anything else and the Ice.jar should be in the lib
	    directory. If the Ice.jar does not exist, it implies a CVS build or
	    a cleaned source distribution. In either case, Ice.jar is expected
	    to be in lib.
	  -->
	<condition property="ice.jar.file" value="${lib.dir}/java2/Ice.jar" else="${lib.dir}/Ice.jar">
	    <and>
		<available file="${lib.dir}/java2/Ice.jar"/>
		<isset property="java2"/>
	    </and>
	</condition>

	<!-- Ice classpath -->
	<path id="ice.classpath">
	    <fileset file="${ice.jar.file}"/>
	</path>
    </target>
    
</project>
