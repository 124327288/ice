// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

sourceCompatibility = iceSourceCompatibility
targetCompatibility = iceTargetCompatibility

def hasJavaFx = false
def javaHome = System.getProperty('java.home')
def javafxJar = new File(javaHome + "/lib/jfxrt.jar")
if (javafxJar.exists()) {
    hasJavaFx = true
} else {
    javafxJar = new File(javaHome + "/lib/ext/jfxrt.jar")
    if (javafxJar.exists()) {
        hasJavaFx = true
    }
}

if (hasJavaFx) {
    apply plugin: 'application'
    apply from: "../../gradle/javafx7.gradle"

    mainClassName = "IceGridGUI.Main"
} else {
    sourceSets {
        main {
            java {
                exclude '**/LiveDeployment/GraphView.java'
            }
        }
    }
}

dependencies {
      compile project(':Ice')
      compile project(':IceBox')
      compile project(':IceGrid')
      compile 'com.jgoodies:jgoodies-common:1.8.0'
      compile 'com.jgoodies:jgoodies-looks:2.6.0'
      compile 'com.jgoodies:jgoodies-forms:1.8.0'
}

def tmpJarName = "IceGridGUITEMP${versionSuffix}.jar"
def jarName = "IceGridGUI${versionSuffix}.jar"

jar {
    archiveName = tmpJarName
    destinationDir = new File("${libDir}")
    if (!hasJavaFx) {
        manifest {
            attributes 'Main-Class': "IceGridGUI.Main"
        }
    }
}

buildscript {
    repositories {
        maven {
            url 'http://www.zeroc.com:8081/nexus/content/repositories/thirdparty'
        }
    }
    dependencies {
        classpath group: 'net.sourceforge', name: 'proguard', version: '5.0'
    }
}

def libJars = []
['rt.jar', 'jsse.jar'].each {
	libJars << "${javaHome}/lib/${it}"
}

if (hasJavaFx) {
    ['jfxrt.jar', 'ext/jfxrt.jar'].each {
        libJars << "${javaHome}/lib/${it}"
    }
}

task proguardJar(type: proguard.gradle.ProGuardTask, dependsOn: jar) {
	injars configurations.compile.resolve(), filter: '!META-INF/**'
	injars "${libDir}/${tmpJarName}"
	outjars "${libDir}/${jarName}"
	libraryjars libJars
	configuration "$rootProject.projectDir/config/icegridgui.pro"
}

task proguardCleanup(dependsOn: proguardJar) << {
	delete("${libDir}/${tmpJarName}")
}
assemble.dependsOn(proguardCleanup)

clean {
    delete("${libDir}/${jarName}")
}

task copyJars(type: Copy, dependsOn: proguardCleanup) {
    from new File("${libDir}/${jarName}")
    into "${DESTDIR}${prefix}/lib"
}
task install(dependsOn: copyJars)
