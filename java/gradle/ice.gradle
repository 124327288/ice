// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

def iceVersion = "3.6b"

//
// Select an installation base directory. The directory will be created
// if it does not exist. If this property is not set the default will be
// used. Default values are:
//   - Windows: %SystemDrive%\Ice-${ice.version}
//   - Non Windows /opt/Ice-${ice.version}
//
def prefix
//prefix = "/opt/Ice-${iceVersion}"
//prefix = "C:\\Ice-${iceVersion}"

//
// Define debug as true if you want to build with debug information,
// false otherwise.
//
def debug = true



//
// Do not edit below this lne
//
apply plugin: 'slice'

ext.generatedDir = "$project.buildDir/generated"

compileJava {
	options.debug = debug
}

// Determine the name of the Slice-to-Java translator
def isWindows = false
def slice2java = "slice2java"
def slice2freezej = "slice2freezej"
if (System.properties['os.name'].toLowerCase().contains('windows'))
{
    isWindows = true
    slice2java = "slice2java.exe"
    slice2freezej = "slice2freezej.exe"
}

if (prefix == null)
{
	if (isWindows)
	{
		prefix = "C:\\Ice-${iceVersion}"
	}
	else
	{
		prefix = "/opt/Ice-${iceVersion}"
	}
}
ext.prefix = prefix

// First check if ICE_HOME is set and it points at a valid installation
def env = System.getenv()
def iceHome = env['ICE_HOME']
if (iceHome != null && iceHome.length() > 0)
{
	def translator = new File("$iceHome/bin/$slice2java")
	if (!translator.exists())
	{
		throw new GradleException("Unable to find $slice2java in $iceHome, please verify ICE_HOME is " +
								  "properly configured and Ice is correctly installed.")
	}
}

def iceBinDist = false
if(env['USE_BIN_DIST'] == "yes")
{
	iceBinDist = true
}

// First check if we are building against source distribution
def iceDir
def iceCppDir
def iceSrcDist = false
if (!iceBinDist)
{
	def f1 = new File("$rootProject.projectDir/../java/src/Ice/src/main/java/Ice/Util.java")
	if (f1.exists())
	{
		iceDir = "$rootProject.projectDir/.."
		iceSrcDist = true

		if (iceHome != null && iceHome.length() > 0)
		{
			iceCppDir = iceHome

			def f2 = new File("$iceDir/cpp/bin/$slice2java")
			if (f2.exists())
			{
				println "Found $slice2java in both $iceCppDir/bin and $iceDir/cpp/bin, $iceCppDir/bin/$slice2java will be used!"
			}
		}
		else
		{
			iceCppDir = iceDir + "/cpp"
		}

		slice.slice2java = "$iceCppDir/bin/$slice2java"
		slice.slice2freezej = "$iceCppDir/bin/$slice2freezej"
	}
}

// Then, check if we're building against a binary distribution.
if (!iceDir)
{
	if (iceHome != null && iceHome.length() > 0)
	{
		iceDir = iceHome
	}

	if (iceDir == null)
	{
		def f1 = new File("/usr/bin/$slice2java")
		if (f1.exists())
		{
			iceDir = "/usr"
		}
	}

	if (iceDir == null && isWindows)
	{
		def progFiles
		def arch1 = env['PROCESSOR_ARCHITECTURE']
		def arch2 = env['PROCESSOR_ARCHITEW6432']
		if (arch1 == "AMD64" || arch1 == "IA64" || arch2 == "AMD64" || arch2 == "IA64")
		{
			progFiles = env['ProgramFiles(x86)']
		}
		else
		{
			progFiles = env['ProgramFiles']
		}
		iceDir = "$progFiles\\ZeroC\\Ice-$iceVersion"
	}

	if (iceDir == null)
	{
		def f1 = new File("/Library/Developer/Ice-$iceVersion/bin/$slice2java")
		if (f1.exists())
		{
			iceDir = "/Library/Developer/Ice-$iceVersion"
		}
	}

	if (iceDir == null)
	{
		def f1 = new File("/opt/Ice-$iceVersion/bin/$slice2java")
		if (f1.exists())
		{
			iceDir = "/opt/Ice-$iceVersion"
		}
	}

	if (iceDir == null)
	{
		throw new GradleException("Unable to find a valid Ice distribution, please verify ICE_HOME is properly " +
								  "configured and Ice is correctly installed.")
	}

	slice.slice2java = "$iceDir/bin/$slice2java"
	slice.slice2freezej = "$iceDir/bin/$slice2freezej"
}

// Set the slice and java jar directory
if (iceDir == "/usr")
{
	ext.sliceDir = "/usr/share/Ice-$iceVersion/slice"
	ext.distJarDir = "/usr/share/java"
}
else
{
	ext.sliceDir = "$iceDir/slice"
	ext.distJarDir = iceSrcDist ? null : "$iceDir/lib"
}
