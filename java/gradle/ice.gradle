// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

buildscript {
    def env = System.getenv()
    ext.iceMavenRepo = env['ICE_MAVEN_REPOSITORY']
    if (ext.iceMavenRepo == null) {
        ext.iceMavenRepo = "repo.zeroc.com"
    }

    //
    // If the ice-builder-gradle repository exists add it to the local maven repositories,
    // so we can build using a local plugin version
    //
    def builder  = new File([project(':ice').projectDir, "..", "..", "..", "..",
                             "ice-builder-gradle", "build", "libs"].join(File.separator))

    if(builder.exists()) {
        repositories {
            flatDir dirs: "file://${builder.getCanonicalPath()}"
        }
    }

    repositories {
        maven {
            url "https://${iceMavenRepo}/nexus/content/repositories/releases"
        }
    }
    dependencies {
        classpath group: 'com.zeroc.gradle.ice-builder', name: 'slice', version: '1.3.0'
    }
}

if (!project.plugins.findPlugin(com.zeroc.gradle.icebuilder.slice.SlicePlugin)) {
    project.apply(plugin: com.zeroc.gradle.icebuilder.slice.SlicePlugin)
}

if(System.env.USE_BIN_DIST != "yes") {
    slice {
        iceHome = new File([project(':ice').projectDir, "..", "..", ".."].join(File.separator)).getCanonicalPath()
    }
}

ext.generatedDir = "$project.buildDir/generated"
ext.useLocalOnly = false

def android = false
try {
    compileJava {
        options.debug = debug
    }
} catch(MissingMethodException ex) {
    // For Android builds: thrown if compileJava isn't available.
    android = true
}

def env = System.getenv()

// Determine the name of the Slice-to-Java translator
def isWindows = System.properties['os.name'].toLowerCase().contains('windows')

if (prefix) {
    // If the prefix isn't set use these default locations.
    if (isWindows) {
        prefix = "C:\\Ice-${project.version}"
    } else {
        prefix = "/opt/Ice-${project.version}"
    }
}

// Installation location for jar/pom & executables.
//
// Note that we exclude /usr/src/packages because it's the RPM build directory on SLES.
//
if ((prefix.startsWith("/usr") || prefix.startsWith("/usr/local")) && !prefix.startsWith("/usr/src/packages")) {
    ext.jarDir = prefix + "/share/java"
    ext.binDir = prefix + "/bin"
} else {
    ext.jarDir = prefix + "/lib"
    ext.binDir = prefix + "/bin"
}

// Check if we are building against source distribution
def iceCppDir = slice.srcDist ? [slice.iceHome, "cpp"].join(File.separator) : slice.iceHome
def iceSrcDist = false


// Check is DESTDIR is set (non-Windows)
if (isWindows) {
    ext.DESTDIR = ""
}

ext.versionSuffix = "-${project.version}"
ext.libDir = "$rootProject.projectDir/lib"

ext.iceSourceCompatibility = 1.7
ext.iceTargetCompatibility = 1.7

ext.searchFile = { List<Closure> places, List<String> searchPaths ->
    def dirs = []
    places.each {
        def dir = it()
        if(dir != null) {
            dirs << dir + "/"
        }
    }

    def candidates = searchPaths.collect {
        def path = it
        dirs.collect {
            it.concat(path)
        }
    }.flatten()

    return candidates.find {
        new File(it).exists()
    }
}

def demoJar(name) {
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }

    jarTask.manifest {
        attributes("Main-Class": name.capitalize())
        attributes("Class-Path": configurations.runtime.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}
ext {
    demoJar = this.&demoJar
}

def localDependency(artifactId) {
    if (project.slice.srcDist) {
        return project(":${artifactId}")
    } else {
        return "com.zeroc:${artifactId}:${project.version}"
    }
}
ext {
    localDependency = this.&localDependency
}
