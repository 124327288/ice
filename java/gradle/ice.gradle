// **********************************************************************
//
// Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

apply plugin: 'slice'

ext.generatedDir = "$project.buildDir/generated"

try {
	compileJava {
		options.debug = debug
	}
} catch(MissingMethodException ex) {
	// For Android builds: thrown if compileJava isn't available.
}

// Determine the name of the Slice-to-Java translator
def isWindows = false
def isOSX = false
def slice2java = "slice2java"
def slice2freezej = "slice2freezej"
if (System.properties['os.name'].toLowerCase().contains('windows'))
{
    isWindows = true
    slice2java = "slice2java.exe"
    slice2freezej = "slice2freezej.exe"
}
else if(System.properties['os.name'] == "Mac OS X")
{
	isOSX = true
}

// Set the install prefix to defaults if not already set
if (prefix == null || prefix.length() == 0)
{
	if (isWindows)
	{
		prefix = "C:\\Ice-${iceVersion}"
	}
	else
	{
		prefix = "/opt/Ice-${iceVersion}"
	}
}

// First check if ICE_HOME is set and it points at a valid installation
def env = System.getenv()
def iceHome = env['ICE_HOME']
if (iceHome != null && iceHome.length() > 0)
{
	def translator = new File("$iceHome/bin/$slice2java")
	if (!translator.exists())
	{
		throw new GradleException("Unable to find $slice2java in $iceHome, please verify ICE_HOME is " +
								  "properly configured and Ice is correctly installed.")
	}
}

def iceBinDist = false
if(env['USE_BIN_DIST'] == "yes")
{
	iceBinDist = true
}

// Check if we are building against source distribution
def iceDir
def iceCppDir
def iceSrcDist = false
if (!iceBinDist)
{
	def f1 = new File("$rootProject.projectDir/../java/src/Ice/src/main/java/Ice/Util.java")
	if (f1.exists())
	{
		iceDir = "$rootProject.projectDir/.."
		iceSrcDist = true

		if (iceHome != null && iceHome.length() > 0)
		{
			iceCppDir = iceHome

			def f2 = new File("$iceDir/cpp/bin/$slice2java")
			if (f2.exists())
			{
				println "Found $slice2java in both $iceCppDir/bin and $iceDir/cpp/bin, $iceCppDir/bin/$slice2java will be used!"
			}
		}
		else
		{
			iceCppDir = iceDir + "/cpp"
		}

		slice.slice2java = "$iceCppDir/bin/$slice2java"
		slice.slice2freezej = "$iceCppDir/bin/$slice2freezej"
		slice.iceHome = iceCppDir
		slice.srcDist = true
	}
}

// Then, check if we're building against a binary distribution.
if (!iceDir)
{
	if (iceHome != null && iceHome.length() > 0)
	{
		iceDir = iceHome
	}

	if (iceDir == null)
	{
		def f1 = new File("/usr/bin/$slice2java")
		if (f1.exists())
		{
			iceDir = "/usr"
		}
	}

	if (iceDir == null && isWindows)
	{
		def progFiles
		def arch1 = env['PROCESSOR_ARCHITECTURE']
		def arch2 = env['PROCESSOR_ARCHITEW6432']
		if (arch1 == "AMD64" || arch1 == "IA64" || arch2 == "AMD64" || arch2 == "IA64")
		{
			progFiles = env['ProgramFiles(x86)']
		}
		else
		{
			progFiles = env['ProgramFiles']
		}
		iceDir = "$progFiles\\ZeroC\\Ice-$iceVersion"
	}

	if (iceDir == null)
	{
		def f1 = new File("/Library/Developer/Ice-$iceVersion/bin/$slice2java")
		if (f1.exists())
		{
			iceDir = "/Library/Developer/Ice-$iceVersion"
		}
	}

	if (iceDir == null)
	{
		def f1 = new File("/opt/Ice-$iceVersion/bin/$slice2java")
		if (f1.exists())
		{
			iceDir = "/opt/Ice-$iceVersion"
		}
	}

	if (iceDir == null)
	{
		throw new GradleException("Unable to find a valid Ice distribution, please verify ICE_HOME is properly " +
								  "configured and Ice is correctly installed.")
	}

	slice.slice2java = "$iceDir/bin/$slice2java"
	slice.slice2freezej = "$iceDir/bin/$slice2freezej"
	slice.iceHome = iceDir
	slice.srcDist = false
}

// Set the slice and java jar directory
if (iceDir == "/usr")
{
	ext.sliceDir = "/usr/share/Ice-$iceVersion/slice"
	ext.distJarDir = "/usr/share/java"
}
else
{
	ext.sliceDir = "$iceDir/slice"
	ext.distJarDir = iceSrcDist ? null : "$iceDir/lib"
}

// Check is DESTDIR is set (non-Windows)
if (isWindows)
{
	ext.DESTDIR = ""
}

ext.versionSuffix = "-${iceVersion}"
ext.libDir = "$rootProject.projectDir/lib"

ext.iceSourceCompatibility = 1.7
ext.iceTargetCompatibility = 1.7

ext.searchFile = { Map<String, Closure> places, List<String> searchPaths ->
    File result = null;
    places.each { k, v ->
        if (result != null) {
            return;
        }
        def dir = v()
        if (dir != null) {
            searchPaths.each { s ->
                if (result != null) {
                    return;
                }
                File f = new File(dir, s);
                if (f.exists() && f.file) {
                    result = f;
                }
            }
        }
    }
    if (!result?.file) {
        return ""
    } else {
        return result
    }
}

def localDependency(artifactId) {
	if (distJarDir != null) {
		return "com.zeroc:${artifactId}:${iceVersion}"
	} else {
		return project(":${artifactId}")
	}
}
ext {
	localDependency = this.&localDependency
}

//
// Find BerkeleyDB JAR
//
if (isWindows || isOSX)
{
	ext.dbVersion = "5.3.28"
}
else
{
	ext.dbVersion = "5.3.21"
}

ext.dbJar = ""
if(dbHome != "")
{
	ext.dbJar = "${dbHome}/db-${dbVersion}.jar"
}
else
{
	["db-${dbVersion}.jar", "db.jar"].each {
		if (ext.dbJar.length() != 0)
		{
			// Already found DB JAR, just ignore.
		}
		else if (isWindows)
		{
			def thirdpartyhome = env['THIRDPARTY_HOME']
			if (thirdpartyhome == null || thirpartyhome.length() == 0)
			{
				def progFiles
				def arch1 = env['PROCESSOR_ARCHITECTURE']
				def arch2 = env['PROCESSOR_ARCHITEW6432']
				if (arch1 == "AMD64" || arch1 == "IA64" || arch2 == "AMD64" || arch2 == "IA64")
				{
					progFiles = env['ProgramFiles(x86)']
				}
				else
				{
					progFiles = env['ProgramFiles']
				}
				thirdpartyhome = "$progFiles\\ZeroC\\Ice-$iceVersion-ThirdParty"
			}

			def f = new File("$thirdpartyhome\\lib\\${it}")
			if (f.exists())
			{
				ext.dbJar = "$thirdpartyhome\\lib\\${it}"
			}
		}
		else
		{
			def f = new File("/Library/Developer/Ice-$iceVersion-ThirdParty/lib/${it}")
			if (f.exists())
			{
				ext.dbJar = "/Library/Developer/Ice-$iceVersion-ThirdParty/lib/${it}"
			}

			if (ext.dbJar.length() == 0)
			{
				f = new File("/usr/share/java/${it}")
				if (f.exists())
				{
					ext.dbJar = "/usr/share/java/lib/${it}"
				}
			}

			if (ext.dbJar.length() == 0)
			{
				f = new File("/opt/Ice-${iceVersion}/lib/${it}")
				if (f.exists())
				{
					ext.dbJar = "/opt/Ice-${iceVersion}/lib/${it}"
				}
			}

			if (ext.dbJar.length() == 0)
			{
				f = new File("/opt/db/lib/${it}")
				if (f.exists())
				{
					ext.dbJar = "/opt/db/lib/${it}"
				}
			}

			if (ext.dbJar.length() == 0)
			{
				f = new File("/usr/lib/${it}")
				if (f.exists())
				{
					ext.dbJar = "/usr/lib/${it}"
				}
			}
		}
	}
}


























