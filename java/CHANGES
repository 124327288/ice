Changes since version 1.1.0
---------------------------

- Added a test to the property parsing code to print a warning on System.err
  if a property is not recognized. This prevents silly typos, such as
  "Ice.config=MyFile" (instead of "Ice.Config=MyFile") from slipping through
  undetected.

- added DB_PRIVATE flag to DBEnv->open(), to be able to use the 
  Berkeley DB that ships with RedHat 9.

Changes since version 1.0.1
---------------------------

- Ice now implements slicing for exceptions and classes: if a process
  receives an exception or class that is of a more derived type than
  the receiver understands, the exception or class is automatically
  sliced. (Previously, this situation resulted in an exception.)

- User exception factories and user exception factory
  managers no longer exist. The factories for user exceptions
  are now automatically installed by the Ice run time.
  If you have existing code that implements user exception factories,
  you can simply delete it.

- Fixed a bug in the Slice parser: the semantic check to see
  whether an identifier introduced into a scope has changed
  meaning was too stringent.

- Fixed a bug with connections being closed even though they have
  outstanding batch requests.

- The "unknown" field in UnknownLocalException and UnknownException
  now contains the whole exception stack trace instead of just the
  exception name.

- Replaced the Freeze::EvictorPersistenceMode enumeration with the
  interface Freeze::PersistenceStrategy.

- Instead of aborting the caller thread, Ice for Java now catches
  assertions in servant methods, prints the assertion, closes the
  connection, and continues.

- Added dynamic thread pools, i.e., thread pools that grow and shrink
  based on a calculated load factor. Please see the section about thread
  pools in the manual for further details.

- Structs and sequences which hold other structs or sequences are now
  legal dictionary key types, as long as such nested structs or sequences
  are (recursively) legal.

- The connection timeout is now also used when connections are
  closed. This avoids hanging processes if the peer misbehaves, or if
  asynchronous method invocations do not return.

- In some cases, communicator destruction could result in a
  java.lang.NullPointerException. This has been fixed. Now a
  CommunicatorDestroyedException is raised.

- Fixed a bug with AMD methods using a servant locator, such as the
  Freeze evictor.

- Changed the generated equals() method to use the helper
  java.util.Arrays.equals() when comparing sequences, rather than the
  native array equals() method. This means the equals() method for a
  type containing a sequence member will perform a deep comparison of
  the sequence.

- Added timestamps to the default Ice logger. You can enable
  timestamps by setting the `Ice.Logger.Timestamp' property to a value
  larger than zero. By default timestamps are disabled.

- Improved IceBox service deactivation. Instead of successively
  stoping a service and destroying its communicator, services are now
  all stopped first and then their communicators are destroyed.

- Modified the Ice protocol to marshal sizes more efficiently.
  Sizes less than 255 now require a single byte whereas
  previously, sizes between 127 and 254 required five bytes.

- Modified the Ice protocol to fix a problem with compression. The
  compressed message types have been removed, and a field has been
  added to the message header indicating compression status.

- Added version negotiation to the Ice protocol. This permits future
  protocol extensions to be added without breaking interoperability
  with older deployed clients and servers. Unfortunately, doing this
  broke compatibility with the existing protocol so, when upgrading to
  this version, you must make sure that clients and servers use the
  same version of Ice.jar.

- Added a magic number to the Ice protocol. All Ice protocol messages
  have 'I', 'c', 'e', 'P' (encoded as ASCII) in the first four bytes.
  This is useful to allow protocol analyzers to recognize Ice
  messages.

- Changed the encoding of encapsulations. An encapsulation now looks
  like:

	size (4 bytes)
	major version number (1 byte)
	minor version number (1 byte)
	data (n bytes)

  The size includes the count of bytes for the size and versions, so
  the value of size is n + 6.

- Added -v and -e options to stringified UDP endpoints. -v sets the
  protocol version and -e sets the encoding version. (The current
  version for both protocol and encoding is 1.0.)

Changes since version 1.0.0
---------------------------

- Fixed a bug in the ObjectAdapter which caused it to ignore all but
  the first endpoint.

- Fixed a bug with throwing exceptions in AMD calls after invoking
  ice_response().

- Fixed a bug with throwing exceptions in AMI from within
  ice_response().


