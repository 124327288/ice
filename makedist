#!/bin/bash
# **********************************************************************
#
# Copyright (c) 2003-2007 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
# 
#
# **********************************************************************

#
# Error out on use of undefined variables.
#
set -u

#
# Set to 1 to keep working files around.
#
KEEP=0

#
# Location where working archive is created.
#
WORKINGDIR=$HOME/tmp

BASEDIR=`pwd`

#
# Used to naming the archive.
#
LABEL="HEAD" 

#
# The 'tree-ish' arg to the git-archive command.
#
REFSPEC="HEAD"

#
# Build the demo script distribution
#
SCRIPTARCHIVE=1

usage()
{
    echo "makedist [-d working-directory] [-n archive-name] [-t tag] [-M] [-h] [-k]"
    echo ""
    echo " -d Indicate the working directory. 'makedist' will create"
    echo "    the source archive in this directory. Defaults to "
    echo "    \$HOME/tmp"
    echo ""
    echo " -n Specify a name and prefix for the source archive."
    echo "    Defaults to HEAD"
    echo ""
    echo " -t Specify which branch or tag to base the archive on."
    echo "    If 'tag' is a branch, the archive will be created from"
    echo "    'tag'/HEAD. Defaults to HEAD of the current branch"
    echo ""
    echo " -E Skip building the demo script archive"
    echo ""
    echo " -k Don't clean up working files when finished"
    echo ""
    echo " -h Display this message."
    
    return 0
}

validopts="d:n:t:hkE"
getopts $validopts curopt 
while [ ! "x$curopt" == "x:" ] ;
do
   case $curopt in
   	d)
	    WORKINGDIR=$OPTARG
	    if [ ! -d $WORKINGDIR ];
	    then
		echo "ERROR: $WORKINGDIR does not exist!"
		exit 1
	    fi
	;;

	n)
	    LABEL=$OPTARG
	;;

	t)
	    REFSPEC=$OPTARG
	;;

	h)
	   usage
	   exit 0
	;;

	E)
	   SCRIPTARCHIVE=0
	;;
	   
	k)
	   KEEP=1
	;;
   esac
   getopts $validopts curopt
   [ "$?" -gt 0 ] && break
done


cleanup()
{
    [ "$KEEP" -eq "0" ] && echo "Cleaning up working files..." && cd $WORKINGDIR && rm -rf $LABEL
}

trap "{ cleanup ; exit 255; }" INT TERM EXIT 

function fquery()
{
    query=""
    for spec in $*
    do
        [ -z "$spec" ] && continue
        if [ -z "$query" ] 
        then
            query="-name $spec"
        else
            query="$query -or -name $spec"
        fi
    done
    echo "$query"
}

#
# From here on in we halt by default if a simple command returns a non zero
# error code.
#
set -e

echo "Creating $WORKINGDIR/$LABEL with $REFSPEC"

[ -d $WORKINGDIR/$LABEL ] && rm -rf $LABEL
git archive --prefix="$LABEL/" $REFSPEC | ( cd $WORKINGDIR && tar xf - )
currentdir=`pwd`

cd $WORKINGDIR/$LABEL

#
# Lists of files to exclude from the source distribuion. 
#

#
# Files common to all language mappings.
#
cat > common.exclude.file.list << COMMON_RM_FILES
makedist.py
allDemos.py
ICE_LICENSE
LICENSE
COMMON_RM_FILES

#
# Mapping specific file lists here.
#
cat > cpp.exclude.file.list << CPP_RM_FILES
cpp/makebindist.py
cpp/iceemakedist.py
cpp/RPMTools.py
cpp/fixCopyright.py
cpp/fixVersion.py
cpp/icee.dsw
cpp/icee.dsp
cpp/config/makegitignore.py
cpp/config/Make.rules.icee
cpp/config/Make.rules.mak.icee
cpp/src/icecpp/icecppe.dsp
cpp/src/IceUtil/iceutile.dsp
cpp/src/Slice/slicee.dsp
cpp/install
cpp/src/slice2cppe
cpp/src/slice2javae
CPP_RM_FILES

#
# We only need to query the Ice version from one location. We'll use the C++
# mapping/core runtime as the source.
#
ICEVER=`awk "/.*ICE_STRING_VERSION.*/ { print \\$3 }" cpp/include/IceUtil/Config.h | sed -e s/\"//g` # "
ICEMMVER=`echo $ICEVER | sed -e 's/\.[0-9A-Za-z]*$//' | sed -e 's/\.//g'`

SOURCEDIR="$BASEDIR/../dist-$ICEVER"
[ ! -d $SOURCEDIR ] && mkdir -p $SOURCEDIR

#
# DISTRIBUTION is the base directory for the actual source distribution contents. 
#
DISTRIBUTION="$WORKINGDIR/Ice-$ICEVER"
[ -d $DISTRIBUTION ] && rm -rf $DISTRIBUTION
mkdir -p $DISTRIBUTION

echo "Walking directories and creating source distributions"
currentdir=`pwd`
for f in `find . -maxdepth 1 -name "*" -type d` ;
do
    #    
    # Skip non-Ice distribution directories.
    #
    mappingdir=`basename $f`
    case "$mappingdir" in 
      cpp|java|cs|php|py|vb|rb|certs|config|slice)
      # 
      # No-op. We are looking to continue if the path doesn't match any of
      # those specified.
      #
      ;;
      *)
      continue
      ;;
    esac

    #
    # Construct base exclusion file out of common filenames and language mapping filenames.
    #
    echo "exclusions.dat" > exclusions.dat
    cat common.exclude.file.list | \
    while read line 
    do
        [ -n "$line" ] && { echo "$mappingdir/$line" >> exclusions.dat; }
    done
    [ -e $mappingdir.exclude.file.list ] && cat $mappingdir.exclude.file.list >> exclusions.dat

    #
    # Now append wildcard matched exclusions! Scan path, add exclusions for
    # each instance of the provided file specs
    #
    find $mappingdir `fquery .gitignore expect.py` >> exclusions.bat

    #
    # Use tar + the exclusion file to copy the archive to a staging location.
    # We don't want to work on the archive in place because it makes it
    # difficult to resolve distribution related issues.
    #
    tar c -X exclusions.dat $mappingdir | tar xf - -C $DISTRIBUTION
done

cp Makefile $DISTRIBUTION
cp Makefile.mak $DISTRIBUTION
cp cpp/LICENSE $DISTRIBUTION
cp cpp/ICE_LICENSE $DISTRIBUTION
cp allTests.py $DISTRIBUTION

echo "Fixing version markup..."

cd $DISTRIBUTION
for f in "cpp/config/glacier2router.cfg cpp/config/icegridregistry.cfg"
do
    sed -i "" -e "s/@ver@/$ICEVER/g" $f
    sed -i "" -e "s/@mmver@/$ICEMMVER/g" $f
done

for f in `find . -name "INSTALL*" -or -name "README*" -type f` 
do 
    sed -i "" -e "s/@ver@/$ICEVER/g" $f
    sed -i "" -e "s/@mmver@/$ICEMMVER/g" $f
done

for f in `find . -name "*.y"`
do
    cd $DISTRIBUTION/`dirname $f`
    base=`basename $f .y`

    #
    # XXX: Comment out bison/yacc rules.
    #
    if test `basename $f` == "cexp.y"
    then
        gmake cexp.c
        
    else
        gmake $base.cpp
    fi
done

cd $DISTRIBUTION

# 
# Update permissions
chmod -R u+rw,go+r-w . 
find . `fquery *.cpp *.h *.ice README* INSTALL* *.xml *.java *.cs *.csproj *.vb *.vbproj *.php *.mc Makefile*.* *.dsp` \
    | xargs chmod a-x 
find . -type d -exec chmod a+x {} \;
find . -perm +111 -exec chmod a+x {} \;

#
# Should be all ready to go, so we archive it up and blow away the working
# directory (if required).
#
cd $WORKINGDIR
tar cfz $SOURCEDIR/Ice-$ICEVER.tar.gz Ice-$ICEVER
zip -9r $SOURCEDIR/Ice-$ICEVER.zip Ice-$ICEVER
[ $KEEP -eq 0 ] && rm -rf Ice-$ICEVER

cd $currentdir

#
# Copy binary distribution scripts into sources directory.
#
for f in distribution/bin/makebindist.py distribution/bin/makemsi.py;
do
    [ -e $f ] || { echo "ERROR: `pwd`/$f does not exist" ; exit 1; }
    cp $f $SOURCEDIR
done
tar cfz $SOURCEDIR/distfiles.tar.gz --exclude distribution/bin distribution -C cpp/include/IceUtil Config.h -C ../../.. `[ -e RELEASE_NOTES.txt ] && echo "RELEASE_NOTES.txt"` || { echo "ERROR: tar operation returned non-zero status" ; exit 1; }

#
# Consolidating demoscript archive.
#
TMPDIR=$WORKINGDIR/dscrpt/Ice-$ICEVER-demos
cd $WORKINGDIR/$LABEL

if [ "$SCRIPTARCHIVE" -eq "1" ];
then
    rm -rf $TMPDIR
    mkdir -p $TMPDIR
    for f in `find . -maxdepth 1 -name "*" -type d` ;
    do
	#
	# Only continue processing this directory if there is an
	# allDemos.py script there.
	#
	[ ! -e $f/allDemos.py ] && continue
	
	mappingdir=`basename $f`
	case $mappingdir in
	    cpp)
		demoSuffix="cxx";
		;;
	    java)
		demoSuffix="j";
		;;
	    py)
		demoSuffix="py";
		;;
	    rb)
		demoSuffix="rb";
		;;
	    cs)
		demoSuffix="cs";
		;;
	    php)
		demoSuffix="php";
		;;
	    vb)
		demoSuffix="vb";
		;;
	    *)
		continue;
		;;
	esac
	currentdir=`pwd`
        cd $mappingdir
	tar cf - `find . -name "expect.py"` | tar xf - -C $TMPDIR
	mv $TMPDIR/demo $TMPDIR/demo$demoSuffix
	cp allDemos.py $TMPDIR/demo$demoSuffix
	cd $currentdir
    done

    tar cf - -C $WORKINGDIR/$LABEL demoscript | tar xf - -C $TMPDIR

    [ ! -d $TMPDIR/democxx ] && { echo "Failure in creating demo script archive. C++ mapping scripts missing." ; exit 1; }
    mv $TMPDIR/democxx $TMPDIR/demo
    currentdir=`pwd`
    cd $TMPDIR/..

    rm -f $SOURCEDIR/Ice-$ICEVER-demo-scripts.tar.gz
    tar cf $SOURCEDIR/Ice-$ICEVER-demo-scripts.tar Ice-$ICEVER-demos
    gzip -9 $SOURCEDIR/Ice-$ICEVER-demo-scripts.tar
    cd $currentdir
fi

cleanup
cd $BASEDIR
echo "Source distributions can be found in $SOURCEDIR"
exit 1
