======================================================================
Release notes for Ice 3.3.1
======================================================================

The primary purpose of a patch release such as this one is to correct
known issues while maintaining binary compatibility with the most
recent minor release. A patch release may also contain enhancements if
they do not affect binary compatibility. 

The sections below describe the fixes and improvements included in
this release. See the section titled "Upgrading your applications"
for more information about migrating to a new Ice release.

Note that because the Python, Ruby, and PHP language mappings use the
C++ Ice run time, they automatically benefit from fixes to the C++ Ice
core even if those language mappings are not explicitly mentioned
below.


Table of Contents
-----------------

  1. New Features
  2. Fixes and improvements
  3. Upgrading your application
     - Migrating IceStorm databases
     - Migrating IceGrid databases
     - Migrating Freeze databases
     - Removed APIs
     - Deprecated APIs
  4. Platform specific notes
     - IBM JDK
     - Java and IPv6
     - Mono
     - Red Hat Enterprise Linux 5.1
     - Solaris x86
  5. Known Problems


======================================================================
1. New Features
======================================================================

This section discusses the significant enhancements offered in this
release.


Protobuf
--------

This release integrates the ZeroC Labs release for Google protocol
buffers. This feature allow you to serialize and deserialize data to
and from protocol buffers and transmit these via Ice operation
invocations with Ice for C++, Java, and Python.


Java and .NET serialization
---------------------------

This release adds support for Java and .NET serializable classes. You
can now enable the serialization, transmission, and deserialization
of Java and .NET classes with a simple metadata directive.


======================================================================
2. Fixes and improvements
======================================================================

Below is an abbreviated list of changes included in this release that
were not already discussed in "New Features". For a complete list of
changes, please refer to the CHANGES file included in your Ice
distribution.

* In Python, the code generated for the constructors of Slice classes,
  structures and exceptions contained a subtle bug that only affects
  data members of type 'struct'. Consider the following Slice
  definitions:

  struct Point {
      int x;
      int y;
  };
  struct Event {
      Point location;
      ...
  };

  The Event constructor supplied a default instance of the Point
  member if the caller did not supply one:

  class Event(...):
      def __init__(self, location=Point()):
          self.location = location

  The intent is to ensure that a structure data member ('location' in
  this example) is fully constructed. However, since Python evaluates
  default arguments only once, this had the unintentional side effect
  of causing all Event instances to share the same instance of Point
  unless the caller explicitly supplied a value for the location
  parameter.

  The generated code now ensures that each instance of Event assigns a
  new instance of Point if the caller does not supply a value.
  

======================================================================
3. Upgrading your application
======================================================================

Ice 3.3 does not maintain backward binary compatibility with
applications built using Ice 3.2, but every effort was made to
preserve source compatibility. Note however that Ice always maintains
protocol ("on the wire") compatibility with prior releases.

The requirements for upgrading depend on the language mapping used by
your application:

- For statically-typed languages (C++, Java, .NET), the application
  must be recompiled.

- For scripting languages that use static translation, your Slice
  files must be recompiled.

If your application uses IceStorm or IceGrid, please refer to the
relevant sections below for migration instructions.

Finally, certain APIs that were deprecated in previous Ice releases
have been removed in this release. If your application relied on one
of these APIs, it may no longer compile or execute correctly. A list
of the removed APIs is provided in the section titled "Removed APIs"
along with a description of their replacements. Furthermore, the
section "Deprecated APIs" discusses APIs that are deprecated as of
this release; we encourage you to update your applications and
eliminate the use of these APIs as soon as possible.


Migrating IceStorm databases
----------------------------

Ice 3.3 supports migrating IceStorm databases from Ice 3.1 and from
Ice 3.2. Migration from other Ice versions may work, but is not
officially supported. If you require assistance with this please
contact sales@zeroc.com.

To migrate, first stop your IceStorm servers.

Next, copy the IceStorm database environment to a second location:

$ cp -r db recovered.db

Run the Berkeley DB utility db_recover on the copied database
environment:

$ db_recover -h recovered.db

Note that it is essential that the correct version of db_recover is
used. For Ice 3.1, Berkeley DB 4.3.29 must be used. For Ice 3.2,
Berkeley DB 4.5 must be used.

Now change to the location where the Ice 3.3 IceStorm database
environments are stored:

$ cd <new-location>

Next, run the icestormmigrate utility. The first argument is the path
to the old database environment. The second argument is the path to
the new database environment.

In this example we'll create a new directory "db" in which to store
the migrated database environment:

$ mkdir db
$ icestormmigrate <path-to-recovered.db> db

The migration is now complete, and the contents of the old database
environment are now in the db directory.


Migrating IceGrid databases
---------------------------

Ice 3.3 supports migrating IceGrid databases from Ice 3.1 and from Ice
3.2. Migration from other Ice versions may work, but is not officially
supported. If you require assistance with this please contact
sales@zeroc.com.

To migrate, first stop the IceGrid registry you wish to upgrade.

Next, copy the IceGrid database environment to a second location:

$ cp -r db recovered.db

Run the Berkeley DB utility db_recover on the copied database
environment:

$ db_recover -h recovered.db

Note that it is essential that the correct version of db_recover is
used. For Ice 3.1, Berkeley DB 4.3.29 must be used. For Ice 3.2,
Berkeley DB 4.5 must be used.

Now change to the location where the Ice 3.3 IceGrid database
environments are stored:

$ cd <new-location>

Next, run the upgradeicegrid.py utility located in the `config'
directory of your Ice distribution (or in /usr/share/Ice-3.3.0 if using
an RPM installation). The first argument is the path to the old
database environment. The second argument is the path to the new
database environment.

In this example we'll create a new directory "db" in which to store
the migrated database environment:

$ mkdir db
$ upgradeicegrid.py <path-to-recovered.db> db

The migration is now complete, and the contents of the old database
environment are now in the db directory.

By default, the migration utility assumes that the servers deployed
with IceGrid also use Ice 3.3. If your servers still use an older Ice
version, you need to specify the --server-version command-line option
when running upgradeicegrid.py:

$ upgradeicegrid.py --server-version 3.2.1 <path-to-recovered.db> db

The migration utility will set the server descriptor `ice-version'
attribute to the specified version and the IceGrid registry will
generate configuration files compatible with the given version.

If upgrading the master IceGrid registry in a replicated environment
and the slaves are still running, you should first restart the master
registry in read-only mode using the --readonly option, for example:

$ icegridregistry --Ice.Config=config.master --readonly

Next, you can connect to the master registry with icegridadmin or the
IceGrid administrative GUI to ensure that the database is correct. If
everything looks fine, you can shutdown and restart the master
registry without the --readonly option.


Migrating Freeze Databases
--------------------------

There is no special Freeze procedure or Freeze tool to perform this 
upgrade. Freeze is still storing exactly the same data, in the same format.

However, we upgraded the version of Berkeley DB, and as a result when 
upgrading from Ice 3.2 to Ice 3.3, you have to upgrade your database 
from the "Berkeley DB 4.5" format to the new "Berkeley DB 4.6" format. 

This is fortunately straightforward, since the only relevant format change 
for Freeze was the log format change.

From the Berkeley DB Upgrade Process:

 http://www.oracle.com/technology/documentation/berkeley-db/db/ref/upgrade/process.html

If the application has a Berkeley DB transactional environment, and the
log files need upgrading but the databases do not, the application may be 
installed in the field using the following steps:

 1. Shut down the old version of the application.

 2. Still using the old version of Berkeley DB, run recovery on the database
    environment using the DB_ENV->open method or the db_recover utility.

 3. If you used the DB_ENV->open method to run recovery, make sure that the
    Berkeley DB environment is removed using the DB_ENV->remove method or 
    an appropriate system utility.

 4. Archive the database environment for catastrophic recovery.
    See Archival procedures for more information.

 5. Recompile and install the new version of the application.

 6. Force a checkpoint using the DB_ENV->txn_checkpoint method or
    the db_checkpoint utility. If you use the db_checkpoint utility, make sure
    to use the new version of the utility; that is, the version that came with
    the release of Berkeley DB to which you are upgrading.

 7. Restart the application. 

Is recommend to use the db_ utilities, and not write your own upgrade program!


Removed APIs
------------

This section describes features and APIs that are no longer available
in this release.

* Thread per connection

  The primary purpose of this concurrency model was to serialize the
  requests received over a connection, either because the application
  needed to ensure that requests are dispatched in the order they are
  received, or because the application did not want to implement the
  synchronization that might be required when using the thread pool
  concurrency model.

  Another reason for using the thread-per-connection concurrency model
  is that it was required by the IceSSL plug-ins for Java and C#. This
  requirement has been eliminated.

  The ability to serialize requests is now provided by the thread pool
  and enabled via a new configuration property:

  <threadpool>.Serialize=1

  Please refer to the "Ice Run Time" chapter of the Ice manual for
  more details on this feature.

  Aside from the potential semantic changes involved in migrating your
  application to the thread pool concurrency model, other artifacts of
  thread-per-connection may be present in your application and must be
  removed:

  - The configuration properties Ice.ThreadPerConnection and
    <proxy>.ThreadPerConnection

  - The proxy methods ice_threadPerConnection and
    ice_isThreadPerConnection

* .NET metadata

  The metadata directive "cs:collection" is no longer valid. Use
  ["clr:collection"] instead.

* C++

  The following methods have been removed:

  - Application::main(int, char*[], const char*, const Ice::LoggerPtr&)

    Use Application::main(int, char*[], const InitializationData&)
    instead.

  - initializeWithLogger
  - initializeWithProperties
  - initializeWithPropertiesAndLogger

    Use initialize(int, char*[], const InitializationData&) instead.

  - stringToIdentity
  - identityToString

    Use the equivalent Communicator operations.

* Java

  The following methods have been removed:

  - Application.main(String, String[], String, Logger)

    Use Application.main(String, String[], InitializationData)
    instead.

  - initializeWithLogger
  - initializeWithProperties
  - initializeWithPropertiesAndLogger

    Use initialize(String[], InitializationData) instead.

* .NET

  The following methods have been removed:

  - Application.main(string, string[], string, Logger)

    Use Application.main(string, string[], InitializationData)
    instead.

  - initializeWithLogger
  - initializeWithProperties
  - initializeWithPropertiesAndLogger

    Use initialize(ref string[], InitializationData) instead.

* Python

  The following methods have been removed:

  - initializeWithLogger
  - initializeWithProperties
  - initializeWithPropertiesAndLogger

    Use initialize(args, initializationData) instead.

  - stringToIdentity
  - identityToString

    Use the equivalent Communicator operations.

* General

  The following methods have been removed:

  - ice_hash
  - ice_communicator
  - ice_collocationOptimization
  - ice_connection

    These proxy methods were replaced by ones of the form ice_get...,
    such as ice_getHash. ice_collocationOptimization is now
    ice_getCollocationOptimized.

  - ice_newIdentity
  - ice_newContext
  - ice_newFacet
  - ice_newAdapterId
  - ice_newEndpoints

    These proxy methods were replaced by ones that do not use "new" in
    their names. For example, ice_newIdentity was replaced by
    ice_identity.

* Ice.LoggerPlugin

  This property provided a way to install a custom logger
  implementation. It has been replaced by a more generalized facility
  for installing custom loggers.


Deprecated APIs
---------------

The Ice APIs and components listed below are deprecated in this
release. They will be supported for at least one more minor release;
for example, these items will be supported in Ice 3.4 and removed in
Ice 3.5. We encourage you to update your applications and eliminate
the use of these APIs as soon as possible.

* Java2 language mapping

  Java5 is now the default language mapping. Applications that use the
  Java2 mapping can continue to use it by adding the appropriate
  metadata tag to your Slice files or by using the "--meta java:java2"
  option when running the Slice-to-Java compiler. Note that the
  compiler now emits a deprecation warning when it encounters the
  Java2 metadata tag.

  If you used the "java:java5" metadata tag when compiling your Slice
  definitions, you can now remove those tags. Any uses of custom type
  metadata ("java:type:...") should also be reviewed.

* Sequences as dictionary keys

  The use of sequences, and structures containing sequences, as the
  key type of a Slice dictionary is now deprecated.

* LocalObject

  The mappings for the LocalObject type have changed in Java, .NET and
  Python. The new mappings are shown below:

  Java    java.lang.Object
  .NET    System.Object
  Python  object

  The types Ice.LocalObject and Ice.LocalObjectImpl are deprecated.

* Ice.MonitorConnections

  In previous releases this property specified the interval at which a
  background thread in the Ice run time checked for idle connections
  and enforced timeouts on AMI requests. This setting is now ignored
  because the changes to AMI (see "New Features") include more precise
  AMI timeouts.

* Ice.Trace.Location

  This property has been replaced by Ice.Trace.Locator.

* Ice.Default.CollocationOptimization

  This property, as well as the corresponding proxy property, have
  been replaced by Ice.Default.CollocationOptimized and
  <proxy>.CollocationOptimized, respectively.

* <Adapter>.RegisterProcess

  This property caused the Ice run time to register a proxy with the
  locator registry (e.g., IceGrid) that allowed the process to be shut
  down remotely. The new administrative facility (see "New Features")
  has replaced this functionality.

* Ice.ServerId

  As with <Adapter>.RegisterProcess, this property was used primarily
  for IceGrid integration and has been replaced by a similar mechanism
  in the administrative facility (see "New Features").

* Glacier2.Admin
  IcePatch2.Admin

  These are the names of administrative object adapters in Glacier2
  and IcePatch2, respectively. The functionality offered by these
  object adapters has been replaced by that of the administrative
  facility (see "New Features"), therefore these adapters (and their
  associated configuration properties) are deprecated.


======================================================================
4. Platform specific notes
======================================================================


IBM JDK
--------

The IBM JDK ships with limited jurisdiction policy files for the
cryptographic libraries. This creates an issue for Ice's certificate
authority script (iceca) when running with the command-line options
"iceca java --import". The import fails with an error similar to:

  "java.lang.SecurityException: Unsupported keysize or algorithm
  parameters"

To solve this problem you must install the unlimited jurisdiction
policy files. For more information, including a link to download
the policy files, see:

  http://www.ibm.com/developerworks/java/jdk/security/50/

Once you have downloaded the policy files, you must unpack them into
the jre/lib/security directory.


Java and IPv6
-------------

IPv6 is not currently supported in Java on Windows due to a bug in the
JVM. Refer to the bug database for more information:

  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6230761


Mono
----

Mono requires that a system's host name be correctly configured and
that it resolves to an IP address. Otherwise, Mono is unable to
determine the local IP addresses, which causes the creation of object
adapters that listen on INADDR_ANY/0.0.0.0 to fail with an
Ice::DNSException.


Red Hat Enterprise Linux 5.1
----------------------------

On Red Hat Enterprise Linux 5.1 systems, Ice connection establishment
to an inactive port of an IPv6 interface might hang instead of
immediately reporting "connection refused" (ECONNREFUSED). The hang
can last for several minutes and is similar to hangs you would get if
you try to connect to an unreachable address. This is a RHEL 5.1
kernel issue which has been fixed in the RHEL 5.2 kernel.

Refer to https://bugzilla.redhat.com/show_bug.cgi?id=248052 for more
information.


Solaris 10 x86
--------------

C++ developers using sequence<bool> on Solaris 10 x86 (32-bit) should
link their applications with the static version of libCstd, or upgrade
the Sun C++ runtime shared libraries to a newer version (not yet
available as of this Ice release).

Refer to http://forum.java.sun.com/thread.jspa?threadID=5277939 for
more information.

======================================================================
5. Known Problems
======================================================================

slice2html generates incorrect code for some legal constructs. The
problem is caused by bug in the mcpp preprocessor. For example:

module M
{
    class SomeClass; // Forward declaration. mcpp loses this.

    struct SomeStruct
    {
        SomeClass* proxy;
    };
};

The mcpp bug causes the forward declaration to be lost, resulting in
an undefined symbol error for the proxy member. To work around this
issue, you can move the trailing comment onto a separate line:

module M
{
    // Forward declaration. This works.
    class SomeClass;

    struct SomeStruct
    {
        SomeClass* proxy;
    };
};

Or you can use a C-style comment:

module M
{
    class SomeClass; /* Forward declaration. This works. */

    struct SomeStruct
    {
        SomeClass* proxy;
    };
};
