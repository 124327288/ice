======================================================================
Ice for Ruby
======================================================================

This file describes how to compile Ice for Ruby on Linux.


Requirements
------------

- Ice @ver@
- Ruby 1.8.4 or 1.8.5


Compiling Ice
-------------

Before compiling the Ice extension for Ruby, you must first apply a
patch and build the Ice for C++ @ver@ source distribution. You can
obtain the source distribution from the ZeroC web site:

  http://www.zeroc.com/download.html

Follow these steps:

1. Extract the Ice @ver@ source distribution. Subsequent steps assume
   that you extracted the archive into the /tmp/Ice-@ver@ directory.

2. Extract the patch.zip archive (included in the Ice for Ruby source
   distribution) into the /tmp/Ice-@ver@ directory. This patch adds
   several files and replaces several others.

3. Follow the instructions provided in /tmp/Ice-@ver@/INSTALL.LINUX
   for building and installing Ice as usual.


Compiling Ice for Ruby
----------------------

The instructions for compiling the Ice extension assume that you have
already installed Ruby.

Follow these steps:

1. If you installed Ruby in a non-standard location, set the RUBY_HOME
   environment variable to the installation directory. For example:

   $ export RUBY_HOME=/opt/ruby-1.8.5

2. Set the ICE_HOME environment variable to the directory of your
   patched Ice installation, for example:

   $ export ICE_HOME=/opt/Ice-@ver@

3. Modify your PATH environment variable to include the following
   directories:

   - $ICE_HOME/bin
   - $RUBY_HOME/bin (if necessary)

4. Modify your LD_LIBRARY_PATH environment variable to include
   $ICE_HOME/lib:

   $ export LD_LIBRARY_PATH=$ICE_HOME/lib:$LD_LIBRARY_PATH

5. Run make.

If no errors occurred, you can now begin using Ice for Ruby.


Using Ice for Ruby
------------------

There are a number of ways you can modify the interpreter's load path
so that it can successfully locate the Ice extension. For example, you
can add the installation directory to RUBYLIB:

  $ export RUBYLIB=/opt/IceRuby-@ver@/ruby:$RUBYLIB

Another possibility is to pass the extension's installation directory
to the interpreter using the -I option as follows:

  $ ruby -I/opt/IceRuby-@ver@/ruby ...

Finally, you can modify the load path directly in a script like this:

  # Ruby
  $:.unshift('/opt/IceRuby-@ver@/ruby')
  require 'Ice'
  ...

To verify that Ruby can load the Ice extension successfully, open a
command window and start the interpreter using irb, as shown below:

  $ irb
  irb(main):001:0>

At the prompt, enter

  require "Ice"

If the interpreter responds with the value "true", the Ice extension
was loaded successfully. Enter "exit" to quit the interpreter.


Running the demos
-----------------

The demos directory contains Ruby versions of the Ice sample programs.
Note that only clients are provided, since Ice for Ruby does not
support server-side activities. In order to run a sample client, you
must first start its corresponding server from another Ice language
mapping, such as C++.

As an example, let's run the hello application in demo/Ice/hello using
the C++ server. Assuming that your compiled Ice source distribution is
located in /tmp/Ice-@ver@, and that you have already compiled the
sample C++ programs, we begin by starting the server:

  $ cd /tmp/Ice-@ver@/demo/Ice/hello
  $ server

In a separate window, start the client:

  $ cd /opt/IceRuby-@ver@/demo/Ice/hello
  $ ruby Client.rb

Some demo directories contain README files if additional requirements
are necessary.


Running the tests
-----------------

You can run the test suite, provided that you have installed Python.
Furthermore, the Ice for C++ tests must be built in the directory
specified by the ICE_HOME environment variable.

Open a command window and change to the top-level directory. At the
command prompt, execute:

  $ python allTests.py

You can also run tests individually by changing to the test directory
and running this command:

  $ python run.py

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".
