Changes since version 3.1.1
---------------------------     

- Proxies can now be configured to use thread-per-connection.

- Added proxy methods ice_isPreferSecure and ice_preferSecure.

- Plug-in is now compatible with ruby 1.8.1.

- Added support for a user callback when SIGINT like signals are
  sent to applications that use the Application interface. See
  Application::interruptCallback and Application::callbackOnInterrupt
  for details. Fixed support for holdInterrupt and releaseInterrupt.

- Fixed bug with Application.holdInterrupt.

- Fixed a bug that would cause the plug-in to abort if a GC occurred
  after the communicator was destroyed.

- Fixed a code-generation bug that occurred when the name of a
  data member begins with an uppercase letter.

- Added Ice::getProcessLogger().

- Added Communicator::isShutdown().

- Added Communicator::propertyToProxy() which creates a proxy from
  a set of properties. This function allows you to set various local
  proxy settings, such as the Locator cache timeout, which cannot be
  set using stringToProxy().

- New feature: implicit context 
  When you invoke an operation on a proxy and don't pass an explicit 
  context, Ice uses the "implicit context" combined with the context
  associated with the proxy (if there is one)
  You can retrieve and set this ImplicitContext using 
  Communicator::getImplicitContext(). Four ImplicitContext implementations
  are available. You select an implementation by setting the 
  Ice.ImplicitContext property to one of the following values:
    * None: (the default) No implicit context at all
    * PerThread: The implementation maintains a Context per thread
    * Shared: The implementation maintains a single Context shared 
              by all threads, and serializes access to this Context
    * SharedWithoutLocking: The implementation maintains a single 
              Context shared by all threads, and does not serialize 
              access to this Context

- Removed defaultContext from InitializationData

- Communicator::setDefaultContext() and Communicator::getDefaultContext()
  have been deprecated.

- Changed the mapping of sequence<byte> for performance reasons:

  - A string is now accepted as a legal value when sequence<byte> is
    expected. An array of integers is also accepted, but the Ice run
    time validates every element of the array to ensure it is in the
    proper range, therefore using an array is much slower than using
    a string.

  - A sequence<byte> value is now always received as a string.

- Added UnexpectedObjectException. This exception is raised if you
  use Slice classes and client and server are compiled with mismatched
  Slice definitions. Alternatively, this exception is raised if you
  use dynamic invocation and pass a class of the wrong type as an
  operation parameter.

- The Slice keyword 'nonmutating' is now deprecated; 'idempotent'
  should be used instead. A new metadata directive is supported for
  backward-compatibility (see below).

- New Slice metadata for operations:

  - ["nonmutating"] provides backward compatibility for idempotent
    operations that were previously declared using the deprecated
    'nonmutating' keyword. You can replace the 'nonmutating' keyword
    with '["nonmutating"] idempotent' to maintain compatibility with
    objects implemented using Ice 3.0 or 3.1.
