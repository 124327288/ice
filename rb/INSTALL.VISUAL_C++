======================================================================
Ice for Ruby
======================================================================

This file describes how to compile Ice for Ruby on a Windows platform.


Requirements
------------

- Ice @ver@
- Visual C++ 6.0 SP5 with STLport 4.5 (or later)*
- Ruby 1.8.4 or 1.8.5

* Ruby requires Visual C++ 6.0, therefore it is the only compiler
  supported by Ice for Ruby.


Obtaining Ruby
--------------

The instructions for compiling the Ice extension assume that you have
already installed the binary Ruby distribution into the C:\ruby
directory. You can obtain the installer from RubyForge:

  http://rubyforge.org/projects/rubyinstaller/


Compiling Ice
-------------

Before compiling the Ice extension for Ruby, you must first apply a
patch and build the Ice for C++ @ver@ source distribution. You can
obtain the source distribution from the ZeroC web site:

  http://www.zeroc.com/download.html

You will likely also need the third-party installer for VC 6.0.

Follow these steps:

1. Extract the Ice @ver@ source distribution. Subsequent steps assume
   that you extracted the archive into the C:\Ice-@ver@ directory.

2. Extract the patch.zip archive (included in the Ice for Ruby source
   distribution) into the C:\Ice-@ver@ directory. This patch adds
   several files and replaces several others.

3. Follow the instructions provided in C:\Ice-@ver@\INSTALL.VISUAL_C++
   for configuring Visual C++ and building Ice as usual.


Compiling Ice for Ruby
----------------------

Follow these steps to build the extension:

1. Set the ICE_HOME environment variable with the directory of your
   Ice source distribution, for example:

   ICE_HOME=C:\Ice-@ver@

   In the System control panel, select the Advanced tab, click on
   Environment Variables, and a new user variable for ICE_HOME.

2. Modify your PATH environment variable to include the following
   directories:

   - %ICE_HOME%\bin
   - C:\Ice-@ver@-ThirdParty-VC60\bin (if you used the Ice third-
     party installer)
   - C:\ruby\bin

3. Restart Visual C++.

4. In Visual C++, choose Tools->Options->Directories.

   - Select "Include files" and add an entry for the following
     directory:

     C:\ruby\lib\ruby\1.8\i386-mswin32

   - Select "Library files" and add an entry for the following
     directory:

     C:\ruby\lib

5. Open the all.dsw workspace in the Ice for Ruby source
   directory.

6. Choose Build->Set Active Configuration and select

   IceRuby - Win32 Release

7. Choose Build->Build IceRuby.dll

If no errors occurred, you can now begin using Ice for Ruby.


Using Ice for Ruby
------------------

The Ruby interpreter must be able to locate the Ice extension. One way
to configure the interpreter is to define the RUBYLIB environment
variable as follows:

  set RUBYLIB=C:\IceRuby-@ver@\ruby

This example assumes your Ice for Ruby source distribution is located
in the C:\IceRuby-@ver@ directory.

To verify that Ruby can load the Ice extension successfully, open a
command window and start the interpreter using irb.bat, as shown
below:

  > irb.bat
  irb(main):001:0>

At the prompt, enter

  require "Ice"

If the interpreter responds with the value "true", the Ice extension
was loaded successfully. Enter "exit" to quit the interpreter.


OpenSSL Compatibility Issue
---------------------------

The Ruby installer includes versions of the OpenSSL DLLs that are not
compatible with the ones supplied with Ice. If you intend to use SSL
in your Ice for Ruby applications, you will need to remove or rename
the following files in the Ruby installation directory:

  libeay32.dll
  ssleay32.dll

If you used the default installation directory, these files are
located in C:\ruby\bin.

Also be aware that the Ruby installer inserts C:\ruby\bin at the
beginning of the system PATH, therefore the DLLs listed above can also
have an adverse impact on other Ice language mappings that use
OpenSSL, such as C++ and Python.


Running the demos
-----------------

The demos directory contains Ruby versions of the Ice sample programs.
Note that only clients are provided, since Ice for Ruby does not
support server-side activities. In order to run a sample client, you
must first start its corresponding server from another Ice language
mapping, such as C++.

As an example, let's run the hello application in demo\Ice\hello using
the C++ server. Assuming that your Ice installation is located in
C:\Ice-@ver@, and that you have already compiled the sample C++
programs, we begin by starting the server:

  > cd \Ice-@ver@\demo\Ice\hello
  > server

In a separate window, start the client:

  > cd \IceRuby-@ver@\demo\Ice\hello
  > ruby Client.rb

Some demo directories contain README files if additional requirements
are necessary.


Running the tests
-----------------

You can run the test suite, provided that you have installed Python.
Furthermore, the Ice for C++ tests must be built in the directory
specified by the ICE_HOME environment variable.

Open a command window and change to the top-level directory. At the
command prompt, execute:

  python allTests.py

If everything worked out, you should see lots of "ok" messages. In
case of a failure, the tests abort with "failed".
