Please see the file INSTALL.txt for installation instructions.


Asynchronous Message Invocation (AMI)
-------------------------------------

AMI is implemented differently in Ice for Silverlight than it is in
Ice for C#. Specifically, the means by which you define the callbacks
that are called once the AMI call either succeeds or fails is 
different.

In Ice for C# it is necessary for the application to extend an AMI
callback class generated by the Slice-To-C# translator and implement
the abstract ice_response() and ice_exception() methods in the 
extended class. A instance of this class is then passed to the async
call on the proxy.

For example consider the following slice:

    module Foo
    {
        interface Bar
        {
            void method(int param1, out string param2);
        }
    };

The generated callback class that would result for the method would
be named Foo.AMI_Bar_method and the user would have to implement a 
callback class similar to the following:

    class AMI_Bar_methodI : Foo.AMI_Bar_method
    {
        public override void ice_response(string param2)
        {
            // Called on success
            ...
        }

        public override void ice_exception(Ice.Exception ex)
        {
            // Called on failure
            ...
        }
    }

The method invocation would then look like the following:


    public void someFunction()
    {
        ...

        Foo.BarPrx proxy = ... // Obtain proxy by regular means
        proxy.method_async(new AMI_Bar_methodI(), 0);

        ...
    }

Ice for Silverlight uses C# delegates to implement the callbacks now
instead of the callback class. A callback class instance is no longer
passed to the asynchronous call Instead two delegate functions are
passed, one for the response callback and one for the exception 
callback. The signatures for these methods are the same as those for
the ice_response() and ice_exception() methods in Ice for C#.

Therefore using the same slice as above, for Ice for Silverlight the
AMI call could be implemented similar to the following:

    public void methodResponse(string param2)
    {
        // Called on success
        ...
    }

    public void methodException(Ice.Exception ex)
    {
        // Called on failure
        ...
    }

    public void someFunction()
    {
        ...

        Foo.BarPrx proxy = ... // Obtain proxy by regular means
        proxy.method_async(methodResponse, methodException, 0);

        ...
    }
