=========================================================================
Requirements
=========================================================================

- PHP5 (http://www.php.net/downloads.php)
- Ice 1.1.1

=========================================================================
Building PHP with the Ice extension (Linux/Solaris)
=========================================================================

PHP's build system can create several versions of the PHP interpreter.
There are the command-line interface (CLI) and Common Gateway Interface
(CGI) interpreters, both of which are standalone executables. In addition,
the build system can package the interpreter as a shared library for
use as a Web server module.

To further complicate matters, PHP extensions can be either static or
dynamic. A static extension is compiled into the interpreter, whereas
a dynamic extension is created as a standalone shared library that is
installed in PHP via configuration directives.

The Ice extension for PHP supports both static and dynamic configurations.
The only supported way to compile the Ice extension is as part of the
larger PHP build process. Unfortunately, PHP's build system does not
completely accommodate extensions written in C++, such as the Ice
extension. On some platforms (currently only Solaris with Sun CC), a bit
of fiddling is required in order to get everything built properly.

After downloading and extracting the PHP5 source code, you must
incorporate the Ice extension sources into the PHP5 source tree.
There are two ways to do this:

1) Copy the extension source directory.

   $ cd <icephpdir>
   $ cp -r src/ice <phpdir>/ext

2) Create a symbolic link to the extension:

   $ cd <phpdir>
   $ ln -s <icephpdir>/src/ice ext

In order to make the PHP build system aware of the Ice extension, the
configure script must be regenerated:

$ cd <phpdir>
$ rm -rf configure autom4te.cache
$ ./buildconf --force

Set the CC and CXX environment variables to the names of your C and
C++ compilers, respectively.

You are now ready to configure PHP. To include support for a static
Ice extension, use the --with-ice option to specify the location of the
Ice installation:

$ ./configure --with-ice=$ICE_HOME ...

If you want to build a dynamic Ice extension, use this version of the
--with-ice option:

$ ./configure --with-ice=shared,$ICE_HOME ...

Note that additional configuration options are generally necessary.
Please refer to the PHP documentation for more information.

If you are building PHP version 5.0.0b1, you will need to manually edit
one of the PHP source files to avoid a compiler error. Open the file
php-5.0.0b1/Zend/zend_operators.h and modify line 206 to add a cast, as
shown below:

    return zend_str_tolower_copy((char*)emalloc(length+1), source, length);

If you are using Solaris with Sun CC, please refer to the section titled
"Additional Requirements for Solaris with Sun CC" before proceeding any
further.

Finally, run make:

$ make

Note that if the Ice extension's config.m4 file is changed, then you must
repeat the steps above to regenerate the configure script, then execute
configure again (or use config.nice instead).

See the PHP documentation for more details on the PHP build process.

=========================================================================
Additional Requirements for Solaris with Sun CC
=========================================================================

Edit the file <phpdir>/libtool, search for the line beginning with
"archive_cmds=", and change \$LD to \$CXX in the value of both
archive_cmds and archive_expsym_cmds.

If you are building the Ice extension in a static configuration, edit the
file <phpdir>/Makefile and make the following changes:

- If the command-line interpreter is being built, search for the
  definition of the BUILD_CLI variable and change "$(CC)" to "$(CXX)".

- If a Web server module is being built, search for the line beginning
  with "libphp5.la:", and change "$(CC)" to "$(CXX)" in that rule, as
  well as in the rule for "libs/libphp5.bundle" below.

=========================================================================
Building PHP with the Ice extension (Windows)
=========================================================================

Compiling PHP from source code on Windows is a tedious process, therefore
we recommend that you download the precompiled dynamic extension for Ice
from the ZeroC web site and use the binary PHP distribution if possible.

If you prefer to build the dynamic extension yourself, you will need to
do the following:

1) Download and extract the PHP5 sources so that the PHP header files are
   available.

2) Have a suitable Ice development environment.

3) Configure the include and library paths in Visual C++ for PHP and Ice.
   Assuming that you've extracted the PHP5 sources into C:\PHP5, and
   installed Ice into C:\Ice, then the following paths must be configured:

   Include:
     C:\PHP5
     C:\PHP5\main
     C:\PHP5\Zend
     C:\PHP5\TSRM
     C:\Ice\include

   Library:
     C:\PHP5
     C:\Ice\lib

   If you are using Visual C++ 6.0, then you must also be sure to include
   the appropriate paths for STLport.

4) Open the workspace icephp.dsw, select the Debug or Release configuration,
   and build php_ice.dll. Note that the Ice extension must be compiled
   using the same Debug/Release configuration as PHP itself. If you are
   linking against the dynamic libraries included in the binary PHP
   distribution, you must use the Release configuration when compiling the
   Ice extension.

=========================================================================
Installing a Dynamic Extension
=========================================================================

If you are using the dynamic Ice extension, then the shared library must
be moved into a directory where PHP can find it. This directory is
determined by the PHP configuration directive "extension_dir". You can
determine the default value for this directive by running the command-
line version of PHP with the -i option.

After compiling the dynamic extension on Linux and Solaris, the shared
library can be found in the "modules" subdirectory of the PHP source
tree. If you've compiled the dynamic Ice extension on Windows, the DLL
is located in bin/Debug/php_ice.dll or bin/Release/php_ice.dll, depending
on the build configuration you selected.

Once you've copied the dynamic extension to PHP's extension directory,
you will need to enable the extension in PHP configuration. In php.ini,
use the following directive on Linux and Solaris:

extension = ice.so

On Windows, use this directive:

extension = php_ice.dll

In an Apache configuration, these directives can also be set in Apache's
configuration using directives as shown below:

php_admin_value extension ice.so

or

php_admin_value extension php_ice.dll

=========================================================================
Dependencies
=========================================================================

Whether you build a dynamic or static Ice extension, PHP will need to be
able to locate the Ice run-time libraries "Ice", "Slice" and "IceUtil").
In general, these libraries must reside in a directory of the user's
PATH.

For Web servers, the libraries may need to reside in a system directory.
For example, on Linux you can add the directory containing the Ice
run-time libraries to /etc/ld.so.conf and run ldconfig. On Windows,
you can copy the DLLs to the C:\WINDOWS\system32 directory.

You can verify that the Ice extension is installed properly by examining
the output of the "php -m" command, or by calling the phpinfo() function
from a script.

Note that if you want to use IceSSL from the Ice extension, then PHP will
also need access to the shared libraries for IceSSL and Xerces.

Finally, the Ice extension will need to execute the Ice preprocessor
(icecpp), therefore this binary must reside in an accessible directory.

=========================================================================
Running the Tests
=========================================================================

The test subdirectory contains PHP implementations of the core Ice test
suite. In order to run these tests, you must have Python 2.2 or later,
and the Ice for C++ tests must be built in the directory specified by
the ICE_HOME environment variable.

The test scripts require that the CLI version of the PHP interpreter
be available in your PATH.

To run all of the tests, do the following:

$ python allTests.py

You can also run tests individually by changing to the test directory
and running this command:

$ python run.py

=========================================================================
Linux Issues
=========================================================================

The threading issue on RedHat 9, discussed in the file INSTALL.LINUX in
the Ice source distribution, can Ice cause programs to hang indefinitely
in certain circumstances.

If you are using the Ice extension in a PHP-CGI executable, or in a PHP
Apache module, then you must ensure that the environment variable
LD_ASSUME_KERNEL has the value "2.4.1".

For the CGI case, you can set this variable in the Apache configuration
with the following directive:

SetEnv LD_ASSUME_KERNEL 2.4.1

For an Apache module, you must ensure the httpd server executable is
started with this environment variable defined correctly.
