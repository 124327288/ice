Changes since version 1.0.1
---------------------------

- A monitor now holds the mutex lock while signaling a condition
  variable. Otherwise it's possible that that the condition variable
  is destroyed before the signaling call returns, resulting in
  undefined behavior. The performance difference is minimal, hardly
  measurable.

- Further performance improvements with respect to latency.

- Added demo/Ice/throughput, which can be used to measure the transfer
  time of large sequences.

- Fixed a bug in the slice2cpp code generator: if a class was forward
  declared and used as a class member, but the definition of the class
  was not supplied in the same Slice compilation unit, invalid code
  was generated.

- Fixed filedescriptor leak in the Glacier router starter.

- Inlined most operators in IceUtil::Time for performance reasons.

- Added IceUtil::ThreadControl::isAlive(). This function is useful for
  implementing a non-blocking join().

- Added IceUtil::ThreadControl::id() member function.

- The scope of IceUtil::Thread::ThreadId has been changed to
  IceUtil::ThreadId. This is the type returned by both Thread::id() and
  ThreadControl::id().

- Joining with a thread more than once, joining with a detached
  thread, or detaching a detached thread now have undefined
  behavior. (Previously, doing any of these things raised an
  exception.)

- Added timestamps to the default Ice logger. You can enable
  timestamps by setting the `Ice.Logger.Timestamp' property to a value
  larger than zero. By default timestamps are disabled.

- Added IceUtil::Time::toString() to convert a time to a string.

- Fixed a bug in Freeze::DBEnvironment which caused the sync method to
  hang.

- Improved IceBox service deactivation. Instead of successively
  stoping a service and destroying its communicator, services are now
  all stopped first and then their communicators are destroyed.

- Modified the Ice protocol to fix a problem with compression. The
  message types for compressed messages have been removed, and a
  field has been added to the message header indicating compression
  status.

- Added version negotiation to the Ice protocol. This permits future
  protocol extensions to be added without breaking interoperability
  with older deployed clients and servers. Unfortunately, doing this
  broke compatibility with the existing protocol so, when upgrading to
  this version, you must make sure that clients and servers use the
  same version of libIce.so.

- Added a magic number to the Ice protocol. All Ice protocol messages
  have 'I', 'c', 'e', 'P' (encoded as ASCII) in the first four bytes.
  This is useful to allow protocol analyzers to recognize Ice
  messages.

- Changed the encoding of encapsulations. An encapsulation now looks
  like:

	size (4 bytes)
	major version number (1 byte)
	minor version number (1 byte)
	data (n bytes)

  The size includes the count of bytes for the size and versions, so
  the value of size is n + 6.

- Added -v and -e options to stringified UDP endpoints. -v sets the
  protocol version and -e sets the encoding version. (The current
  version for both protocol and encoding is 1.0.)

- Compatibility fixes for GCC 2.96.

- Added `option' and `vm-option' elements to IcePack server
  descriptors. These elements are used to pass command line options to
  server processes.

- Added scandir() and alphasort() for Sun-OS and other Unix systems
  that do not have these BSD calls.

Changes since version 1.0.0
---------------------------

- Added --header-ext and --source-ext command-line options to
  slice2cpp and slice2freeze. These permit setting header and
  source file extensions for C++ other than the default `h' and
  `cpp' file extensions.

- Added the macro ICE_INT64 as a portable wrapper for long long
  constants.

- Added support for Xerces 2.2.0.

- Added support for OpenSSL 0.97a.

- Added OPENSSL_FLAGS to several Makefiles that were missing it.

- Changed signature of IceUtil::Time::milliSeconds() to
  IceUtil::Int64, to avoid overflows.

- Renamed Lock and TryLock templates to LockT and TryLockT, to avoid
  compilation problems with Sun Forte 6.2.

- Fixed a bug with throwing exceptions in AMD calls after invoking
  ice_response().

- Fixed a bug with throwing exceptions in AMI from within
  ice_response().

- For posix threads, PTHREAD_MUTEX_RECURSIVE_NP is now only used if
  __linux__ is defined. Otherwise, PTHREAD_MUTEX_RECURSIVE is used.

- The EPROTO error code is now only used if it is defined (such as
  on Linux).

- Several other changes that make Ice for C++ more portable.

- Updated SSL test certificates. The old ones have expired.
