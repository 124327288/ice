======================================================================
The Internet Communications Engine
======================================================================

Ice is a modern alternative to object middleware such as CORBA or
COM/DCOM/COM+. It is easy to learn, yet provides a powerful network
infrastructure for demanding technical applications. It features an
object-oriented specification language, easy to use C++, C#, Java,
Python, Ruby, PHP, and Visual Basic mappings, a highly efficient
protocol, asynchronous method invocation and dispatch, dynamic
transport plug-ins, TCP/IP and UDP/IP support, SSL-based security, a
firewall solution, and much more.

Ice is available under the terms of the GNU General Public License
(GPL) (see LICENSE file). Commercial licenses are available for
customers who wish to use Ice with proprietary products. Please
contact sales@zeroc.com for more information about licensing Ice.


======================================================================
About this distribution
======================================================================

This distribution is a binary release of Ice @ver@ for Mac OS X and
includes the following components:

- The Ice runtime, including executables for the Ice services, and 
  Slice files.

- Run time libraries for C++, Java, and Python. These libraries enable
  you to execute Ice applications.

- Tools and libraries for developing Ice applications.


======================================================================
Requirements
======================================================================

This binary distribution was compiled on Mac OS X 10.4.8 using the
default C++ compiler, GCC 4.0.1. 

This distribution only includes Intel binaries. If you need PowerPC
binaries, you can download the Ice for C++ source code from the ZeroC
web site at http://www.zeroc.com/download.html.


Java
----

Ice for Java requires J2SE 1.4.2 or J2SE 1.5.0.


Python
------

The Ice extension for Python included in this distribution requires
Python 2.3 installed with Mac OS X 10.4. If you prefer to use a later
version of Python, you can download the Ice for Python source code
from the ZeroC web site at http://www.zeroc.com/download.html.


======================================================================
Berkeley DB and Expat
======================================================================

This distribution includes the C++ and Java runtime for Berkeley DB
4.5.20 and the Expat 2.0.0 library. The Berkeley DB C++ runtime was
built using GCC 4.0.1. The Berkeley DB and Expat licenses are provided
in the file THIRD_PARTY_LICENSE.


======================================================================
Setting up your environment to use Ice
======================================================================


General
-------

The discussion below assumes you have defined the ICE_HOME variable
with the directory of your Ice installation.

In order to use Ice services and tools such as Slice translators, you
need to add $ICE_HOME/bin to your PATH as shown in the bash command
below:

$ export PATH=$ICE_HOME/bin:$PATH

The install name of Ice shared libraries in this distribution contain
the /opt/Ice-@mmver@/lib path. In order to run Ice services and tools,
you can do one of the following:

 - Create a symbolic link /opt/Ice-@mmver@ that points to your Ice
   installation:

   $ ln -s $ICE_HOME /opt/Ice-@mmver@

 - Add $ICE_HOME/lib to your DYLD_LIBRARY_PATH environment variable:

   $ export DYLD_LIBRARY_PATH=$ICE_HOME/lib:$DYLD_LIBRARY_PATH

If you run applications that load the IceSSL plug-in (such as the Ice
demos), you need to set the DYLD_LIBRARY_PATH environment variable as
shown above.

On Intel platforms, you also need to set DYLD_BIND_AT_LAUNCH to
prevent random crashes at runtime in the dynamic linker binding code:

$ export DYLD_BIND_AT_LAUNCH=1


C++
---

When compiling Ice for C++ programs, you must pass $ICE_HOME/include
to the compiler with the -I option, and $ICE_HOME/lib with the -L
option. Furthermore, a C++ program needs to link with at least libIce
and libIceUtil, so a typical link command would look like this:

$ c++ -o myprogram myprogram.o -L$ICE_HOME/lib -lIce -lIceUtil

Additional libraries are necessary if you are using an Ice service
such as IceGrid or Glacier2.


Java
----

To use Ice for Java, you must add $ICE_HOME/lib/Ice.jar to your
CLASSPATH, as shown below:

$ export CLASSPATH=$ICE_HOME/lib/Ice.jar:$CLASSPATH

To use the Java2 version of Ice instead, modify your CLASSPATH as
follows:

$ export CLASSPATH=$ICE_HOME/lib/java2/Ice.jar:$CLASSPATH

If you plan to use Freeze for persistence, you must also add the
Berkeley DB JAR file (db.jar) to your CLASSPATH:

$ export CLASSPATH=$ICE_HOME/lib/db.jar:$CLASSPATH

In addition, the JVM requires that the directory containing the
Berkeley DB libraries be listed in java.library.path, therefore you
must add this directory to DYLD_LIBRARY_PATH.


Python
------

To use Ice for Python, the PYTHONPATH environment variable must be
updated so that the interpreter can load the Ice extension and
supporting Python files:

$ export PYTHONPATH=$ICE_HOME/python:$PYTHONPATH


======================================================================
Using the IceGrid Administrative Console
======================================================================

A Java-based graphical tool for administering IceGrid applications
is included in this distribution. The Java archive file is installed
as

$ICE_HOME/lib/IceGridGUI.jar

With a suitable Java installation, you can execute the application
using the following command:

$ java -jar IceGridGUI.jar


======================================================================
Demos
======================================================================

Sample programs are provided in the Ice-@ver@-demos.tar.gz package,
which can be downloaded from the ZeroC web site at

  http://www.zeroc.com/download.html

Please refer to the README.DEMOS file included in that package for
more information.


======================================================================
Binary compatibility
======================================================================

Ice patch releases are binary compatible. For example, Ice version 
<x>.<y>.1 is compatible with <x>.<y>.0: you can run an application 
built against Ice <x>.<y>.0 with Ice <x>.<y>.1 (or later) without 
having to recompile or relink this application.

Please refer to the RELEASE_NOTES.txt file included in this
distribution for detailed upgrade instructions.
