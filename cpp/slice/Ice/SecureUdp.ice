// **********************************************************************
//
// Copyright (c) 2001
// MutableRealms, Inc.
// Huntsville, AL, USA
//
// All Rights Reserved
//
// **********************************************************************

#ifndef ICE_SECURE_UDP_ICE
#define ICE_SECURE_UDP_ICE

#include <Ice/Stream.ice>

/**
 *
 * The basic module for the Ice Security Extensions.  All core functionality
 * for secure connections can be found in this module and its submodules.
 *
 **/
module IceSecurity
{

/**
 *
 * This module contains all interfaces required for the implementation of
 * Secure UDP communication.  Secure UDP requires that we perform a handshake
 * to establish the keying material used to encrypt the contents of the
 * UDP packet.
 *
 **/
module SecureUdp
{

/**
 *
 * The object that represents the control channel responsible for receiving
 * handshake messages intended for the Secure UDP client from the server.
 *
 * @see ServerChannel
 *
 **/
interface ClientChannel
{
    /**
     *
     * Response from the SUDP server on receipt of a
     * [ServerChannel::clientHello] from from the SUDP client.  This message
     * is only received as a direct result of a handshake request from
     * the SUDP client.
     *
     * @param clientID The numerical Client ID assigned to the SUDP client
     * by the SUDP server.  Guaranteed to be unique per SUDP server transceiver.
     *
     * @param key The generated keying material for the SUDP client to use
     * when encrypting packet contents for transmission to the SUDP server.
     *
     * @see ServerChannel::clientHello
     *
     **/
    void serverHello(long clientID, Ice::ByteSeq key);

    /**
     *
     * Message from the SUDP server to indicate that the keying material
     * for the SUDP connection should change to the indicated value.  This
     * message may arrive unsolicited or as a result of a
     * [ServerChannel::clientKeyRequest] message.  The client will respond
     * with the [ServerChannel::clientKeyAcknowledge] message.
     *
     * @param key The generated keying material for the SUDP client to use
     * when encrypting packet contents for transmission to the SUDP server.
     *
     * @see ServerChannel::clientKeyRequest
     * @see ServerChannel::clientKeyAcknowledge
     *
     **/
    void serverKeyChange(Ice::ByteSeq key);

    /**
     *
     * This message indicates that the server has received a
     * [ServerChannel::clientGoodbye] message and is cleaning up the client.
     *
     * @see ServerChannel::clientGoodbye
     *
     **/
    void serverGoodbye();
};

/**
 *
 * The object that represents the control channel responsible for receiving
 * handshake messages intended for the Secure UDP server from the client.
 *
 * @see ClientChannel
 *
 **/
interface ServerChannel
{
    /**
     *
     * Message received by the SUDP server from the SUDP client that initiates
     * the handshake for keying material.  The calling SUDP client will pass
     * a reference to it's own [ClientChannel], and the key it is using for
     * Message Authentication Code (MAC) generation.  The SUDP server will
     * respond with [ClientChannel::serverHello].
     *
     * @param client The Ice object representing the client's control channel.
     *
     * @param MACkey A [Ice::ByteSeq] containing the client's Message
     * Authentication Code (MAC) generation key.
     *
     * @see ClientChannel::serverHello
     *
     **/
    void clientHello(ClientChannel* client, Ice::ByteSeq MACkey);

    /**
     *
     * This message is the response from the SUDP client to the server for
     * the [ClientChannel::serverKeyChange] message.  The intent is that the
     * client is acknowledging that they recieved the key in question, and
     * are indicating that the client will begin encryption using the key
     * on the indicated message.
     *
     * @param clientID The numerical Client ID assigned to the SUDP client
     * by the SUDP server.  Guaranteed to be unique per SUDP server transceiver.
     *
     * @param msgID The numerical packet ID, generated by the SUDP client,
     * which uniquely identifies a given packet from a particular SUDP client.
     *
     * @param key The generated keying material for the SUDP client to use
     * when encrypting packet contents for transmission to the SUDP server.
     *
     * @see ClientChannel::serverKeyChange
     *
     **/
    void clientKeyAcknowledge(long clientID, long msgID, Ice::ByteSeq key);

    /**
     *
     * The SUDP client will send this message to the SUDP server when it
     * requires an update on the encryption key currently being used.  This
     * message will cause the server to send a [ClientChannel::serverKeyChange]
     * message.  The client sends its own clientID, as assigned to it by the
     * server, to identify itself.
     *
     * @param clientID The numerical Client ID assigned to the SUDP client
     * by the SUDP server.  Guaranteed to be unique per SUDP server transceiver.
     *
     * @see ClientChannel::serverKeyChange
     *
     **/
    void clientKeyRequest(long clientID);

    /**
     *
     * The SUDP client will send this message upon client shutdown, and
     * indicates that the client is disconnecting.  The server will clean up
     * client-related information at this point.  The client sends its own
     * clientID, as assigned to it by the server, to identify itself.
     *
     * @param clientID The numerical Client ID assigned to the SUDP client
     * by the SUDP server.  Guaranteed to be unique per SUDP server transceiver.
     *
     * @see ClientChannel
     *
     **/
    void clientGoodbye(long clientID);
};

};

};

#endif
