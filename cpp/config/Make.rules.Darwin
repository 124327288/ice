# **********************************************************************
#
# Copyright (c) 2003-2012 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# This file is included by Make.rules when uname is Darwin.
#

CXX			= xcrun clang++

CXXFLAGS		= -Wall -Werror -D_REENTRANT

ifeq ($(OPTIMIZE),yes)
     #
     # By default we build binaries with both architectures when optimization is enabled.
     #
     ifeq ($(CXXARCHFLAGS),)
     	CXXARCHFLAGS	:= -arch i386 -arch x86_64
     endif   
     CXXFLAGS		:= $(CXXARCHFLAGS) -O2 -DNDEBUG $(CXXFLAGS)
else
     CXXFLAGS		:= $(CXXARCHFLAGS) -g $(CXXFLAGS)
endif

ifeq ($(CPP11), yes)
ifeq ($(CXX), xcrun clang++)
    CPPFLAGS += --std=c++11
    CXXFLAGS += --stdlib=libc++
    CPP11LIBSUFFIX = -c++11
endif
endif

#
# C++ run-time libraries, necessary for linking some shared libraries.
#
CXXLIBS		=

ifneq ($(embedded_runpath_prefix),)
    # Only use -rpath if OS X >= 10.5
    release = $(shell uname -r)
    ifeq ($(shell test $(firstword $(subst ., ,$(release))) -ge 9 && echo 0),0)
			LDPLATFORMFLAGS     = -Wl,-rpath,$(runpath_libdir)
    endif
endif

ifeq ($(CXX),g++)
     LDPLATFORMFLAGS		+= -rdynamic
endif


ifdef ice_src_dist
    shlibldflags    = $(CXXFLAGS) -L$(libdir)
else
    shlibldflags    = $(CXXFLAGS) -L$(ice_dir)/$(libsubdir)
endif

mklibfilename       	= $(if $(2),lib$(1).$(2).dylib,lib$(1).dylib)
mksoname           	= $(if $(2),lib$(1).$(2).dylib,lib$(1).dylib)

mklibname           	= lib$(1).dylib
curdir			= $(shell pwd)

ifneq ($(embedded_runpath_prefix),)
   mkshlib                 = $(CXX)  -dynamiclib $(shlibldflags) -o $(1) -install_name $(runpath_libdir)/$(2) $(3) $(4)
else
   mkshlib                 = $(CXX)  -dynamiclib $(shlibldflags) -o $(1) -install_name $(2) $(3) $(4)
endif

ifeq ($(DB_HOME),)
   #
   # If DB_HOME is not set and the BerkeleyDB library is not at the expected location
   # but in the ICE_DIR/lib directory, we set DB_RPATH_LINK to tell the linker where 
   # to find it.
   #
   ifndef ice_src_dist
       ifeq ($(shell test -f $(ice_dir)/$(libsubdir)/libFreeze.$(VERSION).dylib && echo 0),0)
          dblib_install_name=$(firstword $(strip $(shell otool -L $(ice_dir)/$(libsubdir)/libFreeze.$(VERSION).dylib | grep libdb_cxx)))
          ifeq ($(shell test ! -f $(dblib_install_name) -a -f $(ice_dir)/$(libsubdir)/$(notdir $(dblib_install_name)) && echo 0),0)
             DB_RPATH_LINK=-dylib_file $(dblib_install_name):$(ice_dir)/$(libsubdir)/$(notdir $(dblib_install_name))
	   endif
       endif
   endif
endif

#
# Create frameworks
#
ifneq ($(FRAMEWORK),)

FRAMEWORK_DIR = $(libdir)/Frameworks/$(FRAMEWORK).framework
FRAMEWORK_INSTALL_DIR = $(frameworks_prefix)/$(FRAMEWORK).framework
FRAMEWORK_RUN_PATH = $(FRAMEWORK_INSTALL_DIR)/Versions/$(VERSION)/$(FRAMEWORK)	

ifeq ($(FRAMEWORK),Freeze)
DB_LIBRARY_NAME = libdb_cxx-5.3$(CPP11LIBSUFFIX).dylib
endif

$(FRAMEWORK_DIR):: all
	mkdir -p $(FRAMEWORK_DIR)/Versions/$(VERSION)/Headers
	cd $(FRAMEWORK_DIR)/Versions/ && rm -f Current && ln -s $(VERSION) Current
	cp -rf $(headerdir)/$(FRAMEWORK)/*.h $(FRAMEWORK_DIR)/Versions/$(VERSION)/Headers/
	cp $(libdir)/$(LIBNAME) $(FRAMEWORK_DIR)/Versions/$(VERSION)/$(FRAMEWORK)
	cd $(FRAMEWORK_DIR)/ && \
		rm -f Headers && ln -s Versions/Current/Headers Headers && \
		rm -f $(FRAMEWORK) && ln -s Versions/Current/$(FRAMEWORK) $(FRAMEWORK)

	@if test ! -d $(FRAMEWORK_DIR)/Contents ; \
	then \
		mkdir -p $(FRAMEWORK_DIR)/Contents; \
	fi

	@if test -f $(FRAMEWORK_DIR)/Contents/Info.plist ; \
	then \
		rm -f $(FRAMEWORK_DIR)/Contents/Info.plist; \
	fi

	@sed -e "s,@VERSION@,$(VERSION),g" -e "s,@EXECUTABLE@,$(FRAMEWORK),g" \
		$(top_srcdir)/config/Framework_Info.plist > $(FRAMEWORK_DIR)/Contents/Info.plist

clean::
	rm -fr $(FRAMEWORK_DIR)

install:: $(FRAMEWORK_DIR)
	cd $(FRAMEWORK_DIR)/ && install_name_tool -id $(FRAMEWORK_RUN_PATH) Versions/$(VERSION)/$(FRAMEWORK)
	for component in IceUtil Ice IceSSL Glacier2 IcePatch2 IceStorm IceGrid; \
	do \
		install_name_tool -change $(runpath_libdir)/lib$$component.$(SOVERSION).dylib \
			$(frameworks_prefix)/$$component.framework/Versions/$(VERSION)/$$component \
			$(FRAMEWORK_DIR)/Versions/$(VERSION)/$(FRAMEWORK); \
	done

	@if test $(FRAMEWORK) = "Freeze"  ; \
	then \
		mkdir -p $(FRAMEWORK_DIR)/Versions/$(VERSION)/usr/lib/; \
		cp -rf $(DB_HOME)/lib/$(DB_LIBRARY_NAME) $(FRAMEWORK_DIR)/Versions/$(VERSION)/usr/lib/; \
		install_name_tool -change $(firstword $(strip $(shell otool -L $(libdir)/$(LIBNAME) | grep libdb_cxx))) \
				$(FRAMEWORK_INSTALL_DIR)/Versions/$(VERSION)/usr/lib/$(DB_LIBRARY_NAME)  \
				$(FRAMEWORK_DIR)/Versions/$(VERSION)/$(FRAMEWORK); \
		cd $(FRAMEWORK_DIR) && rm -f usr && ln -s Versions/Current/usr usr; \
	fi

	@if test ! -d $(frameworks_prefix) ; \
	then \
		echo "Creating $(frameworks_prefix)..." ; \
		$(call mkdir,$(frameworks_prefix), -p) ; \
	fi
  
	@echo "Installing $(FRAMEWORK).framework to $(frameworks_prefix)"; \
	if test -d $(frameworks_prefix)/$(FRAMEWORK).framework; \
	then \
		rm -fr $(frameworks_prefix)/$(FRAMEWORK).framework; \
	fi; \
	cp -R $(FRAMEWORK_DIR) $(frameworks_prefix)
else

framework::

endif

#
# Avoid OpenSSL deprecation warnings on OS X
#
OPENSSL_FLAGS   	= -DMAC_OS_X_VERSION_MIN_REQUIRED=MAC_OS_X_VERSION_10_6

BASELIBS		= -lIceUtil -lpthread 
LIBS			= -lIce $(BASELIBS)

ICONV_LIB               = -liconv

ICEUTIL_OS_LIBS         = -lpthread
ICE_OS_LIBS             = -ldl

PLATFORM_HAS_READLINE   := no

#
# QT is used only for the deprecated IceGrid and IceStorm SQL plugins
#
ifneq ($(QT_HOME),)
   ifneq ($(QT_HOME), /Library/Frameworks)
      # Frameworks are installed in the lib directory
      QT_FLAGS             = -F$(QT_HOME)/lib
      QT_LIBS              = -F$(QT_HOME)/lib
   endif
   QT_LIBS := $(QT_LIBS) -framework QtCore -framework QtSql
endif
