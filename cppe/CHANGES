Changes since version 1.1.0
---------------------------

- For object adapters without endpoints, Ice.Trace.Network >= 2 now
  prints a trace message.

- Added new overload of Ice::initialize() that accepts a StringSeq as the first argument.

- The ice_name() member function of exceptions derived from Ice::Exception
  (and, hence, IceUtil::Exception) now returns a non-const string
  instead of a const string:

  	const ::std::string ice_name() const; // Old signature

	::std::string ice_name() const; // New signature

- For non-abstract Slice classes, the C++ code generated now adds a
  protected destructor. This prevents accidental allocation of
  class instances on the stack or as static variables. For the
  implementation of abstract Slice classes and for servant classes
  applications can do the same thing and add a protected destructor
  to prevent non-heap allocation.

- Removed getDefaultProperties() functions, and the global default
  properties. If you need global properties, you can easily
  create your own global variable.

- The signature of createProperties()-with-parameters is now:
  PropertiesPtr createProperties(int* argc, char* argv[],
                                 const PropertiesPtr& defaults = 0);
  "defaults" represents an optional set of default properties
  used to initialize the new Properties object. Ice properties 
  defined on the command-line and properties defined in the Ice
  config file may override these default properties.
   
- Added a new communicator-initialization function:
  CommunicatorPtr initialize(const InitializationData&);

- Added identityToString and stringToIdentity to the Communicator
  interface. If a string converter is configured these functions
  must be used instead of the current static functions.

- Added ability to configure user defined string and wstring
  converters that are used during marshalling/unmarshalling to
  convert between UTF8 as required in the over-the-wire stream
  and the users character set.

- Added operators <=, > and >= for slice classes, proxies and 
  structures.

- Fixed an assert which could occur with proxies received over
  the wire and containing unknown endpoints.

- It is now permissible to recreate a new object adapter with the same 
  name as an old adapter once waitForDeactivate() has returned on the
  old adapter.

- Added new method Ice::Communicator::createObjectAdapterWithRouter()
  which creates a routed object adapter. A object adapter can now only
  have one router associated with it, which is set with using this 
  method or by setting the <AdapterName>.Router property.  Also 
  as a result of this the Ice::ObjectAdapter::addRouter() and
  Ice::ObjectAdapter::removeRouter() methods have been removed.

- Added communicator initialize method which takes a InitializationData
  structure containing communicator members which are only allowed
  to be set during communicator creation. Currently included are
  Properties, Logger, and default context. The initializeWith
  communicator initialization functions have been deprecated and the
  setLogger() method has been removed.

- Added support for the "cpp:type:wstring" slice metadata. When used
  generated code will use std::wstring instead of std::string. See
  manual for more details.

- Added requestId to Current.


Changes since version 1.0.0
---------------------------

- Added support for the Visual C++ 2005 compiler.

- Removed the Ice.Warn.Leaks property.

- If several proxies share the same connection, and an operation call
  on one of the proxies causes a failure and the shared connection to
  be closed, then subsequent calls on the other proxies will try to
  establish a new connection instead of throwing an exception, even if
  retries are disabled.

- Added blocking client side concurrency model. The use of this model
  is controlled by the Ice.Blocking property.

- If a proxy is not configured with the -h parameter, Ice will now
  attempt to connect using all local interfaces. The loopback
  interface (127.0.0.1) will only be tried if it is the only local
  interface present.

- Fixed the marshalling of doubles on ARM/Linux.

- Added the ability to specify alternate mappings for Slice sequences
  other than std::vector. Please see the README file for more
  information.

- Fixed a bug in slice2cpp that caused one-shot constructors for
  classes to incorrectly initialize base classes for class hierarchies
  three or more levels deep.

- Fixed a bug in the Slice parser that caused problems if an included
  file contained white space in the file name.

- Fixed a deadlock during shutdown that could happen with
  bi-directional connections.

- Removed ice_default() method from proxies.

- Connection::close(false) (i.e., graceful connection shutdown) now
  waits until all outstanding requests have completed.

- Ice will now listen on all local interfaces if no -h parameter is
  present in the endpoint configuration and no default host has been
  set. It will also listen to all interfaces if the -h parameter is
  set to 0.0.0.0. In such configurations the endpoints published in
  proxies will not contain the loopback interface (127.0.0.1) unless
  it is the only local interface present.

- Added object adapter property <adapter>.ReplicaGroupId which
  allows adapters to be replicated. See the IceGrid chapter in the
  manual for more information.

- slice2cppe now provides the --add-header option. It adds a #include
  directive for the specified header at the beginning of the generated
  source file. For example:

      slice2cppe --add-header=precompiled.h x.ice

  adds "#include <precompiled.h>" to the beginning of x.cpp (before
  any other include directives).

  You can specify an optional guard, for example:

      slice2cppe --add-header=precompiled.h,__PRECOMPILED_H__ x.ice

  With this, the beginning of x.cpp contains:

      #ifndef __PRECOMPILED_H__
      #define __PRECOMPILED_H__
      #include <precompiled.h>
      #endif

  You can repeat the --add-header option to include several headers in
  the generated source.

- Ice::Communicator::createObjectAdapter() throws
  Ice::AlreadyRegisteredException if it is called with the name of an
  object adapter that already exists.

- Ice-E now uses -Os rather than -O3 for optimized GCC builds.

- EVC++ release builds now use "Optimize Size".
