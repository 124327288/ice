TBD

Migrating IceStorm Databases
----------------------------

Ice 3.3 supports migrating from Ice 3.1.1 and from Ice
3.2.1. Migration from other Ice versions may work, but is not
officially supported. If you require assistance with this please
contact sales@zeroc.com.

To migrate, first stop your IceStorm servers.

Next, copy the IceStorm database environment to a second location.

$ cp -r db recovered.db

Run the Berkeley DB utility db_recover on the copied database
environment.

$ db_recover -h recovered.db

Note that it is essential that the correct version of db_recover is
used. For Ice 3.1.1, Berkeley DB 4.3.29 must be used. For Ice 3.2.1,
Berkeley DB 4.5 must be used.

Now change to the location where the Ice 3.3 IceStorm database
environments are stored.

$ cd <new-location>

Next, run the icestormmigrate utility. The first argument is the path
to the old database environment. The second argument is the path to
the new database environment.

In this example we'll create a new directory "db" in which to store
the migrated database environment.

$ mkdir db
$ icestormmigrate <path-to-recovered.db> db

The migration is now complete, and the contents of old database environment
is now in the db directory.

Migrating IceGrid Databases
---------------------------

Ice 3.3 supports migrating from Ice 3.1.1 and from Ice
3.2.1. Migration from other Ice versions may work, but is not
officially supported. If you require assistance with this please
contact sales@zeroc.com.

To migrate, first stop the IceGrid registry to upgrade.

Next, copy the IceGrid database environment to a second location.

$ cp -r db recovered.db

Run the Berkeley DB utility db_recover on the copied database
environment.

$ db_recover -h recovered.db

Note that it is essential that the correct version of db_recover is
used. For Ice 3.1.1, Berkeley DB 4.3.29 must be used. For Ice 3.2.1,
Berkeley DB 4.5 must be used.

Now change to the location where the Ice 3.3 IceGrid database
environments are stored.

$ cd <new-location>

Next, run the upgradeicegrid.py utility located in the `config'
directory of your Ice distribution (or in /usr/share/Ice-3.3.0 if
using an RPM installation). The first argument is the path to the old
database environment. The second argument is the path to the new
database environment.

In this example we'll create a new directory "db" in which to store
the migrated database environment.

$ mkdir db
$ upgradeicegrid.py <path-to-recovered.db> db

The migration is now complete, and the contents of old database
environment is now in the db directory. 

By default, the migration utility assumes that the servers deployed
with IceGrid also use Ice 3.3.0. If your servers still use an older
Ice version, you need to specify the --server-version command line
option when running upgradeicegrid.py:

$ upgradeicegrid.py --server-version 3.2.1 <path-to-recovered.db> db

The migration utility will set the server descriptor `ice-version'
attribute to the specified version and the IceGrid registry will
generate configuration files compatible with the given version.

If upgrading the master IceGrid registry in a replicated environment
and the slaves are still running, you should first restart the master
registry in read-only mode using the --readonly option, for example:

$ icegridregistry --Ice.Config=config.master --readonly

Next, you can connect to the master registry with the icegridadmin or
IceGrid administrative GUI to ensure the database is correct. If
everything looks fine, you can shutdown and restart the master
registry without the --readonly option.
