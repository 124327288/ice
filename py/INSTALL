=========================================================================
Requirements
=========================================================================

- Python 2.3 (http://www.python.org)
- Ice 1.6.0


=========================================================================
Building the Ice extension for Python (Linux/Solaris/HP-UX/MacOS X/AIX)
=========================================================================

Follow these steps to build the Ice extension for Python:

1) Edit config/Make.rules and do the following:

   * Modify the installation prefix (if necessary).
   * Review the settings for PYTHON_HOME, PYTHON_INCLUDE_DIR and
     PYTHON_LIB_DIR.

2) Execute 'python -V' to verify that the Python 2.3 interpreter
   is in your executable search path.

3) Run 'make'.

4) Upon successful completion, run 'make install'. You may need
   additional user priveleges to install in the directory specified
   by config/Make.rules.

5) Modify your PYTHONPATH environment variable to include the Ice
   for Python extension. Assuming you installed the extension in
   the default directory (/opt/IcePy-1.6.0), you would modify your
   environment as shown below:

   export ICEPY_HOME=/opt/IcePy-1.6.0
   export PYTHONPATH=$ICEPY_HOME/lib:$ICEPY_HOME/python:$PYTHONPATH

=========================================================================
Building the Ice extension for Python (Windows)
=========================================================================

The Python interpreter is readily available on Windows platforms. You
can build it yourself using Microsoft Visual C++, or obtain a binary
distribution such as ActivePython (http://www.activestate.com).

Follow these steps to build the Ice extension for Python:

1) Configure Visual C++ so that it can find the Python include files
   and libraries.

2) Open the "all.dsw" workspace. If you are using Visual C++ .NET,
   the project files will first need to be converted from the Visual
   C++ 6.0 format.

3) Set your active project to "IcePy". Note that the default
   configuration is a Debug build, which requires that the debug
   libraries be available for Python and Ice.

4) Build the "IcePy" project.

5) Modify your environment to allow Python to find the Ice for
   Python extension. The interpreter must be able to locate
   the extension DLL as well as the Python source files in the
   "python" subdirectory. This is normally accomplished by setting
   the PYTHONPATH environment variable to contain the necessary
   subdirectories. For example, if the Ice for Python extension is
   installed in C:\IcePy, you could configure your environment as
   follows:

   set ICEPY_HOME=C:\IcePy
   set PYTHONPATH=%ICEPY_HOME%\bin;%ICEPY_HOME%\python


NOTE: When compiling the Python interpreter from sources using
Microsoft Visual C++ 6.0, the presence of the STLport header files
causes a compilation error. The solution is to temporarily remove or
rename the STLport include directory in your Visual C++ settings using
Tools/Options/Directories/Include files.


=========================================================================
Running the Tests
=========================================================================

TBD

The test subdirectory contains PHP implementations of the core Ice
test suite. In order to run these tests, you must have Python 2.2
or later, and the Ice for C++ tests must be built in the directory
specified by the ICE_HOME environment variable.

The test scripts require that the CLI version of the PHP interpreter
be available in your PATH, and assume that the Ice extension was
built in a static configuration.

To run all of the tests, do the following:

$ python allTests.py

You can also run tests individually by changing to the test directory
and running this command:

$ python run.py

In order to run the tests using a dynamic Ice extension, you will
need to edit the php.ini files in each test directory and add the
following configuration directives:

extension_dir=<phpdir>/modules
extension=ice.so
